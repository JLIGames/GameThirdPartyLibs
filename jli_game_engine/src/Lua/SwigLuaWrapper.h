/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN int SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN int SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN int SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN int  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




    #include "JLIEngine.h"


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FMOD_ADVANCEDSETTINGS swig_types[0]
#define SWIGTYPE_p_FMOD_ASYNCREADINFO swig_types[1]
#define SWIGTYPE_p_FMOD_CDTOC swig_types[2]
#define SWIGTYPE_p_FMOD_CHANNEL swig_types[3]
#define SWIGTYPE_p_FMOD_CHANNELGROUP swig_types[4]
#define SWIGTYPE_p_FMOD_CHANNELINDEX swig_types[5]
#define SWIGTYPE_p_FMOD_CHANNEL_CALLBACKTYPE swig_types[6]
#define SWIGTYPE_p_FMOD_CREATESOUNDEXINFO swig_types[7]
#define SWIGTYPE_p_FMOD_DELAYTYPE swig_types[8]
#define SWIGTYPE_p_FMOD_DSP swig_types[9]
#define SWIGTYPE_p_FMOD_DSPCONNECTION swig_types[10]
#define SWIGTYPE_p_FMOD_DSP_FFT_WINDOW swig_types[11]
#define SWIGTYPE_p_FMOD_DSP_RESAMPLER swig_types[12]
#define SWIGTYPE_p_FMOD_GEOMETRY swig_types[13]
#define SWIGTYPE_p_FMOD_GUID swig_types[14]
#define SWIGTYPE_p_FMOD_OPENSTATE swig_types[15]
#define SWIGTYPE_p_FMOD_OUTPUTTYPE swig_types[16]
#define SWIGTYPE_p_FMOD_PLUGINTYPE swig_types[17]
#define SWIGTYPE_p_FMOD_POLYGON swig_types[18]
#define SWIGTYPE_p_FMOD_RESULT swig_types[19]
#define SWIGTYPE_p_FMOD_REVERB swig_types[20]
#define SWIGTYPE_p_FMOD_REVERB_CHANNELPROPERTIES swig_types[21]
#define SWIGTYPE_p_FMOD_REVERB_PROPERTIES swig_types[22]
#define SWIGTYPE_p_FMOD_SOUND swig_types[23]
#define SWIGTYPE_p_FMOD_SOUNDGROUP swig_types[24]
#define SWIGTYPE_p_FMOD_SOUNDGROUP_BEHAVIOR swig_types[25]
#define SWIGTYPE_p_FMOD_SOUND_FORMAT swig_types[26]
#define SWIGTYPE_p_FMOD_SOUND_TYPE swig_types[27]
#define SWIGTYPE_p_FMOD_SPEAKER swig_types[28]
#define SWIGTYPE_p_FMOD_SPEAKERMAPTYPE swig_types[29]
#define SWIGTYPE_p_FMOD_SPEAKERMODE swig_types[30]
#define SWIGTYPE_p_FMOD_SYNCPOINT swig_types[31]
#define SWIGTYPE_p_FMOD_SYSTEM swig_types[32]
#define SWIGTYPE_p_FMOD_SYSTEM_CALLBACKTYPE swig_types[33]
#define SWIGTYPE_p_FMOD_TAG swig_types[34]
#define SWIGTYPE_p_FMOD_TAGDATATYPE swig_types[35]
#define SWIGTYPE_p_FMOD_TAGTYPE swig_types[36]
#define SWIGTYPE_p_FMOD_VECTOR swig_types[37]
#define SWIGTYPE_p_ObjectDuplicateMap swig_types[38]
#define SWIGTYPE_p_ObjectList swig_types[39]
#define SWIGTYPE_p_PHY_ScalarType swig_types[40]
#define SWIGTYPE_p_bool swig_types[41]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t swig_types[42]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t swig_types[43]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t swig_types[44]
#define SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t swig_types[45]
#define SWIGTYPE_p_btAlignedObjectArrayT_btDbvtProxy_p_t swig_types[46]
#define SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t swig_types[47]
#define SWIGTYPE_p_btAlignedObjectArrayT_btOptimizedBvhNode_t swig_types[48]
#define SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t swig_types[49]
#define SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t swig_types[50]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t swig_types[51]
#define SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t swig_types[52]
#define SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t swig_types[53]
#define SWIGTYPE_p_btConstraintRow swig_types[54]
#define SWIGTYPE_p_btDbvtAabbMm swig_types[55]
#define SWIGTYPE_p_btDefaultSerializer swig_types[56]
#define SWIGTYPE_p_btHashMapT_btHashInt_btTriangleInfo_t swig_types[57]
#define SWIGTYPE_p_btHashMapT_btHashPtr_int_t swig_types[58]
#define SWIGTYPE_p_btSerializer swig_types[59]
#define SWIGTYPE_p_char swig_types[60]
#define SWIGTYPE_p_double swig_types[61]
#define SWIGTYPE_p_f_p_void__void swig_types[62]
#define SWIGTYPE_p_f_size_t__p_void swig_types[63]
#define SWIGTYPE_p_f_size_t_int__p_void swig_types[64]
#define SWIGTYPE_p_float swig_types[65]
#define SWIGTYPE_p_int swig_types[66]
#define SWIGTYPE_p_int64_t swig_types[67]
#define SWIGTYPE_p_jli__AbstractBuilder swig_types[68]
#define SWIGTYPE_p_jli__AbstractDecorator swig_types[69]
#define SWIGTYPE_p_jli__AbstractFactoryObject swig_types[70]
#define SWIGTYPE_p_jli__AbstractObject swig_types[71]
#define SWIGTYPE_p_jli__AbstractPhysicsBody swig_types[72]
#define SWIGTYPE_p_jli__Action swig_types[73]
#define SWIGTYPE_p_jli__ActionBuilder swig_types[74]
#define SWIGTYPE_p_jli__Camera swig_types[75]
#define SWIGTYPE_p_jli__CameraBuilder swig_types[76]
#define SWIGTYPE_p_jli__Clock swig_types[77]
#define SWIGTYPE_p_jli__ClockBuilder swig_types[78]
#define SWIGTYPE_p_jli__CollisionResponse swig_types[79]
#define SWIGTYPE_p_jli__CollisionResponseBuilder swig_types[80]
#define SWIGTYPE_p_jli__CubicTexture swig_types[81]
#define SWIGTYPE_p_jli__CubicTextureBuilder swig_types[82]
#define SWIGTYPE_p_jli__DynamicPhysicsBody swig_types[83]
#define SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder swig_types[84]
#define SWIGTYPE_p_jli__Geometry swig_types[85]
#define SWIGTYPE_p_jli__GeometryBuilder swig_types[86]
#define SWIGTYPE_p_jli__GhostPhysicsBody swig_types[87]
#define SWIGTYPE_p_jli__GhostPhysicsBodyBuilder swig_types[88]
#define SWIGTYPE_p_jli__KinematicPhysicsBody swig_types[89]
#define SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder swig_types[90]
#define SWIGTYPE_p_jli__Light swig_types[91]
#define SWIGTYPE_p_jli__LightBuilder swig_types[92]
#define SWIGTYPE_p_jli__Material swig_types[93]
#define SWIGTYPE_p_jli__MaterialBuilder swig_types[94]
#define SWIGTYPE_p_jli__MaterialProperty swig_types[95]
#define SWIGTYPE_p_jli__MaterialPropertyBuilder swig_types[96]
#define SWIGTYPE_p_jli__Node swig_types[97]
#define SWIGTYPE_p_jli__NodeBuilder swig_types[98]
#define SWIGTYPE_p_jli__NodeState swig_types[99]
#define SWIGTYPE_p_jli__NodeStateBuilder swig_types[100]
#define SWIGTYPE_p_jli__NodeStateMachine swig_types[101]
#define SWIGTYPE_p_jli__NodeStateMachineBuilder swig_types[102]
#define SWIGTYPE_p_jli__ParticleEmitter swig_types[103]
#define SWIGTYPE_p_jli__ParticleEmitterBuilder swig_types[104]
#define SWIGTYPE_p_jli__PhysicsContact swig_types[105]
#define SWIGTYPE_p_jli__PhysicsContactBuilder swig_types[106]
#define SWIGTYPE_p_jli__PhysicsField swig_types[107]
#define SWIGTYPE_p_jli__PhysicsFieldBuilder swig_types[108]
#define SWIGTYPE_p_jli__PhysicsShape swig_types[109]
#define SWIGTYPE_p_jli__PhysicsShapeBuilder swig_types[110]
#define SWIGTYPE_p_jli__PhysicsWorld swig_types[111]
#define SWIGTYPE_p_jli__PhysicsWorldBuilder swig_types[112]
#define SWIGTYPE_p_jli__Resource swig_types[113]
#define SWIGTYPE_p_jli__ResourceBuilder swig_types[114]
#define SWIGTYPE_p_jli__RigidPhysicsBody swig_types[115]
#define SWIGTYPE_p_jli__RigidPhysicsBodyBuilder swig_types[116]
#define SWIGTYPE_p_jli__Scene swig_types[117]
#define SWIGTYPE_p_jli__SceneBuilder swig_types[118]
#define SWIGTYPE_p_jli__SceneState swig_types[119]
#define SWIGTYPE_p_jli__SceneStateBuilder swig_types[120]
#define SWIGTYPE_p_jli__SceneStateMachine swig_types[121]
#define SWIGTYPE_p_jli__SceneStateMachineBuilder swig_types[122]
#define SWIGTYPE_p_jli__SoftPhysicsBody swig_types[123]
#define SWIGTYPE_p_jli__SoftPhysicsBodyBuilder swig_types[124]
#define SWIGTYPE_p_jli__Sound swig_types[125]
#define SWIGTYPE_p_jli__SoundBuilder swig_types[126]
#define SWIGTYPE_p_jli__Telegram swig_types[127]
#define SWIGTYPE_p_jli__Texture swig_types[128]
#define SWIGTYPE_p_jli__TextureBuilder swig_types[129]
#define SWIGTYPE_p_jli__World swig_types[130]
#define SWIGTYPE_p_jli__WorldFactory swig_types[131]
#define SWIGTYPE_p_jli__WorldLuaVirtualMachine swig_types[132]
#define SWIGTYPE_p_jli__WorldMySQL swig_types[133]
#define SWIGTYPE_p_jli__WorldSound swig_types[134]
#define SWIGTYPE_p_jli__WorldState swig_types[135]
#define SWIGTYPE_p_jli__WorldStateBuilder swig_types[136]
#define SWIGTYPE_p_jli__WorldStateMachine swig_types[137]
#define SWIGTYPE_p_jli__WorldStateMachineBuilder swig_types[138]
#define SWIGTYPE_p_long swig_types[139]
#define SWIGTYPE_p_long_long swig_types[140]
#define SWIGTYPE_p_short swig_types[141]
#define SWIGTYPE_p_signed_char swig_types[142]
#define SWIGTYPE_p_std__string swig_types[143]
#define SWIGTYPE_p_uint64_t swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_long_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_void swig_types[149]
static swig_type_info *swig_types[151];
static swig_module_info swig_module = {swig_types, 150, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "JLI"
#define SWIG_init      luaopen_JLI
#define SWIG_init_user luaopen_JLI_user

#define SWIG_LUACODE   luaopen_JLI_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#define SWIGVERSION 0x030002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_Action__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *result = 0 ;
  
  SWIG_check_num_args("jli::Action::Action",0,0)
  result = (jli::Action *)new jli::Action();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Action,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Action__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Action *result = 0 ;
  
  SWIG_check_num_args("jli::Action::Action",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Action::Action",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Action",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Action *)new jli::Action((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Action,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Action__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = 0 ;
  jli::Action *result = 0 ;
  
  SWIG_check_num_args("jli::Action::Action",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Action::Action",1,"jli::Action const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("new_Action",1,SWIGTYPE_p_jli__Action);
  }
  
  result = (jli::Action *)new jli::Action((jli::Action const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Action,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Action(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Action__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Action__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Action__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Action'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Action::Action()\n"
    "    jli::Action::Action(jli::AbstractBuilder const &)\n"
    "    jli::Action::Action(jli::Action const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Action_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Action::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator new",1,"jli::Action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Action::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_new",1,SWIGTYPE_p_jli__Action);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Action::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator delete",1,"jli::Action *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Action::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_delete",1,SWIGTYPE_p_jli__Action);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Action_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Action::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator new",1,"jli::Action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Action::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Action::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_new",1,SWIGTYPE_p_jli__Action);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Action_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Action_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Action_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Action_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Action::operator new(size_t)\n"
    "    jli::Action::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Action_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Action::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator delete",1,"jli::Action *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Action::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Action::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_delete",1,SWIGTYPE_p_jli__Action);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Action_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Action_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Action_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Action_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Action_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Action::operator delete(void *)\n"
    "    jli::Action::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Action_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Action::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator new[]",1,"jli::Action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Action::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_new_array",1,SWIGTYPE_p_jli__Action);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Action::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator delete[]",1,"jli::Action *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Action::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_delete_array",1,SWIGTYPE_p_jli__Action);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Action_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Action::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator new[]",1,"jli::Action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Action::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Action::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_new_array",1,SWIGTYPE_p_jli__Action);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Action_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Action_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Action_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Action_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Action::operator new[](size_t)\n"
    "    jli::Action::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Action_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Action::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::operator delete[]",1,"jli::Action *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Action::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Action::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_operator_delete_array",1,SWIGTYPE_p_jli__Action);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Action_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Action_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Action_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Action, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Action_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Action_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Action::operator delete[](void *)\n"
    "    jli::Action::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Action_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Action::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::calculateSerializeBufferSize",1,"jli::Action const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Action);
  }
  
  result = (s32)((jli::Action const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Action::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::serialize",1,"jli::Action const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Action::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Action::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_serialize",1,SWIGTYPE_p_jli__Action);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Action_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Action_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Action const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Action::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::getClassName",1,"jli::Action const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_getClassName",1,SWIGTYPE_p_jli__Action);
  }
  
  result = (char *)((jli::Action const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Action_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Action *arg1 = (jli::Action *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Action::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Action::getType",1,"jli::Action const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Action,0))){
    SWIG_fail_ptr("Action_getType",1,SWIGTYPE_p_jli__Action);
  }
  
  result = (u32)((jli::Action const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Action(void *obj) {
jli::Action *arg1 = (jli::Action *) obj;
delete arg1;
}
static int _proxy__wrap_new_Action(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Action);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Action_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Action_methods[]= {
    { "operator_new", _wrap_Action_operator_new},
    { "operator_delete", _wrap_Action_operator_delete},
    { "operator_new_array", _wrap_Action_operator_new_array},
    { "operator_delete_array", _wrap_Action_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Action_calculateSerializeBufferSize},
    { "serialize", _wrap_Action_serialize},
    { "getClassName", _wrap_Action_getClassName},
    { "getType", _wrap_Action_getType},
    {0,0}
};
static swig_lua_method swig_Action_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Action_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Action_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Action_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Action_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Action_Sf_SwigStatic = {
    "Action",
    swig_Action_Sf_SwigStatic_methods,
    swig_Action_Sf_SwigStatic_attributes,
    swig_Action_Sf_SwigStatic_constants,
    swig_Action_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Action_bases[] = {0};
static const char *swig_Action_base_names[] = {0};
static swig_lua_class _wrap_class_Action = { "Action", "Action", &SWIGTYPE_p_jli__Action,_proxy__wrap_new_Action, swig_delete_Action, swig_Action_methods, swig_Action_attributes, &swig_Action_Sf_SwigStatic, swig_Action_meta, swig_Action_bases, swig_Action_base_names };

static int _wrap_ActionBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ActionBuilder *arg1 = (jli::ActionBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::ActionBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ActionBuilder::calculateSerializeBufferSize",1,"jli::ActionBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ActionBuilder,0))){
    SWIG_fail_ptr("ActionBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__ActionBuilder);
  }
  
  result = (s32)((jli::ActionBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ActionBuilder *arg1 = (jli::ActionBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::ActionBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ActionBuilder::serialize",1,"jli::ActionBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ActionBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ActionBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ActionBuilder,0))){
    SWIG_fail_ptr("ActionBuilder_serialize",1,SWIGTYPE_p_jli__ActionBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ActionBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("ActionBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::ActionBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ActionBuilder *arg1 = (jli::ActionBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ActionBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ActionBuilder::getObjectType",1,"jli::ActionBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ActionBuilder,0))){
    SWIG_fail_ptr("ActionBuilder_getObjectType",1,SWIGTYPE_p_jli__ActionBuilder);
  }
  
  result = (u32)((jli::ActionBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::ActionBuilder *arg1 = (jli::ActionBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::ActionBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ActionBuilder::getClassName",1,"jli::ActionBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ActionBuilder,0))){
    SWIG_fail_ptr("ActionBuilder_getClassName",1,SWIGTYPE_p_jli__ActionBuilder);
  }
  
  result = (char *)((jli::ActionBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ActionBuilder *arg1 = (jli::ActionBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ActionBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ActionBuilder::getType",1,"jli::ActionBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ActionBuilder,0))){
    SWIG_fail_ptr("ActionBuilder_getType",1,SWIGTYPE_p_jli__ActionBuilder);
  }
  
  result = (u32)((jli::ActionBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_ActionBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActionBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_ActionBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_ActionBuilder_serialize},
    { "getObjectType", _wrap_ActionBuilder_getObjectType},
    { "getClassName", _wrap_ActionBuilder_getClassName},
    { "getType", _wrap_ActionBuilder_getType},
    {0,0}
};
static swig_lua_method swig_ActionBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActionBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ActionBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActionBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActionBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActionBuilder_Sf_SwigStatic = {
    "ActionBuilder",
    swig_ActionBuilder_Sf_SwigStatic_methods,
    swig_ActionBuilder_Sf_SwigStatic_attributes,
    swig_ActionBuilder_Sf_SwigStatic_constants,
    swig_ActionBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActionBuilder_bases[] = {0};
static const char *swig_ActionBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ActionBuilder = { "ActionBuilder", "ActionBuilder", &SWIGTYPE_p_jli__ActionBuilder,0,0, swig_ActionBuilder_methods, swig_ActionBuilder_attributes, &swig_ActionBuilder_Sf_SwigStatic, swig_ActionBuilder_meta, swig_ActionBuilder_bases, swig_ActionBuilder_base_names };

static int _wrap_new_Camera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::Camera",0,0)
  result = (jli::Camera *)new jli::Camera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Camera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Camera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Camera *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::Camera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Camera::Camera",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Camera",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Camera *)new jli::Camera((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Camera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Camera__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = 0 ;
  jli::Camera *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::Camera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Camera::Camera",1,"jli::Camera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("new_Camera",1,SWIGTYPE_p_jli__Camera);
  }
  
  result = (jli::Camera *)new jli::Camera((jli::Camera const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Camera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Camera(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Camera__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Camera__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Camera__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Camera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Camera::Camera()\n"
    "    jli::Camera::Camera(jli::AbstractBuilder const &)\n"
    "    jli::Camera::Camera(jli::Camera const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator new",1,"jli::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Camera::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_new",1,SWIGTYPE_p_jli__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Camera::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator delete",1,"jli::Camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Camera::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_delete",1,SWIGTYPE_p_jli__Camera);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Camera_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator new",1,"jli::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Camera::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Camera::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_new",1,SWIGTYPE_p_jli__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Camera_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Camera_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Camera_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Camera::operator new(size_t)\n"
    "    jli::Camera::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Camera::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator delete",1,"jli::Camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Camera::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Camera::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_delete",1,SWIGTYPE_p_jli__Camera);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Camera_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Camera_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Camera_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Camera::operator delete(void *)\n"
    "    jli::Camera::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator new[]",1,"jli::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Camera::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_new_array",1,SWIGTYPE_p_jli__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Camera::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator delete[]",1,"jli::Camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Camera::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_delete_array",1,SWIGTYPE_p_jli__Camera);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Camera_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator new[]",1,"jli::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Camera::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Camera::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_new_array",1,SWIGTYPE_p_jli__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Camera_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Camera_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Camera_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Camera::operator new[](size_t)\n"
    "    jli::Camera::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Camera::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::operator delete[]",1,"jli::Camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Camera::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Camera::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_operator_delete_array",1,SWIGTYPE_p_jli__Camera);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Camera_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Camera_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Camera_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Camera_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Camera::operator delete[](void *)\n"
    "    jli::Camera::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Camera::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::calculateSerializeBufferSize",1,"jli::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Camera);
  }
  
  result = (s32)((jli::Camera const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Camera::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::serialize",1,"jli::Camera const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Camera::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Camera::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_serialize",1,SWIGTYPE_p_jli__Camera);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Camera_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Camera_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Camera const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Camera::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::getClassName",1,"jli::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_getClassName",1,SWIGTYPE_p_jli__Camera);
  }
  
  result = (char *)((jli::Camera const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Camera::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::getType",1,"jli::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_getType",1,SWIGTYPE_p_jli__Camera);
  }
  
  result = (u32)((jli::Camera const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_render(lua_State* L) {
  int SWIG_arg = 0;
  jli::Camera *arg1 = (jli::Camera *) 0 ;
  
  SWIG_check_num_args("jli::Camera::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Camera::render",1,"jli::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("Camera_render",1,SWIGTYPE_p_jli__Camera);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Camera(void *obj) {
jli::Camera *arg1 = (jli::Camera *) obj;
delete arg1;
}
static int _proxy__wrap_new_Camera(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Camera);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Camera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Camera_methods[]= {
    { "operator_new", _wrap_Camera_operator_new},
    { "operator_delete", _wrap_Camera_operator_delete},
    { "operator_new_array", _wrap_Camera_operator_new_array},
    { "operator_delete_array", _wrap_Camera_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Camera_calculateSerializeBufferSize},
    { "serialize", _wrap_Camera_serialize},
    { "getClassName", _wrap_Camera_getClassName},
    { "getType", _wrap_Camera_getType},
    { "render", _wrap_Camera_render},
    {0,0}
};
static swig_lua_method swig_Camera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Camera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Camera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Camera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Camera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Camera_Sf_SwigStatic = {
    "Camera",
    swig_Camera_Sf_SwigStatic_methods,
    swig_Camera_Sf_SwigStatic_attributes,
    swig_Camera_Sf_SwigStatic_constants,
    swig_Camera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Camera_bases[] = {0};
static const char *swig_Camera_base_names[] = {0};
static swig_lua_class _wrap_class_Camera = { "Camera", "Camera", &SWIGTYPE_p_jli__Camera,_proxy__wrap_new_Camera, swig_delete_Camera, swig_Camera_methods, swig_Camera_attributes, &swig_Camera_Sf_SwigStatic, swig_Camera_meta, swig_Camera_bases, swig_Camera_base_names };

static int _wrap_CameraBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CameraBuilder *arg1 = (jli::CameraBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::CameraBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CameraBuilder::calculateSerializeBufferSize",1,"jli::CameraBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CameraBuilder,0))){
    SWIG_fail_ptr("CameraBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__CameraBuilder);
  }
  
  result = (s32)((jli::CameraBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CameraBuilder *arg1 = (jli::CameraBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::CameraBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CameraBuilder::serialize",1,"jli::CameraBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CameraBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CameraBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CameraBuilder,0))){
    SWIG_fail_ptr("CameraBuilder_serialize",1,SWIGTYPE_p_jli__CameraBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CameraBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("CameraBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::CameraBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CameraBuilder *arg1 = (jli::CameraBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CameraBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CameraBuilder::getObjectType",1,"jli::CameraBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CameraBuilder,0))){
    SWIG_fail_ptr("CameraBuilder_getObjectType",1,SWIGTYPE_p_jli__CameraBuilder);
  }
  
  result = (u32)((jli::CameraBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::CameraBuilder *arg1 = (jli::CameraBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::CameraBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CameraBuilder::getClassName",1,"jli::CameraBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CameraBuilder,0))){
    SWIG_fail_ptr("CameraBuilder_getClassName",1,SWIGTYPE_p_jli__CameraBuilder);
  }
  
  result = (char *)((jli::CameraBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CameraBuilder *arg1 = (jli::CameraBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CameraBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CameraBuilder::getType",1,"jli::CameraBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CameraBuilder,0))){
    SWIG_fail_ptr("CameraBuilder_getType",1,SWIGTYPE_p_jli__CameraBuilder);
  }
  
  result = (u32)((jli::CameraBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_CameraBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_CameraBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_CameraBuilder_serialize},
    { "getObjectType", _wrap_CameraBuilder_getObjectType},
    { "getClassName", _wrap_CameraBuilder_getClassName},
    { "getType", _wrap_CameraBuilder_getType},
    {0,0}
};
static swig_lua_method swig_CameraBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CameraBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CameraBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CameraBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CameraBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CameraBuilder_Sf_SwigStatic = {
    "CameraBuilder",
    swig_CameraBuilder_Sf_SwigStatic_methods,
    swig_CameraBuilder_Sf_SwigStatic_attributes,
    swig_CameraBuilder_Sf_SwigStatic_constants,
    swig_CameraBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CameraBuilder_bases[] = {0};
static const char *swig_CameraBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_CameraBuilder = { "CameraBuilder", "CameraBuilder", &SWIGTYPE_p_jli__CameraBuilder,0,0, swig_CameraBuilder_methods, swig_CameraBuilder_attributes, &swig_CameraBuilder_Sf_SwigStatic, swig_CameraBuilder_meta, swig_CameraBuilder_bases, swig_CameraBuilder_base_names };

static int _wrap_new_Clock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::Clock",0,0)
  result = (jli::Clock *)new jli::Clock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Clock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Clock *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::Clock",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Clock::Clock",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Clock",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Clock *)new jli::Clock((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Clock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = 0 ;
  jli::Clock *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::Clock",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Clock::Clock",1,"jli::Clock const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("new_Clock",1,SWIGTYPE_p_jli__Clock);
  }
  
  result = (jli::Clock *)new jli::Clock((jli::Clock const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Clock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clock(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Clock__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Clock__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Clock__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Clock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Clock::Clock()\n"
    "    jli::Clock::Clock(jli::AbstractBuilder const &)\n"
    "    jli::Clock::Clock(jli::Clock const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Clock_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator new",1,"jli::Clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Clock::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_new",1,SWIGTYPE_p_jli__Clock);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Clock::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator delete",1,"jli::Clock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Clock::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_delete",1,SWIGTYPE_p_jli__Clock);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Clock_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator new",1,"jli::Clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Clock::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Clock::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_new",1,SWIGTYPE_p_jli__Clock);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Clock_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Clock_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Clock_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Clock_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Clock::operator new(size_t)\n"
    "    jli::Clock::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Clock_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Clock::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator delete",1,"jli::Clock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Clock::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Clock::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_delete",1,SWIGTYPE_p_jli__Clock);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Clock_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Clock_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Clock_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Clock_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Clock_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Clock::operator delete(void *)\n"
    "    jli::Clock::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Clock_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator new[]",1,"jli::Clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Clock::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_new_array",1,SWIGTYPE_p_jli__Clock);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Clock::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator delete[]",1,"jli::Clock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Clock::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_delete_array",1,SWIGTYPE_p_jli__Clock);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Clock_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator new[]",1,"jli::Clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Clock::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Clock::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_new_array",1,SWIGTYPE_p_jli__Clock);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Clock_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Clock_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Clock_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Clock_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Clock::operator new[](size_t)\n"
    "    jli::Clock::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Clock_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Clock::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::operator delete[]",1,"jli::Clock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Clock::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Clock::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_operator_delete_array",1,SWIGTYPE_p_jli__Clock);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Clock_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Clock_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Clock_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Clock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Clock_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Clock_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Clock::operator delete[](void *)\n"
    "    jli::Clock::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Clock_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Clock::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::calculateSerializeBufferSize",1,"jli::Clock const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Clock);
  }
  
  result = (s32)((jli::Clock const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Clock::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::serialize",1,"jli::Clock const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Clock::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Clock::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_serialize",1,SWIGTYPE_p_jli__Clock);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Clock_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Clock_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Clock const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Clock::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::getClassName",1,"jli::Clock const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_getClassName",1,SWIGTYPE_p_jli__Clock);
  }
  
  result = (char *)((jli::Clock const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clock_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Clock *arg1 = (jli::Clock *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Clock::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Clock::getType",1,"jli::Clock const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Clock,0))){
    SWIG_fail_ptr("Clock_getType",1,SWIGTYPE_p_jli__Clock);
  }
  
  result = (u32)((jli::Clock const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Clock(void *obj) {
jli::Clock *arg1 = (jli::Clock *) obj;
delete arg1;
}
static int _proxy__wrap_new_Clock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Clock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Clock_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Clock_methods[]= {
    { "operator_new", _wrap_Clock_operator_new},
    { "operator_delete", _wrap_Clock_operator_delete},
    { "operator_new_array", _wrap_Clock_operator_new_array},
    { "operator_delete_array", _wrap_Clock_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Clock_calculateSerializeBufferSize},
    { "serialize", _wrap_Clock_serialize},
    { "getClassName", _wrap_Clock_getClassName},
    { "getType", _wrap_Clock_getType},
    {0,0}
};
static swig_lua_method swig_Clock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Clock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Clock_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Clock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Clock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Clock_Sf_SwigStatic = {
    "Clock",
    swig_Clock_Sf_SwigStatic_methods,
    swig_Clock_Sf_SwigStatic_attributes,
    swig_Clock_Sf_SwigStatic_constants,
    swig_Clock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Clock_bases[] = {0};
static const char *swig_Clock_base_names[] = {0};
static swig_lua_class _wrap_class_Clock = { "Clock", "Clock", &SWIGTYPE_p_jli__Clock,_proxy__wrap_new_Clock, swig_delete_Clock, swig_Clock_methods, swig_Clock_attributes, &swig_Clock_Sf_SwigStatic, swig_Clock_meta, swig_Clock_bases, swig_Clock_base_names };

static int _wrap_ClockBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ClockBuilder *arg1 = (jli::ClockBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::ClockBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ClockBuilder::calculateSerializeBufferSize",1,"jli::ClockBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ClockBuilder,0))){
    SWIG_fail_ptr("ClockBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__ClockBuilder);
  }
  
  result = (s32)((jli::ClockBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ClockBuilder *arg1 = (jli::ClockBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::ClockBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ClockBuilder::serialize",1,"jli::ClockBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ClockBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ClockBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ClockBuilder,0))){
    SWIG_fail_ptr("ClockBuilder_serialize",1,SWIGTYPE_p_jli__ClockBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ClockBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("ClockBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::ClockBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ClockBuilder *arg1 = (jli::ClockBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ClockBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ClockBuilder::getObjectType",1,"jli::ClockBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ClockBuilder,0))){
    SWIG_fail_ptr("ClockBuilder_getObjectType",1,SWIGTYPE_p_jli__ClockBuilder);
  }
  
  result = (u32)((jli::ClockBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::ClockBuilder *arg1 = (jli::ClockBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::ClockBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ClockBuilder::getClassName",1,"jli::ClockBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ClockBuilder,0))){
    SWIG_fail_ptr("ClockBuilder_getClassName",1,SWIGTYPE_p_jli__ClockBuilder);
  }
  
  result = (char *)((jli::ClockBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ClockBuilder *arg1 = (jli::ClockBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ClockBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ClockBuilder::getType",1,"jli::ClockBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ClockBuilder,0))){
    SWIG_fail_ptr("ClockBuilder_getType",1,SWIGTYPE_p_jli__ClockBuilder);
  }
  
  result = (u32)((jli::ClockBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_ClockBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClockBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_ClockBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_ClockBuilder_serialize},
    { "getObjectType", _wrap_ClockBuilder_getObjectType},
    { "getClassName", _wrap_ClockBuilder_getClassName},
    { "getType", _wrap_ClockBuilder_getType},
    {0,0}
};
static swig_lua_method swig_ClockBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClockBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClockBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClockBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClockBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClockBuilder_Sf_SwigStatic = {
    "ClockBuilder",
    swig_ClockBuilder_Sf_SwigStatic_methods,
    swig_ClockBuilder_Sf_SwigStatic_attributes,
    swig_ClockBuilder_Sf_SwigStatic_constants,
    swig_ClockBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClockBuilder_bases[] = {0};
static const char *swig_ClockBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ClockBuilder = { "ClockBuilder", "ClockBuilder", &SWIGTYPE_p_jli__ClockBuilder,0,0, swig_ClockBuilder_methods, swig_ClockBuilder_attributes, &swig_ClockBuilder_Sf_SwigStatic, swig_ClockBuilder_meta, swig_ClockBuilder_bases, swig_ClockBuilder_base_names };

static int _wrap_new_CollisionResponse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::CollisionResponse",0,0)
  result = (jli::CollisionResponse *)new jli::CollisionResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CollisionResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::CollisionResponse *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::CollisionResponse",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::CollisionResponse::CollisionResponse",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_CollisionResponse",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::CollisionResponse *)new jli::CollisionResponse((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CollisionResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = 0 ;
  jli::CollisionResponse *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::CollisionResponse",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::CollisionResponse::CollisionResponse",1,"jli::CollisionResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("new_CollisionResponse",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  result = (jli::CollisionResponse *)new jli::CollisionResponse((jli::CollisionResponse const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CollisionResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponse(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionResponse__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CollisionResponse__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CollisionResponse__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CollisionResponse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CollisionResponse::CollisionResponse()\n"
    "    jli::CollisionResponse::CollisionResponse(jli::AbstractBuilder const &)\n"
    "    jli::CollisionResponse::CollisionResponse(jli::CollisionResponse const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionResponse_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator new",1,"jli::CollisionResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_new",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator delete",1,"jli::CollisionResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_delete",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponse_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator new",1,"jli::CollisionResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponse::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_new",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CollisionResponse_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionResponse_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionResponse_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionResponse_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CollisionResponse::operator new(size_t)\n"
    "    jli::CollisionResponse::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionResponse_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator delete",1,"jli::CollisionResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponse::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_delete",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponse_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CollisionResponse_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionResponse_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionResponse_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionResponse_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CollisionResponse::operator delete(void *)\n"
    "    jli::CollisionResponse::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionResponse_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator new[]",1,"jli::CollisionResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_new_array",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator delete[]",1,"jli::CollisionResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_delete_array",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponse_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator new[]",1,"jli::CollisionResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponse::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_new_array",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CollisionResponse_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionResponse_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionResponse_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionResponse_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CollisionResponse::operator new[](size_t)\n"
    "    jli::CollisionResponse::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionResponse_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::operator delete[]",1,"jli::CollisionResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponse::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponse::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_operator_delete_array",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponse_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CollisionResponse_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionResponse_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CollisionResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionResponse_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionResponse_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CollisionResponse::operator delete[](void *)\n"
    "    jli::CollisionResponse::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionResponse_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::CollisionResponse::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::calculateSerializeBufferSize",1,"jli::CollisionResponse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  result = (s32)((jli::CollisionResponse const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::serialize",1,"jli::CollisionResponse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponse::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponse::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_serialize",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponse_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("CollisionResponse_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::CollisionResponse const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponse::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::getClassName",1,"jli::CollisionResponse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_getClassName",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  result = (char *)((jli::CollisionResponse const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponse_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponse *arg1 = (jli::CollisionResponse *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CollisionResponse::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponse::getType",1,"jli::CollisionResponse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponse,0))){
    SWIG_fail_ptr("CollisionResponse_getType",1,SWIGTYPE_p_jli__CollisionResponse);
  }
  
  result = (u32)((jli::CollisionResponse const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionResponse(void *obj) {
jli::CollisionResponse *arg1 = (jli::CollisionResponse *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionResponse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionResponse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionResponse_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionResponse_methods[]= {
    { "operator_new", _wrap_CollisionResponse_operator_new},
    { "operator_delete", _wrap_CollisionResponse_operator_delete},
    { "operator_new_array", _wrap_CollisionResponse_operator_new_array},
    { "operator_delete_array", _wrap_CollisionResponse_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_CollisionResponse_calculateSerializeBufferSize},
    { "serialize", _wrap_CollisionResponse_serialize},
    { "getClassName", _wrap_CollisionResponse_getClassName},
    { "getType", _wrap_CollisionResponse_getType},
    {0,0}
};
static swig_lua_method swig_CollisionResponse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionResponse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionResponse_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionResponse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionResponse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionResponse_Sf_SwigStatic = {
    "CollisionResponse",
    swig_CollisionResponse_Sf_SwigStatic_methods,
    swig_CollisionResponse_Sf_SwigStatic_attributes,
    swig_CollisionResponse_Sf_SwigStatic_constants,
    swig_CollisionResponse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionResponse_bases[] = {0};
static const char *swig_CollisionResponse_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionResponse = { "CollisionResponse", "CollisionResponse", &SWIGTYPE_p_jli__CollisionResponse,_proxy__wrap_new_CollisionResponse, swig_delete_CollisionResponse, swig_CollisionResponse_methods, swig_CollisionResponse_attributes, &swig_CollisionResponse_Sf_SwigStatic, swig_CollisionResponse_meta, swig_CollisionResponse_bases, swig_CollisionResponse_base_names };

static int _wrap_CollisionResponseBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponseBuilder *arg1 = (jli::CollisionResponseBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::CollisionResponseBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponseBuilder::calculateSerializeBufferSize",1,"jli::CollisionResponseBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponseBuilder,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__CollisionResponseBuilder);
  }
  
  result = (s32)((jli::CollisionResponseBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponseBuilder *arg1 = (jli::CollisionResponseBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::CollisionResponseBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponseBuilder::serialize",1,"jli::CollisionResponseBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CollisionResponseBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CollisionResponseBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponseBuilder,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_serialize",1,SWIGTYPE_p_jli__CollisionResponseBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CollisionResponseBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::CollisionResponseBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponseBuilder *arg1 = (jli::CollisionResponseBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CollisionResponseBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponseBuilder::getObjectType",1,"jli::CollisionResponseBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponseBuilder,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_getObjectType",1,SWIGTYPE_p_jli__CollisionResponseBuilder);
  }
  
  result = (u32)((jli::CollisionResponseBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponseBuilder *arg1 = (jli::CollisionResponseBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::CollisionResponseBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponseBuilder::getClassName",1,"jli::CollisionResponseBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponseBuilder,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_getClassName",1,SWIGTYPE_p_jli__CollisionResponseBuilder);
  }
  
  result = (char *)((jli::CollisionResponseBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CollisionResponseBuilder *arg1 = (jli::CollisionResponseBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CollisionResponseBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CollisionResponseBuilder::getType",1,"jli::CollisionResponseBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CollisionResponseBuilder,0))){
    SWIG_fail_ptr("CollisionResponseBuilder_getType",1,SWIGTYPE_p_jli__CollisionResponseBuilder);
  }
  
  result = (u32)((jli::CollisionResponseBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_CollisionResponseBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionResponseBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_CollisionResponseBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_CollisionResponseBuilder_serialize},
    { "getObjectType", _wrap_CollisionResponseBuilder_getObjectType},
    { "getClassName", _wrap_CollisionResponseBuilder_getClassName},
    { "getType", _wrap_CollisionResponseBuilder_getType},
    {0,0}
};
static swig_lua_method swig_CollisionResponseBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionResponseBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionResponseBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionResponseBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionResponseBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionResponseBuilder_Sf_SwigStatic = {
    "CollisionResponseBuilder",
    swig_CollisionResponseBuilder_Sf_SwigStatic_methods,
    swig_CollisionResponseBuilder_Sf_SwigStatic_attributes,
    swig_CollisionResponseBuilder_Sf_SwigStatic_constants,
    swig_CollisionResponseBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionResponseBuilder_bases[] = {0};
static const char *swig_CollisionResponseBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionResponseBuilder = { "CollisionResponseBuilder", "CollisionResponseBuilder", &SWIGTYPE_p_jli__CollisionResponseBuilder,0,0, swig_CollisionResponseBuilder_methods, swig_CollisionResponseBuilder_attributes, &swig_CollisionResponseBuilder_Sf_SwigStatic, swig_CollisionResponseBuilder_meta, swig_CollisionResponseBuilder_bases, swig_CollisionResponseBuilder_base_names };

static int _wrap_new_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::Texture",0,0)
  result = (jli::Texture *)new jli::Texture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Texture *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::Texture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Texture::Texture",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Texture *)new jli::Texture((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = 0 ;
  jli::Texture *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::Texture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Texture::Texture",1,"jli::Texture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_jli__Texture);
  }
  
  result = (jli::Texture *)new jli::Texture((jli::Texture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Texture__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Texture::Texture()\n"
    "    jli::Texture::Texture(jli::AbstractBuilder const &)\n"
    "    jli::Texture::Texture(jli::Texture const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator new",1,"jli::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Texture::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_new",1,SWIGTYPE_p_jli__Texture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Texture::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator delete",1,"jli::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Texture::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_delete",1,SWIGTYPE_p_jli__Texture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Texture_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator new",1,"jli::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Texture::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Texture::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_new",1,SWIGTYPE_p_jli__Texture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Texture_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Texture_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Texture_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Texture::operator new(size_t)\n"
    "    jli::Texture::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Texture::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator delete",1,"jli::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Texture::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Texture::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_delete",1,SWIGTYPE_p_jli__Texture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Texture_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Texture_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Texture_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Texture_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Texture::operator delete(void *)\n"
    "    jli::Texture::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator new[]",1,"jli::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Texture::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_new_array",1,SWIGTYPE_p_jli__Texture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Texture::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator delete[]",1,"jli::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Texture::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_delete_array",1,SWIGTYPE_p_jli__Texture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Texture_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator new[]",1,"jli::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Texture::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Texture::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_new_array",1,SWIGTYPE_p_jli__Texture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Texture_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Texture_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Texture_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Texture::operator new[](size_t)\n"
    "    jli::Texture::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Texture::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::operator delete[]",1,"jli::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Texture::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Texture::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_operator_delete_array",1,SWIGTYPE_p_jli__Texture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Texture_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Texture_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Texture_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Texture_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Texture::operator delete[](void *)\n"
    "    jli::Texture::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Texture::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::calculateSerializeBufferSize",1,"jli::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Texture);
  }
  
  result = (s32)((jli::Texture const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Texture::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::serialize",1,"jli::Texture const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Texture::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Texture::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_serialize",1,SWIGTYPE_p_jli__Texture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Texture_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Texture_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Texture const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Texture::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::getClassName",1,"jli::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_getClassName",1,SWIGTYPE_p_jli__Texture);
  }
  
  result = (char *)((jli::Texture const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Texture *arg1 = (jli::Texture *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Texture::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Texture::getType",1,"jli::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Texture,0))){
    SWIG_fail_ptr("Texture_getType",1,SWIGTYPE_p_jli__Texture);
  }
  
  result = (u32)((jli::Texture const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Texture(void *obj) {
jli::Texture *arg1 = (jli::Texture *) obj;
delete arg1;
}
static int _proxy__wrap_new_Texture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Texture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Texture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Texture_methods[]= {
    { "operator_new", _wrap_Texture_operator_new},
    { "operator_delete", _wrap_Texture_operator_delete},
    { "operator_new_array", _wrap_Texture_operator_new_array},
    { "operator_delete_array", _wrap_Texture_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Texture_calculateSerializeBufferSize},
    { "serialize", _wrap_Texture_serialize},
    { "getClassName", _wrap_Texture_getClassName},
    { "getType", _wrap_Texture_getType},
    {0,0}
};
static swig_lua_method swig_Texture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Texture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Texture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Texture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Texture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Texture_Sf_SwigStatic = {
    "Texture",
    swig_Texture_Sf_SwigStatic_methods,
    swig_Texture_Sf_SwigStatic_attributes,
    swig_Texture_Sf_SwigStatic_constants,
    swig_Texture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Texture_bases[] = {0};
static const char *swig_Texture_base_names[] = {0};
static swig_lua_class _wrap_class_Texture = { "Texture", "Texture", &SWIGTYPE_p_jli__Texture,_proxy__wrap_new_Texture, swig_delete_Texture, swig_Texture_methods, swig_Texture_attributes, &swig_Texture_Sf_SwigStatic, swig_Texture_meta, swig_Texture_bases, swig_Texture_base_names };

static int _wrap_new_CubicTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::CubicTexture",0,0)
  result = (jli::CubicTexture *)new jli::CubicTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CubicTexture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CubicTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::CubicTexture *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::CubicTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::CubicTexture::CubicTexture",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_CubicTexture",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::CubicTexture *)new jli::CubicTexture((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CubicTexture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CubicTexture__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = 0 ;
  jli::CubicTexture *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::CubicTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::CubicTexture::CubicTexture",1,"jli::CubicTexture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("new_CubicTexture",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  result = (jli::CubicTexture *)new jli::CubicTexture((jli::CubicTexture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__CubicTexture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CubicTexture(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CubicTexture__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CubicTexture__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CubicTexture__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CubicTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CubicTexture::CubicTexture()\n"
    "    jli::CubicTexture::CubicTexture(jli::AbstractBuilder const &)\n"
    "    jli::CubicTexture::CubicTexture(jli::CubicTexture const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CubicTexture_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator new",1,"jli::CubicTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CubicTexture::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_new",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator delete",1,"jli::CubicTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTexture::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_delete",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTexture_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator new",1,"jli::CubicTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CubicTexture::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTexture::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_new",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CubicTexture_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CubicTexture_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CubicTexture_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CubicTexture_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CubicTexture::operator new(size_t)\n"
    "    jli::CubicTexture::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CubicTexture_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator delete",1,"jli::CubicTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTexture::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTexture::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_delete",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTexture_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CubicTexture_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CubicTexture_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CubicTexture_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CubicTexture_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CubicTexture::operator delete(void *)\n"
    "    jli::CubicTexture::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CubicTexture_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator new[]",1,"jli::CubicTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CubicTexture::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_new_array",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator delete[]",1,"jli::CubicTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTexture::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_delete_array",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTexture_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator new[]",1,"jli::CubicTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::CubicTexture::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTexture::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_new_array",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CubicTexture_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CubicTexture_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CubicTexture_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CubicTexture_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CubicTexture::operator new[](size_t)\n"
    "    jli::CubicTexture::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CubicTexture_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::operator delete[]",1,"jli::CubicTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTexture::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTexture::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_operator_delete_array",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTexture_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"CubicTexture_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CubicTexture_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__CubicTexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CubicTexture_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CubicTexture_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::CubicTexture::operator delete[](void *)\n"
    "    jli::CubicTexture::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_CubicTexture_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::CubicTexture::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::calculateSerializeBufferSize",1,"jli::CubicTexture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  result = (s32)((jli::CubicTexture const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::serialize",1,"jli::CubicTexture const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTexture::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTexture::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_serialize",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTexture_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("CubicTexture_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::CubicTexture const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTexture::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::getClassName",1,"jli::CubicTexture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_getClassName",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  result = (char *)((jli::CubicTexture const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTexture_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTexture *arg1 = (jli::CubicTexture *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CubicTexture::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTexture::getType",1,"jli::CubicTexture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTexture,0))){
    SWIG_fail_ptr("CubicTexture_getType",1,SWIGTYPE_p_jli__CubicTexture);
  }
  
  result = (u32)((jli::CubicTexture const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CubicTexture(void *obj) {
jli::CubicTexture *arg1 = (jli::CubicTexture *) obj;
delete arg1;
}
static int _proxy__wrap_new_CubicTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CubicTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CubicTexture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CubicTexture_methods[]= {
    { "operator_new", _wrap_CubicTexture_operator_new},
    { "operator_delete", _wrap_CubicTexture_operator_delete},
    { "operator_new_array", _wrap_CubicTexture_operator_new_array},
    { "operator_delete_array", _wrap_CubicTexture_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_CubicTexture_calculateSerializeBufferSize},
    { "serialize", _wrap_CubicTexture_serialize},
    { "getClassName", _wrap_CubicTexture_getClassName},
    { "getType", _wrap_CubicTexture_getType},
    {0,0}
};
static swig_lua_method swig_CubicTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CubicTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CubicTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CubicTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CubicTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CubicTexture_Sf_SwigStatic = {
    "CubicTexture",
    swig_CubicTexture_Sf_SwigStatic_methods,
    swig_CubicTexture_Sf_SwigStatic_attributes,
    swig_CubicTexture_Sf_SwigStatic_constants,
    swig_CubicTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CubicTexture_bases[] = {0,0};
static const char *swig_CubicTexture_base_names[] = {"jli::Texture *",0};
static swig_lua_class _wrap_class_CubicTexture = { "CubicTexture", "CubicTexture", &SWIGTYPE_p_jli__CubicTexture,_proxy__wrap_new_CubicTexture, swig_delete_CubicTexture, swig_CubicTexture_methods, swig_CubicTexture_attributes, &swig_CubicTexture_Sf_SwigStatic, swig_CubicTexture_meta, swig_CubicTexture_bases, swig_CubicTexture_base_names };

static int _wrap_CubicTextureBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTextureBuilder *arg1 = (jli::CubicTextureBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::CubicTextureBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTextureBuilder::calculateSerializeBufferSize",1,"jli::CubicTextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTextureBuilder,0))){
    SWIG_fail_ptr("CubicTextureBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__CubicTextureBuilder);
  }
  
  result = (s32)((jli::CubicTextureBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTextureBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTextureBuilder *arg1 = (jli::CubicTextureBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::CubicTextureBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTextureBuilder::serialize",1,"jli::CubicTextureBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::CubicTextureBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::CubicTextureBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTextureBuilder,0))){
    SWIG_fail_ptr("CubicTextureBuilder_serialize",1,SWIGTYPE_p_jli__CubicTextureBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CubicTextureBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("CubicTextureBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::CubicTextureBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTextureBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTextureBuilder *arg1 = (jli::CubicTextureBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CubicTextureBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTextureBuilder::getObjectType",1,"jli::CubicTextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTextureBuilder,0))){
    SWIG_fail_ptr("CubicTextureBuilder_getObjectType",1,SWIGTYPE_p_jli__CubicTextureBuilder);
  }
  
  result = (u32)((jli::CubicTextureBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTextureBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTextureBuilder *arg1 = (jli::CubicTextureBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::CubicTextureBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTextureBuilder::getClassName",1,"jli::CubicTextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTextureBuilder,0))){
    SWIG_fail_ptr("CubicTextureBuilder_getClassName",1,SWIGTYPE_p_jli__CubicTextureBuilder);
  }
  
  result = (char *)((jli::CubicTextureBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicTextureBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::CubicTextureBuilder *arg1 = (jli::CubicTextureBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::CubicTextureBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::CubicTextureBuilder::getType",1,"jli::CubicTextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__CubicTextureBuilder,0))){
    SWIG_fail_ptr("CubicTextureBuilder_getType",1,SWIGTYPE_p_jli__CubicTextureBuilder);
  }
  
  result = (u32)((jli::CubicTextureBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_CubicTextureBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CubicTextureBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_CubicTextureBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_CubicTextureBuilder_serialize},
    { "getObjectType", _wrap_CubicTextureBuilder_getObjectType},
    { "getClassName", _wrap_CubicTextureBuilder_getClassName},
    { "getType", _wrap_CubicTextureBuilder_getType},
    {0,0}
};
static swig_lua_method swig_CubicTextureBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CubicTextureBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CubicTextureBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CubicTextureBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CubicTextureBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CubicTextureBuilder_Sf_SwigStatic = {
    "CubicTextureBuilder",
    swig_CubicTextureBuilder_Sf_SwigStatic_methods,
    swig_CubicTextureBuilder_Sf_SwigStatic_attributes,
    swig_CubicTextureBuilder_Sf_SwigStatic_constants,
    swig_CubicTextureBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CubicTextureBuilder_bases[] = {0};
static const char *swig_CubicTextureBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_CubicTextureBuilder = { "CubicTextureBuilder", "CubicTextureBuilder", &SWIGTYPE_p_jli__CubicTextureBuilder,0,0, swig_CubicTextureBuilder_methods, swig_CubicTextureBuilder_attributes, &swig_CubicTextureBuilder_Sf_SwigStatic, swig_CubicTextureBuilder_meta, swig_CubicTextureBuilder_bases, swig_CubicTextureBuilder_base_names };

static int _wrap_new_DynamicPhysicsBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::DynamicPhysicsBody",0,0)
  result = (jli::DynamicPhysicsBody *)new jli::DynamicPhysicsBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__DynamicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicPhysicsBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::DynamicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::DynamicPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::DynamicPhysicsBody",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_DynamicPhysicsBody",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::DynamicPhysicsBody *)new jli::DynamicPhysicsBody((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__DynamicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicPhysicsBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = 0 ;
  jli::DynamicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::DynamicPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::DynamicPhysicsBody",1,"jli::DynamicPhysicsBody const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("new_DynamicPhysicsBody",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  result = (jli::DynamicPhysicsBody *)new jli::DynamicPhysicsBody((jli::DynamicPhysicsBody const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__DynamicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DynamicPhysicsBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DynamicPhysicsBody__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DynamicPhysicsBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DynamicPhysicsBody__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DynamicPhysicsBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::DynamicPhysicsBody::DynamicPhysicsBody()\n"
    "    jli::DynamicPhysicsBody::DynamicPhysicsBody(jli::AbstractBuilder const &)\n"
    "    jli::DynamicPhysicsBody::DynamicPhysicsBody(jli::DynamicPhysicsBody const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicPhysicsBody_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new",1,"jli::DynamicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_new",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete",1,"jli::DynamicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new",1,"jli::DynamicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_new",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DynamicPhysicsBody_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DynamicPhysicsBody_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DynamicPhysicsBody_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DynamicPhysicsBody_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::DynamicPhysicsBody::operator new(size_t)\n"
    "    jli::DynamicPhysicsBody::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicPhysicsBody_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete",1,"jli::DynamicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBody_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DynamicPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DynamicPhysicsBody_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DynamicPhysicsBody_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DynamicPhysicsBody_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::DynamicPhysicsBody::operator delete(void *)\n"
    "    jli::DynamicPhysicsBody::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicPhysicsBody_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new[]",1,"jli::DynamicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete[]",1,"jli::DynamicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new[]",1,"jli::DynamicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DynamicPhysicsBody_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DynamicPhysicsBody_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DynamicPhysicsBody_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DynamicPhysicsBody_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::DynamicPhysicsBody::operator new[](size_t)\n"
    "    jli::DynamicPhysicsBody::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicPhysicsBody_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete[]",1,"jli::DynamicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBody::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBody_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DynamicPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DynamicPhysicsBody_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__DynamicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DynamicPhysicsBody_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DynamicPhysicsBody_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::DynamicPhysicsBody::operator delete[](void *)\n"
    "    jli::DynamicPhysicsBody::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_DynamicPhysicsBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::calculateSerializeBufferSize",1,"jli::DynamicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  result = (s32)((jli::DynamicPhysicsBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::serialize",1,"jli::DynamicPhysicsBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_serialize",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::DynamicPhysicsBody const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::getClassName",1,"jli::DynamicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_getClassName",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  result = (char *)((jli::DynamicPhysicsBody const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBody_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::DynamicPhysicsBody::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBody::getType",1,"jli::DynamicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBody,0))){
    SWIG_fail_ptr("DynamicPhysicsBody_getType",1,SWIGTYPE_p_jli__DynamicPhysicsBody);
  }
  
  result = (u32)((jli::DynamicPhysicsBody const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DynamicPhysicsBody(void *obj) {
jli::DynamicPhysicsBody *arg1 = (jli::DynamicPhysicsBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_DynamicPhysicsBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DynamicPhysicsBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DynamicPhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DynamicPhysicsBody_methods[]= {
    { "operator_new", _wrap_DynamicPhysicsBody_operator_new},
    { "operator_delete", _wrap_DynamicPhysicsBody_operator_delete},
    { "operator_new_array", _wrap_DynamicPhysicsBody_operator_new_array},
    { "operator_delete_array", _wrap_DynamicPhysicsBody_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_DynamicPhysicsBody_calculateSerializeBufferSize},
    { "serialize", _wrap_DynamicPhysicsBody_serialize},
    { "getClassName", _wrap_DynamicPhysicsBody_getClassName},
    { "getType", _wrap_DynamicPhysicsBody_getType},
    {0,0}
};
static swig_lua_method swig_DynamicPhysicsBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DynamicPhysicsBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DynamicPhysicsBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DynamicPhysicsBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DynamicPhysicsBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DynamicPhysicsBody_Sf_SwigStatic = {
    "DynamicPhysicsBody",
    swig_DynamicPhysicsBody_Sf_SwigStatic_methods,
    swig_DynamicPhysicsBody_Sf_SwigStatic_attributes,
    swig_DynamicPhysicsBody_Sf_SwigStatic_constants,
    swig_DynamicPhysicsBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DynamicPhysicsBody_bases[] = {0};
static const char *swig_DynamicPhysicsBody_base_names[] = {0};
static swig_lua_class _wrap_class_DynamicPhysicsBody = { "DynamicPhysicsBody", "DynamicPhysicsBody", &SWIGTYPE_p_jli__DynamicPhysicsBody,_proxy__wrap_new_DynamicPhysicsBody, swig_delete_DynamicPhysicsBody, swig_DynamicPhysicsBody_methods, swig_DynamicPhysicsBody_attributes, &swig_DynamicPhysicsBody_Sf_SwigStatic, swig_DynamicPhysicsBody_meta, swig_DynamicPhysicsBody_bases, swig_DynamicPhysicsBody_base_names };

static int _wrap_DynamicPhysicsBodyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBodyBuilder *arg1 = (jli::DynamicPhysicsBodyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::DynamicPhysicsBodyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::calculateSerializeBufferSize",1,"jli::DynamicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder);
  }
  
  result = (s32)((jli::DynamicPhysicsBodyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBodyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBodyBuilder *arg1 = (jli::DynamicPhysicsBodyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBodyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::serialize",1,"jli::DynamicPhysicsBodyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_serialize",1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"DynamicPhysicsBodyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::DynamicPhysicsBodyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBodyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBodyBuilder *arg1 = (jli::DynamicPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::DynamicPhysicsBodyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::getObjectType",1,"jli::DynamicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_getObjectType",1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::DynamicPhysicsBodyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBodyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBodyBuilder *arg1 = (jli::DynamicPhysicsBodyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::DynamicPhysicsBodyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::getClassName",1,"jli::DynamicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_getClassName",1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder);
  }
  
  result = (char *)((jli::DynamicPhysicsBodyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicPhysicsBodyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::DynamicPhysicsBodyBuilder *arg1 = (jli::DynamicPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::DynamicPhysicsBodyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::DynamicPhysicsBodyBuilder::getType",1,"jli::DynamicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("DynamicPhysicsBodyBuilder_getType",1,SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::DynamicPhysicsBodyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_DynamicPhysicsBodyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DynamicPhysicsBodyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_DynamicPhysicsBodyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_DynamicPhysicsBodyBuilder_serialize},
    { "getObjectType", _wrap_DynamicPhysicsBodyBuilder_getObjectType},
    { "getClassName", _wrap_DynamicPhysicsBodyBuilder_getClassName},
    { "getType", _wrap_DynamicPhysicsBodyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_DynamicPhysicsBodyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic = {
    "DynamicPhysicsBodyBuilder",
    swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_methods,
    swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_attributes,
    swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_constants,
    swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DynamicPhysicsBodyBuilder_bases[] = {0};
static const char *swig_DynamicPhysicsBodyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_DynamicPhysicsBodyBuilder = { "DynamicPhysicsBodyBuilder", "DynamicPhysicsBodyBuilder", &SWIGTYPE_p_jli__DynamicPhysicsBodyBuilder,0,0, swig_DynamicPhysicsBodyBuilder_methods, swig_DynamicPhysicsBodyBuilder_attributes, &swig_DynamicPhysicsBodyBuilder_Sf_SwigStatic, swig_DynamicPhysicsBodyBuilder_meta, swig_DynamicPhysicsBodyBuilder_bases, swig_DynamicPhysicsBodyBuilder_base_names };

static int _wrap_new_Geometry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::Geometry",0,0)
  result = (jli::Geometry *)new jli::Geometry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Geometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Geometry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Geometry *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::Geometry",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Geometry::Geometry",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Geometry",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Geometry *)new jli::Geometry((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Geometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Geometry__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = 0 ;
  jli::Geometry *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::Geometry",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Geometry::Geometry",1,"jli::Geometry const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("new_Geometry",1,SWIGTYPE_p_jli__Geometry);
  }
  
  result = (jli::Geometry *)new jli::Geometry((jli::Geometry const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Geometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Geometry(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Geometry__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Geometry__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Geometry__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Geometry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Geometry::Geometry()\n"
    "    jli::Geometry::Geometry(jli::AbstractBuilder const &)\n"
    "    jli::Geometry::Geometry(jli::Geometry const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator new",1,"jli::Geometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Geometry::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_new",1,SWIGTYPE_p_jli__Geometry);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator delete",1,"jli::Geometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Geometry::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_delete",1,SWIGTYPE_p_jli__Geometry);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Geometry_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator new",1,"jli::Geometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Geometry::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Geometry::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_new",1,SWIGTYPE_p_jli__Geometry);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Geometry_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Geometry_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Geometry_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Geometry_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Geometry::operator new(size_t)\n"
    "    jli::Geometry::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator delete",1,"jli::Geometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Geometry::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Geometry::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_delete",1,SWIGTYPE_p_jli__Geometry);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Geometry_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Geometry_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Geometry_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Geometry_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Geometry_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Geometry::operator delete(void *)\n"
    "    jli::Geometry::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator new[]",1,"jli::Geometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Geometry::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_new_array",1,SWIGTYPE_p_jli__Geometry);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator delete[]",1,"jli::Geometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Geometry::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_delete_array",1,SWIGTYPE_p_jli__Geometry);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Geometry_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator new[]",1,"jli::Geometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Geometry::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Geometry::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_new_array",1,SWIGTYPE_p_jli__Geometry);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Geometry_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Geometry_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Geometry_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Geometry_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Geometry::operator new[](size_t)\n"
    "    jli::Geometry::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Geometry::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::operator delete[]",1,"jli::Geometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Geometry::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Geometry::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_operator_delete_array",1,SWIGTYPE_p_jli__Geometry);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Geometry_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Geometry_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Geometry_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Geometry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Geometry_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Geometry_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Geometry::operator delete[](void *)\n"
    "    jli::Geometry::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Geometry::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::calculateSerializeBufferSize",1,"jli::Geometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Geometry);
  }
  
  result = (s32)((jli::Geometry const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Geometry::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::serialize",1,"jli::Geometry const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Geometry::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Geometry::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_serialize",1,SWIGTYPE_p_jli__Geometry);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Geometry_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Geometry_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Geometry const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Geometry::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::getClassName",1,"jli::Geometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_getClassName",1,SWIGTYPE_p_jli__Geometry);
  }
  
  result = (char *)((jli::Geometry const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Geometry *arg1 = (jli::Geometry *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Geometry::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Geometry::getType",1,"jli::Geometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Geometry,0))){
    SWIG_fail_ptr("Geometry_getType",1,SWIGTYPE_p_jli__Geometry);
  }
  
  result = (u32)((jli::Geometry const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Geometry(void *obj) {
jli::Geometry *arg1 = (jli::Geometry *) obj;
delete arg1;
}
static int _proxy__wrap_new_Geometry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Geometry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Geometry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Geometry_methods[]= {
    { "operator_new", _wrap_Geometry_operator_new},
    { "operator_delete", _wrap_Geometry_operator_delete},
    { "operator_new_array", _wrap_Geometry_operator_new_array},
    { "operator_delete_array", _wrap_Geometry_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Geometry_calculateSerializeBufferSize},
    { "serialize", _wrap_Geometry_serialize},
    { "getClassName", _wrap_Geometry_getClassName},
    { "getType", _wrap_Geometry_getType},
    {0,0}
};
static swig_lua_method swig_Geometry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Geometry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Geometry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Geometry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Geometry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Geometry_Sf_SwigStatic = {
    "Geometry",
    swig_Geometry_Sf_SwigStatic_methods,
    swig_Geometry_Sf_SwigStatic_attributes,
    swig_Geometry_Sf_SwigStatic_constants,
    swig_Geometry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Geometry_bases[] = {0};
static const char *swig_Geometry_base_names[] = {0};
static swig_lua_class _wrap_class_Geometry = { "Geometry", "Geometry", &SWIGTYPE_p_jli__Geometry,_proxy__wrap_new_Geometry, swig_delete_Geometry, swig_Geometry_methods, swig_Geometry_attributes, &swig_Geometry_Sf_SwigStatic, swig_Geometry_meta, swig_Geometry_bases, swig_Geometry_base_names };

static int _wrap_GeometryBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GeometryBuilder *arg1 = (jli::GeometryBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::GeometryBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GeometryBuilder::calculateSerializeBufferSize",1,"jli::GeometryBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GeometryBuilder,0))){
    SWIG_fail_ptr("GeometryBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__GeometryBuilder);
  }
  
  result = (s32)((jli::GeometryBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GeometryBuilder *arg1 = (jli::GeometryBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::GeometryBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GeometryBuilder::serialize",1,"jli::GeometryBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GeometryBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GeometryBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GeometryBuilder,0))){
    SWIG_fail_ptr("GeometryBuilder_serialize",1,SWIGTYPE_p_jli__GeometryBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GeometryBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("GeometryBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::GeometryBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::GeometryBuilder *arg1 = (jli::GeometryBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::GeometryBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GeometryBuilder::getObjectType",1,"jli::GeometryBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GeometryBuilder,0))){
    SWIG_fail_ptr("GeometryBuilder_getObjectType",1,SWIGTYPE_p_jli__GeometryBuilder);
  }
  
  result = (u32)((jli::GeometryBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::GeometryBuilder *arg1 = (jli::GeometryBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::GeometryBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GeometryBuilder::getClassName",1,"jli::GeometryBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GeometryBuilder,0))){
    SWIG_fail_ptr("GeometryBuilder_getClassName",1,SWIGTYPE_p_jli__GeometryBuilder);
  }
  
  result = (char *)((jli::GeometryBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::GeometryBuilder *arg1 = (jli::GeometryBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::GeometryBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GeometryBuilder::getType",1,"jli::GeometryBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GeometryBuilder,0))){
    SWIG_fail_ptr("GeometryBuilder_getType",1,SWIGTYPE_p_jli__GeometryBuilder);
  }
  
  result = (u32)((jli::GeometryBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_GeometryBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GeometryBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_GeometryBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_GeometryBuilder_serialize},
    { "getObjectType", _wrap_GeometryBuilder_getObjectType},
    { "getClassName", _wrap_GeometryBuilder_getClassName},
    { "getType", _wrap_GeometryBuilder_getType},
    {0,0}
};
static swig_lua_method swig_GeometryBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GeometryBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GeometryBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GeometryBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GeometryBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GeometryBuilder_Sf_SwigStatic = {
    "GeometryBuilder",
    swig_GeometryBuilder_Sf_SwigStatic_methods,
    swig_GeometryBuilder_Sf_SwigStatic_attributes,
    swig_GeometryBuilder_Sf_SwigStatic_constants,
    swig_GeometryBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GeometryBuilder_bases[] = {0};
static const char *swig_GeometryBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_GeometryBuilder = { "GeometryBuilder", "GeometryBuilder", &SWIGTYPE_p_jli__GeometryBuilder,0,0, swig_GeometryBuilder_methods, swig_GeometryBuilder_attributes, &swig_GeometryBuilder_Sf_SwigStatic, swig_GeometryBuilder_meta, swig_GeometryBuilder_bases, swig_GeometryBuilder_base_names };

static int _wrap_new_GhostPhysicsBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::GhostPhysicsBody",0,0)
  result = (jli::GhostPhysicsBody *)new jli::GhostPhysicsBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__GhostPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostPhysicsBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::GhostPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::GhostPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::GhostPhysicsBody",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_GhostPhysicsBody",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::GhostPhysicsBody *)new jli::GhostPhysicsBody((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__GhostPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostPhysicsBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = 0 ;
  jli::GhostPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::GhostPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::GhostPhysicsBody",1,"jli::GhostPhysicsBody const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("new_GhostPhysicsBody",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  result = (jli::GhostPhysicsBody *)new jli::GhostPhysicsBody((jli::GhostPhysicsBody const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__GhostPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostPhysicsBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GhostPhysicsBody__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GhostPhysicsBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GhostPhysicsBody__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GhostPhysicsBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::GhostPhysicsBody::GhostPhysicsBody()\n"
    "    jli::GhostPhysicsBody::GhostPhysicsBody(jli::AbstractBuilder const &)\n"
    "    jli::GhostPhysicsBody::GhostPhysicsBody(jli::GhostPhysicsBody const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostPhysicsBody_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new",1,"jli::GhostPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_new",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete",1,"jli::GhostPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new",1,"jli::GhostPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_new",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"GhostPhysicsBody_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GhostPhysicsBody_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GhostPhysicsBody_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostPhysicsBody_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::GhostPhysicsBody::operator new(size_t)\n"
    "    jli::GhostPhysicsBody::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostPhysicsBody_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete",1,"jli::GhostPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBody_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"GhostPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GhostPhysicsBody_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GhostPhysicsBody_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostPhysicsBody_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::GhostPhysicsBody::operator delete(void *)\n"
    "    jli::GhostPhysicsBody::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostPhysicsBody_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new[]",1,"jli::GhostPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete[]",1,"jli::GhostPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new[]",1,"jli::GhostPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBody::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"GhostPhysicsBody_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GhostPhysicsBody_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GhostPhysicsBody_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostPhysicsBody_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::GhostPhysicsBody::operator new[](size_t)\n"
    "    jli::GhostPhysicsBody::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostPhysicsBody_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete[]",1,"jli::GhostPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBody::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBody_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"GhostPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GhostPhysicsBody_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__GhostPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GhostPhysicsBody_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostPhysicsBody_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::GhostPhysicsBody::operator delete[](void *)\n"
    "    jli::GhostPhysicsBody::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostPhysicsBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::calculateSerializeBufferSize",1,"jli::GhostPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  result = (s32)((jli::GhostPhysicsBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::serialize",1,"jli::GhostPhysicsBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_serialize",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("GhostPhysicsBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::GhostPhysicsBody const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::getClassName",1,"jli::GhostPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_getClassName",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  result = (char *)((jli::GhostPhysicsBody const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBody_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::GhostPhysicsBody::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBody::getType",1,"jli::GhostPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBody,0))){
    SWIG_fail_ptr("GhostPhysicsBody_getType",1,SWIGTYPE_p_jli__GhostPhysicsBody);
  }
  
  result = (u32)((jli::GhostPhysicsBody const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GhostPhysicsBody(void *obj) {
jli::GhostPhysicsBody *arg1 = (jli::GhostPhysicsBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_GhostPhysicsBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GhostPhysicsBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GhostPhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GhostPhysicsBody_methods[]= {
    { "operator_new", _wrap_GhostPhysicsBody_operator_new},
    { "operator_delete", _wrap_GhostPhysicsBody_operator_delete},
    { "operator_new_array", _wrap_GhostPhysicsBody_operator_new_array},
    { "operator_delete_array", _wrap_GhostPhysicsBody_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_GhostPhysicsBody_calculateSerializeBufferSize},
    { "serialize", _wrap_GhostPhysicsBody_serialize},
    { "getClassName", _wrap_GhostPhysicsBody_getClassName},
    { "getType", _wrap_GhostPhysicsBody_getType},
    {0,0}
};
static swig_lua_method swig_GhostPhysicsBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GhostPhysicsBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GhostPhysicsBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GhostPhysicsBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GhostPhysicsBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GhostPhysicsBody_Sf_SwigStatic = {
    "GhostPhysicsBody",
    swig_GhostPhysicsBody_Sf_SwigStatic_methods,
    swig_GhostPhysicsBody_Sf_SwigStatic_attributes,
    swig_GhostPhysicsBody_Sf_SwigStatic_constants,
    swig_GhostPhysicsBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GhostPhysicsBody_bases[] = {0};
static const char *swig_GhostPhysicsBody_base_names[] = {0};
static swig_lua_class _wrap_class_GhostPhysicsBody = { "GhostPhysicsBody", "GhostPhysicsBody", &SWIGTYPE_p_jli__GhostPhysicsBody,_proxy__wrap_new_GhostPhysicsBody, swig_delete_GhostPhysicsBody, swig_GhostPhysicsBody_methods, swig_GhostPhysicsBody_attributes, &swig_GhostPhysicsBody_Sf_SwigStatic, swig_GhostPhysicsBody_meta, swig_GhostPhysicsBody_bases, swig_GhostPhysicsBody_base_names };

static int _wrap_GhostPhysicsBodyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBodyBuilder *arg1 = (jli::GhostPhysicsBodyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::GhostPhysicsBodyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::calculateSerializeBufferSize",1,"jli::GhostPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder);
  }
  
  result = (s32)((jli::GhostPhysicsBodyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBodyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBodyBuilder *arg1 = (jli::GhostPhysicsBodyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBodyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::serialize",1,"jli::GhostPhysicsBodyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_serialize",1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GhostPhysicsBodyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::GhostPhysicsBodyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBodyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBodyBuilder *arg1 = (jli::GhostPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::GhostPhysicsBodyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::getObjectType",1,"jli::GhostPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_getObjectType",1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::GhostPhysicsBodyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBodyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBodyBuilder *arg1 = (jli::GhostPhysicsBodyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::GhostPhysicsBodyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::getClassName",1,"jli::GhostPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_getClassName",1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder);
  }
  
  result = (char *)((jli::GhostPhysicsBodyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostPhysicsBodyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::GhostPhysicsBodyBuilder *arg1 = (jli::GhostPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::GhostPhysicsBodyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::GhostPhysicsBodyBuilder::getType",1,"jli::GhostPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("GhostPhysicsBodyBuilder_getType",1,SWIGTYPE_p_jli__GhostPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::GhostPhysicsBodyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_GhostPhysicsBodyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GhostPhysicsBodyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_GhostPhysicsBodyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_GhostPhysicsBodyBuilder_serialize},
    { "getObjectType", _wrap_GhostPhysicsBodyBuilder_getObjectType},
    { "getClassName", _wrap_GhostPhysicsBodyBuilder_getClassName},
    { "getType", _wrap_GhostPhysicsBodyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_GhostPhysicsBodyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GhostPhysicsBodyBuilder_Sf_SwigStatic = {
    "GhostPhysicsBodyBuilder",
    swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_methods,
    swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_attributes,
    swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_constants,
    swig_GhostPhysicsBodyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GhostPhysicsBodyBuilder_bases[] = {0};
static const char *swig_GhostPhysicsBodyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_GhostPhysicsBodyBuilder = { "GhostPhysicsBodyBuilder", "GhostPhysicsBodyBuilder", &SWIGTYPE_p_jli__GhostPhysicsBodyBuilder,0,0, swig_GhostPhysicsBodyBuilder_methods, swig_GhostPhysicsBodyBuilder_attributes, &swig_GhostPhysicsBodyBuilder_Sf_SwigStatic, swig_GhostPhysicsBodyBuilder_meta, swig_GhostPhysicsBodyBuilder_bases, swig_GhostPhysicsBodyBuilder_base_names };

static int _wrap_new_KinematicPhysicsBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::KinematicPhysicsBody",0,0)
  result = (jli::KinematicPhysicsBody *)new jli::KinematicPhysicsBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__KinematicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KinematicPhysicsBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::KinematicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::KinematicPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::KinematicPhysicsBody",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_KinematicPhysicsBody",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::KinematicPhysicsBody *)new jli::KinematicPhysicsBody((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__KinematicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KinematicPhysicsBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = 0 ;
  jli::KinematicPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::KinematicPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::KinematicPhysicsBody",1,"jli::KinematicPhysicsBody const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("new_KinematicPhysicsBody",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  result = (jli::KinematicPhysicsBody *)new jli::KinematicPhysicsBody((jli::KinematicPhysicsBody const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__KinematicPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KinematicPhysicsBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_KinematicPhysicsBody__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_KinematicPhysicsBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_KinematicPhysicsBody__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_KinematicPhysicsBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::KinematicPhysicsBody::KinematicPhysicsBody()\n"
    "    jli::KinematicPhysicsBody::KinematicPhysicsBody(jli::AbstractBuilder const &)\n"
    "    jli::KinematicPhysicsBody::KinematicPhysicsBody(jli::KinematicPhysicsBody const &)\n");
  lua_error(L);return 0;
}


static int _wrap_KinematicPhysicsBody_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new",1,"jli::KinematicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_new",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete",1,"jli::KinematicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new",1,"jli::KinematicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_new",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"KinematicPhysicsBody_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_KinematicPhysicsBody_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KinematicPhysicsBody_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KinematicPhysicsBody_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::KinematicPhysicsBody::operator new(size_t)\n"
    "    jli::KinematicPhysicsBody::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_KinematicPhysicsBody_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete",1,"jli::KinematicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBody_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"KinematicPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_KinematicPhysicsBody_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KinematicPhysicsBody_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KinematicPhysicsBody_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::KinematicPhysicsBody::operator delete(void *)\n"
    "    jli::KinematicPhysicsBody::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_KinematicPhysicsBody_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new[]",1,"jli::KinematicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete[]",1,"jli::KinematicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new[]",1,"jli::KinematicPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"KinematicPhysicsBody_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_KinematicPhysicsBody_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KinematicPhysicsBody_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KinematicPhysicsBody_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::KinematicPhysicsBody::operator new[](size_t)\n"
    "    jli::KinematicPhysicsBody::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_KinematicPhysicsBody_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete[]",1,"jli::KinematicPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBody::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBody_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"KinematicPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_KinematicPhysicsBody_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__KinematicPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KinematicPhysicsBody_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KinematicPhysicsBody_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::KinematicPhysicsBody::operator delete[](void *)\n"
    "    jli::KinematicPhysicsBody::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_KinematicPhysicsBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::calculateSerializeBufferSize",1,"jli::KinematicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  result = (s32)((jli::KinematicPhysicsBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::serialize",1,"jli::KinematicPhysicsBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_serialize",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::KinematicPhysicsBody const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::getClassName",1,"jli::KinematicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_getClassName",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  result = (char *)((jli::KinematicPhysicsBody const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBody_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::KinematicPhysicsBody::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBody::getType",1,"jli::KinematicPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBody,0))){
    SWIG_fail_ptr("KinematicPhysicsBody_getType",1,SWIGTYPE_p_jli__KinematicPhysicsBody);
  }
  
  result = (u32)((jli::KinematicPhysicsBody const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KinematicPhysicsBody(void *obj) {
jli::KinematicPhysicsBody *arg1 = (jli::KinematicPhysicsBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_KinematicPhysicsBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KinematicPhysicsBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KinematicPhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KinematicPhysicsBody_methods[]= {
    { "operator_new", _wrap_KinematicPhysicsBody_operator_new},
    { "operator_delete", _wrap_KinematicPhysicsBody_operator_delete},
    { "operator_new_array", _wrap_KinematicPhysicsBody_operator_new_array},
    { "operator_delete_array", _wrap_KinematicPhysicsBody_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_KinematicPhysicsBody_calculateSerializeBufferSize},
    { "serialize", _wrap_KinematicPhysicsBody_serialize},
    { "getClassName", _wrap_KinematicPhysicsBody_getClassName},
    { "getType", _wrap_KinematicPhysicsBody_getType},
    {0,0}
};
static swig_lua_method swig_KinematicPhysicsBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KinematicPhysicsBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KinematicPhysicsBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KinematicPhysicsBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KinematicPhysicsBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KinematicPhysicsBody_Sf_SwigStatic = {
    "KinematicPhysicsBody",
    swig_KinematicPhysicsBody_Sf_SwigStatic_methods,
    swig_KinematicPhysicsBody_Sf_SwigStatic_attributes,
    swig_KinematicPhysicsBody_Sf_SwigStatic_constants,
    swig_KinematicPhysicsBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KinematicPhysicsBody_bases[] = {0};
static const char *swig_KinematicPhysicsBody_base_names[] = {0};
static swig_lua_class _wrap_class_KinematicPhysicsBody = { "KinematicPhysicsBody", "KinematicPhysicsBody", &SWIGTYPE_p_jli__KinematicPhysicsBody,_proxy__wrap_new_KinematicPhysicsBody, swig_delete_KinematicPhysicsBody, swig_KinematicPhysicsBody_methods, swig_KinematicPhysicsBody_attributes, &swig_KinematicPhysicsBody_Sf_SwigStatic, swig_KinematicPhysicsBody_meta, swig_KinematicPhysicsBody_bases, swig_KinematicPhysicsBody_base_names };

static int _wrap_KinematicPhysicsBodyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBodyBuilder *arg1 = (jli::KinematicPhysicsBodyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::KinematicPhysicsBodyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::calculateSerializeBufferSize",1,"jli::KinematicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder);
  }
  
  result = (s32)((jli::KinematicPhysicsBodyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBodyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBodyBuilder *arg1 = (jli::KinematicPhysicsBodyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBodyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::serialize",1,"jli::KinematicPhysicsBodyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_serialize",1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"KinematicPhysicsBodyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::KinematicPhysicsBodyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBodyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBodyBuilder *arg1 = (jli::KinematicPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::KinematicPhysicsBodyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::getObjectType",1,"jli::KinematicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_getObjectType",1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::KinematicPhysicsBodyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBodyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBodyBuilder *arg1 = (jli::KinematicPhysicsBodyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::KinematicPhysicsBodyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::getClassName",1,"jli::KinematicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_getClassName",1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder);
  }
  
  result = (char *)((jli::KinematicPhysicsBodyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KinematicPhysicsBodyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::KinematicPhysicsBodyBuilder *arg1 = (jli::KinematicPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::KinematicPhysicsBodyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::KinematicPhysicsBodyBuilder::getType",1,"jli::KinematicPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("KinematicPhysicsBodyBuilder_getType",1,SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::KinematicPhysicsBodyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_KinematicPhysicsBodyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KinematicPhysicsBodyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_KinematicPhysicsBodyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_KinematicPhysicsBodyBuilder_serialize},
    { "getObjectType", _wrap_KinematicPhysicsBodyBuilder_getObjectType},
    { "getClassName", _wrap_KinematicPhysicsBodyBuilder_getClassName},
    { "getType", _wrap_KinematicPhysicsBodyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_KinematicPhysicsBodyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic = {
    "KinematicPhysicsBodyBuilder",
    swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_methods,
    swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_attributes,
    swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_constants,
    swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KinematicPhysicsBodyBuilder_bases[] = {0};
static const char *swig_KinematicPhysicsBodyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_KinematicPhysicsBodyBuilder = { "KinematicPhysicsBodyBuilder", "KinematicPhysicsBodyBuilder", &SWIGTYPE_p_jli__KinematicPhysicsBodyBuilder,0,0, swig_KinematicPhysicsBodyBuilder_methods, swig_KinematicPhysicsBodyBuilder_attributes, &swig_KinematicPhysicsBodyBuilder_Sf_SwigStatic, swig_KinematicPhysicsBodyBuilder_meta, swig_KinematicPhysicsBodyBuilder_bases, swig_KinematicPhysicsBodyBuilder_base_names };

static int _wrap_new_Light__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *result = 0 ;
  
  SWIG_check_num_args("jli::Light::Light",0,0)
  result = (jli::Light *)new jli::Light();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Light *result = 0 ;
  
  SWIG_check_num_args("jli::Light::Light",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Light::Light",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Light",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Light *)new jli::Light((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = 0 ;
  jli::Light *result = 0 ;
  
  SWIG_check_num_args("jli::Light::Light",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Light::Light",1,"jli::Light const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("new_Light",1,SWIGTYPE_p_jli__Light);
  }
  
  result = (jli::Light *)new jli::Light((jli::Light const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Light__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Light__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Light__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Light'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Light::Light()\n"
    "    jli::Light::Light(jli::AbstractBuilder const &)\n"
    "    jli::Light::Light(jli::Light const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Light::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator new",1,"jli::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Light::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_new",1,SWIGTYPE_p_jli__Light);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Light::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator delete",1,"jli::Light *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Light::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_delete",1,SWIGTYPE_p_jli__Light);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Light_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Light::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator new",1,"jli::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Light::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Light::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_new",1,SWIGTYPE_p_jli__Light);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Light_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Light_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Light_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Light::operator new(size_t)\n"
    "    jli::Light::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Light::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator delete",1,"jli::Light *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Light::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Light::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_delete",1,SWIGTYPE_p_jli__Light);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Light_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Light_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Light_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Light::operator delete(void *)\n"
    "    jli::Light::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Light::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator new[]",1,"jli::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Light::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_new_array",1,SWIGTYPE_p_jli__Light);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Light::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator delete[]",1,"jli::Light *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Light::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_delete_array",1,SWIGTYPE_p_jli__Light);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Light_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Light::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator new[]",1,"jli::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Light::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Light::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_new_array",1,SWIGTYPE_p_jli__Light);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Light_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Light_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Light_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Light::operator new[](size_t)\n"
    "    jli::Light::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Light::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::operator delete[]",1,"jli::Light *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Light::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Light::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_operator_delete_array",1,SWIGTYPE_p_jli__Light);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Light_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Light_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Light_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Light, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Light_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Light::operator delete[](void *)\n"
    "    jli::Light::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Light_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Light::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::calculateSerializeBufferSize",1,"jli::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Light);
  }
  
  result = (s32)((jli::Light const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Light::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::serialize",1,"jli::Light const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Light::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Light::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_serialize",1,SWIGTYPE_p_jli__Light);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Light_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Light_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Light const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Light::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::getClassName",1,"jli::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_getClassName",1,SWIGTYPE_p_jli__Light);
  }
  
  result = (char *)((jli::Light const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Light *arg1 = (jli::Light *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Light::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Light::getType",1,"jli::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Light,0))){
    SWIG_fail_ptr("Light_getType",1,SWIGTYPE_p_jli__Light);
  }
  
  result = (u32)((jli::Light const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Light(void *obj) {
jli::Light *arg1 = (jli::Light *) obj;
delete arg1;
}
static int _proxy__wrap_new_Light(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Light);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Light_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Light_methods[]= {
    { "operator_new", _wrap_Light_operator_new},
    { "operator_delete", _wrap_Light_operator_delete},
    { "operator_new_array", _wrap_Light_operator_new_array},
    { "operator_delete_array", _wrap_Light_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Light_calculateSerializeBufferSize},
    { "serialize", _wrap_Light_serialize},
    { "getClassName", _wrap_Light_getClassName},
    { "getType", _wrap_Light_getType},
    {0,0}
};
static swig_lua_method swig_Light_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Light_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Light_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Light_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Light_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Light_Sf_SwigStatic = {
    "Light",
    swig_Light_Sf_SwigStatic_methods,
    swig_Light_Sf_SwigStatic_attributes,
    swig_Light_Sf_SwigStatic_constants,
    swig_Light_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Light_bases[] = {0};
static const char *swig_Light_base_names[] = {0};
static swig_lua_class _wrap_class_Light = { "Light", "Light", &SWIGTYPE_p_jli__Light,_proxy__wrap_new_Light, swig_delete_Light, swig_Light_methods, swig_Light_attributes, &swig_Light_Sf_SwigStatic, swig_Light_meta, swig_Light_bases, swig_Light_base_names };

static int _wrap_LightBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::LightBuilder *arg1 = (jli::LightBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::LightBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::LightBuilder::calculateSerializeBufferSize",1,"jli::LightBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__LightBuilder,0))){
    SWIG_fail_ptr("LightBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__LightBuilder);
  }
  
  result = (s32)((jli::LightBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::LightBuilder *arg1 = (jli::LightBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::LightBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::LightBuilder::serialize",1,"jli::LightBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::LightBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::LightBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__LightBuilder,0))){
    SWIG_fail_ptr("LightBuilder_serialize",1,SWIGTYPE_p_jli__LightBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"LightBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("LightBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::LightBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::LightBuilder *arg1 = (jli::LightBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::LightBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::LightBuilder::getObjectType",1,"jli::LightBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__LightBuilder,0))){
    SWIG_fail_ptr("LightBuilder_getObjectType",1,SWIGTYPE_p_jli__LightBuilder);
  }
  
  result = (u32)((jli::LightBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::LightBuilder *arg1 = (jli::LightBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::LightBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::LightBuilder::getClassName",1,"jli::LightBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__LightBuilder,0))){
    SWIG_fail_ptr("LightBuilder_getClassName",1,SWIGTYPE_p_jli__LightBuilder);
  }
  
  result = (char *)((jli::LightBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LightBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::LightBuilder *arg1 = (jli::LightBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::LightBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::LightBuilder::getType",1,"jli::LightBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__LightBuilder,0))){
    SWIG_fail_ptr("LightBuilder_getType",1,SWIGTYPE_p_jli__LightBuilder);
  }
  
  result = (u32)((jli::LightBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_LightBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LightBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_LightBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_LightBuilder_serialize},
    { "getObjectType", _wrap_LightBuilder_getObjectType},
    { "getClassName", _wrap_LightBuilder_getClassName},
    { "getType", _wrap_LightBuilder_getType},
    {0,0}
};
static swig_lua_method swig_LightBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LightBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LightBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LightBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LightBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LightBuilder_Sf_SwigStatic = {
    "LightBuilder",
    swig_LightBuilder_Sf_SwigStatic_methods,
    swig_LightBuilder_Sf_SwigStatic_attributes,
    swig_LightBuilder_Sf_SwigStatic_constants,
    swig_LightBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LightBuilder_bases[] = {0};
static const char *swig_LightBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_LightBuilder = { "LightBuilder", "LightBuilder", &SWIGTYPE_p_jli__LightBuilder,0,0, swig_LightBuilder_methods, swig_LightBuilder_attributes, &swig_LightBuilder_Sf_SwigStatic, swig_LightBuilder_meta, swig_LightBuilder_bases, swig_LightBuilder_base_names };

static int _wrap_new_Material__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *result = 0 ;
  
  SWIG_check_num_args("jli::Material::Material",0,0)
  result = (jli::Material *)new jli::Material();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Material *result = 0 ;
  
  SWIG_check_num_args("jli::Material::Material",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Material::Material",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Material",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Material *)new jli::Material((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = 0 ;
  jli::Material *result = 0 ;
  
  SWIG_check_num_args("jli::Material::Material",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Material::Material",1,"jli::Material const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("new_Material",1,SWIGTYPE_p_jli__Material);
  }
  
  result = (jli::Material *)new jli::Material((jli::Material const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Material__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Material__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Material__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Material'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Material::Material()\n"
    "    jli::Material::Material(jli::AbstractBuilder const &)\n"
    "    jli::Material::Material(jli::Material const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Material::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator new",1,"jli::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Material::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_new",1,SWIGTYPE_p_jli__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Material::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator delete",1,"jli::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Material::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_delete",1,SWIGTYPE_p_jli__Material);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Material_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Material::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator new",1,"jli::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Material::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Material::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_new",1,SWIGTYPE_p_jli__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Material_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Material_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Material_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Material_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Material::operator new(size_t)\n"
    "    jli::Material::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Material::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator delete",1,"jli::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Material::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Material::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_delete",1,SWIGTYPE_p_jli__Material);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Material_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Material_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Material_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Material_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Material_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Material::operator delete(void *)\n"
    "    jli::Material::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Material::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator new[]",1,"jli::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Material::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_new_array",1,SWIGTYPE_p_jli__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Material::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator delete[]",1,"jli::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Material::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_delete_array",1,SWIGTYPE_p_jli__Material);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Material_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Material::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator new[]",1,"jli::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Material::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Material::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_new_array",1,SWIGTYPE_p_jli__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Material_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Material_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Material_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Material_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Material::operator new[](size_t)\n"
    "    jli::Material::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Material::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::operator delete[]",1,"jli::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Material::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Material::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_operator_delete_array",1,SWIGTYPE_p_jli__Material);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Material_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Material_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Material_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Material_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Material_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Material::operator delete[](void *)\n"
    "    jli::Material::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Material::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::calculateSerializeBufferSize",1,"jli::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Material);
  }
  
  result = (s32)((jli::Material const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Material::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::serialize",1,"jli::Material const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Material::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Material::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_serialize",1,SWIGTYPE_p_jli__Material);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Material_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Material_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Material const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Material::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::getClassName",1,"jli::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_getClassName",1,SWIGTYPE_p_jli__Material);
  }
  
  result = (char *)((jli::Material const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Material *arg1 = (jli::Material *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Material::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Material::getType",1,"jli::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Material,0))){
    SWIG_fail_ptr("Material_getType",1,SWIGTYPE_p_jli__Material);
  }
  
  result = (u32)((jli::Material const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Material(void *obj) {
jli::Material *arg1 = (jli::Material *) obj;
delete arg1;
}
static int _proxy__wrap_new_Material(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Material);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Material_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Material_methods[]= {
    { "operator_new", _wrap_Material_operator_new},
    { "operator_delete", _wrap_Material_operator_delete},
    { "operator_new_array", _wrap_Material_operator_new_array},
    { "operator_delete_array", _wrap_Material_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Material_calculateSerializeBufferSize},
    { "serialize", _wrap_Material_serialize},
    { "getClassName", _wrap_Material_getClassName},
    { "getType", _wrap_Material_getType},
    {0,0}
};
static swig_lua_method swig_Material_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Material_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Material_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Material_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Material_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Material_Sf_SwigStatic = {
    "Material",
    swig_Material_Sf_SwigStatic_methods,
    swig_Material_Sf_SwigStatic_attributes,
    swig_Material_Sf_SwigStatic_constants,
    swig_Material_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Material_bases[] = {0};
static const char *swig_Material_base_names[] = {0};
static swig_lua_class _wrap_class_Material = { "Material", "Material", &SWIGTYPE_p_jli__Material,_proxy__wrap_new_Material, swig_delete_Material, swig_Material_methods, swig_Material_attributes, &swig_Material_Sf_SwigStatic, swig_Material_meta, swig_Material_bases, swig_Material_base_names };

static int _wrap_MaterialBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialBuilder *arg1 = (jli::MaterialBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::MaterialBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialBuilder::calculateSerializeBufferSize",1,"jli::MaterialBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialBuilder,0))){
    SWIG_fail_ptr("MaterialBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__MaterialBuilder);
  }
  
  result = (s32)((jli::MaterialBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialBuilder *arg1 = (jli::MaterialBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::MaterialBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialBuilder::serialize",1,"jli::MaterialBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialBuilder,0))){
    SWIG_fail_ptr("MaterialBuilder_serialize",1,SWIGTYPE_p_jli__MaterialBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("MaterialBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::MaterialBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialBuilder *arg1 = (jli::MaterialBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::MaterialBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialBuilder::getObjectType",1,"jli::MaterialBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialBuilder,0))){
    SWIG_fail_ptr("MaterialBuilder_getObjectType",1,SWIGTYPE_p_jli__MaterialBuilder);
  }
  
  result = (u32)((jli::MaterialBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialBuilder *arg1 = (jli::MaterialBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialBuilder::getClassName",1,"jli::MaterialBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialBuilder,0))){
    SWIG_fail_ptr("MaterialBuilder_getClassName",1,SWIGTYPE_p_jli__MaterialBuilder);
  }
  
  result = (char *)((jli::MaterialBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialBuilder *arg1 = (jli::MaterialBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::MaterialBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialBuilder::getType",1,"jli::MaterialBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialBuilder,0))){
    SWIG_fail_ptr("MaterialBuilder_getType",1,SWIGTYPE_p_jli__MaterialBuilder);
  }
  
  result = (u32)((jli::MaterialBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_MaterialBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_MaterialBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_MaterialBuilder_serialize},
    { "getObjectType", _wrap_MaterialBuilder_getObjectType},
    { "getClassName", _wrap_MaterialBuilder_getClassName},
    { "getType", _wrap_MaterialBuilder_getType},
    {0,0}
};
static swig_lua_method swig_MaterialBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaterialBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialBuilder_Sf_SwigStatic = {
    "MaterialBuilder",
    swig_MaterialBuilder_Sf_SwigStatic_methods,
    swig_MaterialBuilder_Sf_SwigStatic_attributes,
    swig_MaterialBuilder_Sf_SwigStatic_constants,
    swig_MaterialBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialBuilder_bases[] = {0};
static const char *swig_MaterialBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialBuilder = { "MaterialBuilder", "MaterialBuilder", &SWIGTYPE_p_jli__MaterialBuilder,0,0, swig_MaterialBuilder_methods, swig_MaterialBuilder_attributes, &swig_MaterialBuilder_Sf_SwigStatic, swig_MaterialBuilder_meta, swig_MaterialBuilder_bases, swig_MaterialBuilder_base_names };

static int _wrap_new_MaterialProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::MaterialProperty",0,0)
  result = (jli::MaterialProperty *)new jli::MaterialProperty();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__MaterialProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::MaterialProperty *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::MaterialProperty",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::MaterialProperty::MaterialProperty",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_MaterialProperty",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::MaterialProperty *)new jli::MaterialProperty((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__MaterialProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialProperty__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = 0 ;
  jli::MaterialProperty *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::MaterialProperty",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::MaterialProperty::MaterialProperty",1,"jli::MaterialProperty const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("new_MaterialProperty",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  result = (jli::MaterialProperty *)new jli::MaterialProperty((jli::MaterialProperty const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__MaterialProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialProperty(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MaterialProperty__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MaterialProperty__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MaterialProperty__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MaterialProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::MaterialProperty::MaterialProperty()\n"
    "    jli::MaterialProperty::MaterialProperty(jli::AbstractBuilder const &)\n"
    "    jli::MaterialProperty::MaterialProperty(jli::MaterialProperty const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialProperty_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator new",1,"jli::MaterialProperty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_new",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator delete",1,"jli::MaterialProperty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_delete",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialProperty_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator new",1,"jli::MaterialProperty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialProperty::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_new",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"MaterialProperty_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MaterialProperty_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MaterialProperty_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaterialProperty_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::MaterialProperty::operator new(size_t)\n"
    "    jli::MaterialProperty::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialProperty_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator delete",1,"jli::MaterialProperty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialProperty::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_delete",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialProperty_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"MaterialProperty_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MaterialProperty_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MaterialProperty_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaterialProperty_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::MaterialProperty::operator delete(void *)\n"
    "    jli::MaterialProperty::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialProperty_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator new[]",1,"jli::MaterialProperty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_new_array",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator delete[]",1,"jli::MaterialProperty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_delete_array",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialProperty_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator new[]",1,"jli::MaterialProperty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialProperty::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_new_array",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"MaterialProperty_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MaterialProperty_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MaterialProperty_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaterialProperty_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::MaterialProperty::operator new[](size_t)\n"
    "    jli::MaterialProperty::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialProperty_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::operator delete[]",1,"jli::MaterialProperty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialProperty::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialProperty::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_operator_delete_array",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialProperty_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"MaterialProperty_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MaterialProperty_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__MaterialProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MaterialProperty_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MaterialProperty_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::MaterialProperty::operator delete[](void *)\n"
    "    jli::MaterialProperty::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialProperty_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::MaterialProperty::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::calculateSerializeBufferSize",1,"jli::MaterialProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  result = (s32)((jli::MaterialProperty const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::serialize",1,"jli::MaterialProperty const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialProperty::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialProperty::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_serialize",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialProperty_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("MaterialProperty_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::MaterialProperty const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialProperty::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::getClassName",1,"jli::MaterialProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_getClassName",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  result = (char *)((jli::MaterialProperty const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialProperty_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialProperty *arg1 = (jli::MaterialProperty *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::MaterialProperty::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialProperty::getType",1,"jli::MaterialProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialProperty,0))){
    SWIG_fail_ptr("MaterialProperty_getType",1,SWIGTYPE_p_jli__MaterialProperty);
  }
  
  result = (u32)((jli::MaterialProperty const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialProperty(void *obj) {
jli::MaterialProperty *arg1 = (jli::MaterialProperty *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaterialProperty(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaterialProperty);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaterialProperty_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialProperty_methods[]= {
    { "operator_new", _wrap_MaterialProperty_operator_new},
    { "operator_delete", _wrap_MaterialProperty_operator_delete},
    { "operator_new_array", _wrap_MaterialProperty_operator_new_array},
    { "operator_delete_array", _wrap_MaterialProperty_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_MaterialProperty_calculateSerializeBufferSize},
    { "serialize", _wrap_MaterialProperty_serialize},
    { "getClassName", _wrap_MaterialProperty_getClassName},
    { "getType", _wrap_MaterialProperty_getType},
    {0,0}
};
static swig_lua_method swig_MaterialProperty_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialProperty_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialProperty_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialProperty_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaterialProperty_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialProperty_Sf_SwigStatic = {
    "MaterialProperty",
    swig_MaterialProperty_Sf_SwigStatic_methods,
    swig_MaterialProperty_Sf_SwigStatic_attributes,
    swig_MaterialProperty_Sf_SwigStatic_constants,
    swig_MaterialProperty_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialProperty_bases[] = {0};
static const char *swig_MaterialProperty_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialProperty = { "MaterialProperty", "MaterialProperty", &SWIGTYPE_p_jli__MaterialProperty,_proxy__wrap_new_MaterialProperty, swig_delete_MaterialProperty, swig_MaterialProperty_methods, swig_MaterialProperty_attributes, &swig_MaterialProperty_Sf_SwigStatic, swig_MaterialProperty_meta, swig_MaterialProperty_bases, swig_MaterialProperty_base_names };

static int _wrap_MaterialPropertyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialPropertyBuilder *arg1 = (jli::MaterialPropertyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::MaterialPropertyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialPropertyBuilder::calculateSerializeBufferSize",1,"jli::MaterialPropertyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialPropertyBuilder,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__MaterialPropertyBuilder);
  }
  
  result = (s32)((jli::MaterialPropertyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialPropertyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialPropertyBuilder *arg1 = (jli::MaterialPropertyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::MaterialPropertyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialPropertyBuilder::serialize",1,"jli::MaterialPropertyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::MaterialPropertyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::MaterialPropertyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialPropertyBuilder,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_serialize",1,SWIGTYPE_p_jli__MaterialPropertyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MaterialPropertyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::MaterialPropertyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialPropertyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialPropertyBuilder *arg1 = (jli::MaterialPropertyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::MaterialPropertyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialPropertyBuilder::getObjectType",1,"jli::MaterialPropertyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialPropertyBuilder,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_getObjectType",1,SWIGTYPE_p_jli__MaterialPropertyBuilder);
  }
  
  result = (u32)((jli::MaterialPropertyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialPropertyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialPropertyBuilder *arg1 = (jli::MaterialPropertyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::MaterialPropertyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialPropertyBuilder::getClassName",1,"jli::MaterialPropertyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialPropertyBuilder,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_getClassName",1,SWIGTYPE_p_jli__MaterialPropertyBuilder);
  }
  
  result = (char *)((jli::MaterialPropertyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialPropertyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::MaterialPropertyBuilder *arg1 = (jli::MaterialPropertyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::MaterialPropertyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::MaterialPropertyBuilder::getType",1,"jli::MaterialPropertyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__MaterialPropertyBuilder,0))){
    SWIG_fail_ptr("MaterialPropertyBuilder_getType",1,SWIGTYPE_p_jli__MaterialPropertyBuilder);
  }
  
  result = (u32)((jli::MaterialPropertyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_MaterialPropertyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialPropertyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_MaterialPropertyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_MaterialPropertyBuilder_serialize},
    { "getObjectType", _wrap_MaterialPropertyBuilder_getObjectType},
    { "getClassName", _wrap_MaterialPropertyBuilder_getClassName},
    { "getType", _wrap_MaterialPropertyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_MaterialPropertyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialPropertyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialPropertyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialPropertyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaterialPropertyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialPropertyBuilder_Sf_SwigStatic = {
    "MaterialPropertyBuilder",
    swig_MaterialPropertyBuilder_Sf_SwigStatic_methods,
    swig_MaterialPropertyBuilder_Sf_SwigStatic_attributes,
    swig_MaterialPropertyBuilder_Sf_SwigStatic_constants,
    swig_MaterialPropertyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialPropertyBuilder_bases[] = {0};
static const char *swig_MaterialPropertyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialPropertyBuilder = { "MaterialPropertyBuilder", "MaterialPropertyBuilder", &SWIGTYPE_p_jli__MaterialPropertyBuilder,0,0, swig_MaterialPropertyBuilder_methods, swig_MaterialPropertyBuilder_attributes, &swig_MaterialPropertyBuilder_Sf_SwigStatic, swig_MaterialPropertyBuilder_meta, swig_MaterialPropertyBuilder_bases, swig_MaterialPropertyBuilder_base_names };

static int _wrap_new_Node__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *result = 0 ;
  
  SWIG_check_num_args("jli::Node::Node",0,0)
  result = (jli::Node *)new jli::Node();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Node,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Node *result = 0 ;
  
  SWIG_check_num_args("jli::Node::Node",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Node::Node",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Node",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Node *)new jli::Node((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Node,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = 0 ;
  jli::Node *result = 0 ;
  
  SWIG_check_num_args("jli::Node::Node",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Node::Node",1,"jli::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("new_Node",1,SWIGTYPE_p_jli__Node);
  }
  
  result = (jli::Node *)new jli::Node((jli::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Node,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Node__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Node__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Node__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Node'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Node::Node()\n"
    "    jli::Node::Node(jli::AbstractBuilder const &)\n"
    "    jli::Node::Node(jli::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Node::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator new",1,"jli::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Node::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_new",1,SWIGTYPE_p_jli__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Node::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator delete",1,"jli::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Node::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_delete",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Node_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Node::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator new",1,"jli::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Node::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Node::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_new",1,SWIGTYPE_p_jli__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Node_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Node::operator new(size_t)\n"
    "    jli::Node::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Node::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator delete",1,"jli::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Node::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Node::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_delete",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Node_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Node_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Node::operator delete(void *)\n"
    "    jli::Node::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Node::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator new[]",1,"jli::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Node::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_new_array",1,SWIGTYPE_p_jli__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Node::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator delete[]",1,"jli::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Node::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_delete_array",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Node_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Node::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator new[]",1,"jli::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Node::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Node::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_new_array",1,SWIGTYPE_p_jli__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Node_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Node::operator new[](size_t)\n"
    "    jli::Node::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Node::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::operator delete[]",1,"jli::Node *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Node::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Node::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_operator_delete_array",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Node_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Node_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Node::operator delete[](void *)\n"
    "    jli::Node::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Node::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::calculateSerializeBufferSize",1,"jli::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Node);
  }
  
  result = (s32)((jli::Node const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Node::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::serialize",1,"jli::Node const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Node::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Node::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_serialize",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Node_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Node_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Node const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Node::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::getClassName",1,"jli::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_getClassName",1,SWIGTYPE_p_jli__Node);
  }
  
  result = (char *)((jli::Node const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Node::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::getType",1,"jli::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_getType",1,SWIGTYPE_p_jli__Node);
  }
  
  result = (u32)((jli::Node const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::Node::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::setName",1,"jli::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::Node::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_setName",1,SWIGTYPE_p_jli__Node);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Node *arg1 = (jli::Node *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Node::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Node::getName",1,"jli::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("Node_getName",1,SWIGTYPE_p_jli__Node);
  }
  
  result = (char *)((jli::Node const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Node(void *obj) {
jli::Node *arg1 = (jli::Node *) obj;
delete arg1;
}
static int _proxy__wrap_new_Node(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Node);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Node_methods[]= {
    { "operator_new", _wrap_Node_operator_new},
    { "operator_delete", _wrap_Node_operator_delete},
    { "operator_new_array", _wrap_Node_operator_new_array},
    { "operator_delete_array", _wrap_Node_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Node_calculateSerializeBufferSize},
    { "serialize", _wrap_Node_serialize},
    { "getClassName", _wrap_Node_getClassName},
    { "getType", _wrap_Node_getType},
    { "setName", _wrap_Node_setName},
    { "getName", _wrap_Node_getName},
    {0,0}
};
static swig_lua_method swig_Node_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Node_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Node_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Node_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Node_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Node_Sf_SwigStatic = {
    "Node",
    swig_Node_Sf_SwigStatic_methods,
    swig_Node_Sf_SwigStatic_attributes,
    swig_Node_Sf_SwigStatic_constants,
    swig_Node_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Node_bases[] = {0};
static const char *swig_Node_base_names[] = {0};
static swig_lua_class _wrap_class_Node = { "Node", "Node", &SWIGTYPE_p_jli__Node,_proxy__wrap_new_Node, swig_delete_Node, swig_Node_methods, swig_Node_attributes, &swig_Node_Sf_SwigStatic, swig_Node_meta, swig_Node_bases, swig_Node_base_names };

static int _wrap_NodeBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeBuilder *arg1 = (jli::NodeBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::NodeBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeBuilder::calculateSerializeBufferSize",1,"jli::NodeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeBuilder,0))){
    SWIG_fail_ptr("NodeBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__NodeBuilder);
  }
  
  result = (s32)((jli::NodeBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeBuilder *arg1 = (jli::NodeBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::NodeBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeBuilder::serialize",1,"jli::NodeBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeBuilder,0))){
    SWIG_fail_ptr("NodeBuilder_serialize",1,SWIGTYPE_p_jli__NodeBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("NodeBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::NodeBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeBuilder *arg1 = (jli::NodeBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeBuilder::getObjectType",1,"jli::NodeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeBuilder,0))){
    SWIG_fail_ptr("NodeBuilder_getObjectType",1,SWIGTYPE_p_jli__NodeBuilder);
  }
  
  result = (u32)((jli::NodeBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeBuilder *arg1 = (jli::NodeBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeBuilder::getClassName",1,"jli::NodeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeBuilder,0))){
    SWIG_fail_ptr("NodeBuilder_getClassName",1,SWIGTYPE_p_jli__NodeBuilder);
  }
  
  result = (char *)((jli::NodeBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeBuilder *arg1 = (jli::NodeBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeBuilder::getType",1,"jli::NodeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeBuilder,0))){
    SWIG_fail_ptr("NodeBuilder_getType",1,SWIGTYPE_p_jli__NodeBuilder);
  }
  
  result = (u32)((jli::NodeBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_NodeBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_NodeBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_NodeBuilder_serialize},
    { "getObjectType", _wrap_NodeBuilder_getObjectType},
    { "getClassName", _wrap_NodeBuilder_getClassName},
    { "getType", _wrap_NodeBuilder_getType},
    {0,0}
};
static swig_lua_method swig_NodeBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeBuilder_Sf_SwigStatic = {
    "NodeBuilder",
    swig_NodeBuilder_Sf_SwigStatic_methods,
    swig_NodeBuilder_Sf_SwigStatic_attributes,
    swig_NodeBuilder_Sf_SwigStatic_constants,
    swig_NodeBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeBuilder_bases[] = {0};
static const char *swig_NodeBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_NodeBuilder = { "NodeBuilder", "NodeBuilder", &SWIGTYPE_p_jli__NodeBuilder,0,0, swig_NodeBuilder_methods, swig_NodeBuilder_attributes, &swig_NodeBuilder_Sf_SwigStatic, swig_NodeBuilder_meta, swig_NodeBuilder_bases, swig_NodeBuilder_base_names };

static int _wrap_new_NodeState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::NodeState",0,0)
  result = (jli::NodeState *)new jli::NodeState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::NodeState *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::NodeState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::NodeState::NodeState",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_NodeState",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::NodeState *)new jli::NodeState((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = 0 ;
  jli::NodeState *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::NodeState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::NodeState::NodeState",1,"jli::NodeState const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("new_NodeState",1,SWIGTYPE_p_jli__NodeState);
  }
  
  result = (jli::NodeState *)new jli::NodeState((jli::NodeState const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeState(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeState__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeState__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeState__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NodeState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeState::NodeState()\n"
    "    jli::NodeState::NodeState(jli::AbstractBuilder const &)\n"
    "    jli::NodeState::NodeState(jli::NodeState const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeState_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator new",1,"jli::NodeState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeState::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_new",1,SWIGTYPE_p_jli__NodeState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator delete",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_delete",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeState_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator new",1,"jli::NodeState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeState::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeState::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_new",1,SWIGTYPE_p_jli__NodeState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeState_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeState_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeState_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeState_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeState::operator new(size_t)\n"
    "    jli::NodeState::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeState_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator delete",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeState::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_delete",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeState_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeState_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeState_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeState_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeState_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeState::operator delete(void *)\n"
    "    jli::NodeState::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeState_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator new[]",1,"jli::NodeState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeState::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_new_array",1,SWIGTYPE_p_jli__NodeState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator delete[]",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_delete_array",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeState_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator new[]",1,"jli::NodeState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeState::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeState::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_new_array",1,SWIGTYPE_p_jli__NodeState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeState_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeState_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeState_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeState_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeState::operator new[](size_t)\n"
    "    jli::NodeState::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeState_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::operator delete[]",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeState::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_operator_delete_array",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeState_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeState_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeState_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeState_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeState_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeState::operator delete[](void *)\n"
    "    jli::NodeState::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeState_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::NodeState::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::calculateSerializeBufferSize",1,"jli::NodeState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__NodeState);
  }
  
  result = (s32)((jli::NodeState const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::serialize",1,"jli::NodeState const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeState::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_serialize",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeState_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("NodeState_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::NodeState const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::getClassName",1,"jli::NodeState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_getClassName",1,SWIGTYPE_p_jli__NodeState);
  }
  
  result = (char *)((jli::NodeState const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeState::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::getType",1,"jli::NodeState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_getType",1,SWIGTYPE_p_jli__NodeState);
  }
  
  result = (u32)((jli::NodeState const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_enter(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  jli::Node *arg2 = (jli::Node *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::enter",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::enter",2,"jli::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_enter",1,SWIGTYPE_p_jli__NodeState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("NodeState_enter",2,SWIGTYPE_p_jli__Node);
  }
  
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_update(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  jli::Node *arg2 = (jli::Node *) 0 ;
  f32 arg3 ;
  
  SWIG_check_num_args("jli::NodeState::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::update",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::update",2,"jli::Node *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jli::NodeState::update",3,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_update",1,SWIGTYPE_p_jli__NodeState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("NodeState_update",2,SWIGTYPE_p_jli__Node);
  }
  
  arg3 = (f32)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_exit(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  jli::Node *arg2 = (jli::Node *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::exit",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::exit",2,"jli::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_exit",1,SWIGTYPE_p_jli__NodeState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("NodeState_exit",2,SWIGTYPE_p_jli__Node);
  }
  
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  jli::Node *arg2 = (jli::Node *) 0 ;
  jli::Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::NodeState::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::onMessage",1,"jli::NodeState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeState::onMessage",2,"jli::Node *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jli::NodeState::onMessage",3,"jli::Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_onMessage",1,SWIGTYPE_p_jli__NodeState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("NodeState_onMessage",2,SWIGTYPE_p_jli__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("NodeState_onMessage",3,SWIGTYPE_p_jli__Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(jli::Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::NodeState::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::setName",1,"jli::NodeState *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::NodeState::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_setName",1,SWIGTYPE_p_jli__NodeState);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeState_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeState *arg1 = (jli::NodeState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeState::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeState::getName",1,"jli::NodeState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeState,0))){
    SWIG_fail_ptr("NodeState_getName",1,SWIGTYPE_p_jli__NodeState);
  }
  
  result = (char *)((jli::NodeState const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeState(void *obj) {
jli::NodeState *arg1 = (jli::NodeState *) obj;
delete arg1;
}
static int _proxy__wrap_new_NodeState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NodeState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NodeState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeState_methods[]= {
    { "operator_new", _wrap_NodeState_operator_new},
    { "operator_delete", _wrap_NodeState_operator_delete},
    { "operator_new_array", _wrap_NodeState_operator_new_array},
    { "operator_delete_array", _wrap_NodeState_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_NodeState_calculateSerializeBufferSize},
    { "serialize", _wrap_NodeState_serialize},
    { "getClassName", _wrap_NodeState_getClassName},
    { "getType", _wrap_NodeState_getType},
    { "enter", _wrap_NodeState_enter},
    { "update", _wrap_NodeState_update},
    { "exit", _wrap_NodeState_exit},
    { "onMessage", _wrap_NodeState_onMessage},
    { "setName", _wrap_NodeState_setName},
    { "getName", _wrap_NodeState_getName},
    {0,0}
};
static swig_lua_method swig_NodeState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeState_Sf_SwigStatic = {
    "NodeState",
    swig_NodeState_Sf_SwigStatic_methods,
    swig_NodeState_Sf_SwigStatic_attributes,
    swig_NodeState_Sf_SwigStatic_constants,
    swig_NodeState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeState_bases[] = {0};
static const char *swig_NodeState_base_names[] = {0};
static swig_lua_class _wrap_class_NodeState = { "NodeState", "NodeState", &SWIGTYPE_p_jli__NodeState,_proxy__wrap_new_NodeState, swig_delete_NodeState, swig_NodeState_methods, swig_NodeState_attributes, &swig_NodeState_Sf_SwigStatic, swig_NodeState_meta, swig_NodeState_bases, swig_NodeState_base_names };

static int _wrap_NodeStateBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateBuilder *arg1 = (jli::NodeStateBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::NodeStateBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateBuilder::calculateSerializeBufferSize",1,"jli::NodeStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateBuilder,0))){
    SWIG_fail_ptr("NodeStateBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__NodeStateBuilder);
  }
  
  result = (s32)((jli::NodeStateBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateBuilder *arg1 = (jli::NodeStateBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateBuilder::serialize",1,"jli::NodeStateBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateBuilder,0))){
    SWIG_fail_ptr("NodeStateBuilder_serialize",1,SWIGTYPE_p_jli__NodeStateBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("NodeStateBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::NodeStateBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateBuilder *arg1 = (jli::NodeStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeStateBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateBuilder::getObjectType",1,"jli::NodeStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateBuilder,0))){
    SWIG_fail_ptr("NodeStateBuilder_getObjectType",1,SWIGTYPE_p_jli__NodeStateBuilder);
  }
  
  result = (u32)((jli::NodeStateBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateBuilder *arg1 = (jli::NodeStateBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateBuilder::getClassName",1,"jli::NodeStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateBuilder,0))){
    SWIG_fail_ptr("NodeStateBuilder_getClassName",1,SWIGTYPE_p_jli__NodeStateBuilder);
  }
  
  result = (char *)((jli::NodeStateBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateBuilder *arg1 = (jli::NodeStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeStateBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateBuilder::getType",1,"jli::NodeStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateBuilder,0))){
    SWIG_fail_ptr("NodeStateBuilder_getType",1,SWIGTYPE_p_jli__NodeStateBuilder);
  }
  
  result = (u32)((jli::NodeStateBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_NodeStateBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeStateBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_NodeStateBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_NodeStateBuilder_serialize},
    { "getObjectType", _wrap_NodeStateBuilder_getObjectType},
    { "getClassName", _wrap_NodeStateBuilder_getClassName},
    { "getType", _wrap_NodeStateBuilder_getType},
    {0,0}
};
static swig_lua_method swig_NodeStateBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeStateBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeStateBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeStateBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeStateBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeStateBuilder_Sf_SwigStatic = {
    "NodeStateBuilder",
    swig_NodeStateBuilder_Sf_SwigStatic_methods,
    swig_NodeStateBuilder_Sf_SwigStatic_attributes,
    swig_NodeStateBuilder_Sf_SwigStatic_constants,
    swig_NodeStateBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeStateBuilder_bases[] = {0};
static const char *swig_NodeStateBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_NodeStateBuilder = { "NodeStateBuilder", "NodeStateBuilder", &SWIGTYPE_p_jli__NodeStateBuilder,0,0, swig_NodeStateBuilder_methods, swig_NodeStateBuilder_attributes, &swig_NodeStateBuilder_Sf_SwigStatic, swig_NodeStateBuilder_meta, swig_NodeStateBuilder_bases, swig_NodeStateBuilder_base_names };

static int _wrap_new_NodeStateMachine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::NodeStateMachine",0,0)
  result = (jli::NodeStateMachine *)new jli::NodeStateMachine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeStateMachine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::NodeStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::NodeStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::NodeStateMachine::NodeStateMachine",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_NodeStateMachine",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::NodeStateMachine *)new jli::NodeStateMachine((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeStateMachine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = 0 ;
  jli::NodeStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::NodeStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::NodeStateMachine::NodeStateMachine",1,"jli::NodeStateMachine const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("new_NodeStateMachine",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  result = (jli::NodeStateMachine *)new jli::NodeStateMachine((jli::NodeStateMachine const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__NodeStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeStateMachine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeStateMachine__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeStateMachine__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeStateMachine__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NodeStateMachine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeStateMachine::NodeStateMachine()\n"
    "    jli::NodeStateMachine::NodeStateMachine(jli::AbstractBuilder const &)\n"
    "    jli::NodeStateMachine::NodeStateMachine(jli::NodeStateMachine const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeStateMachine_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator new",1,"jli::NodeStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_new",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator delete",1,"jli::NodeStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_delete",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachine_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator new",1,"jli::NodeStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachine::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_new",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeStateMachine_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeStateMachine_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeStateMachine_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeStateMachine_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeStateMachine::operator new(size_t)\n"
    "    jli::NodeStateMachine::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeStateMachine_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator delete",1,"jli::NodeStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachine::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_delete",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachine_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeStateMachine_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeStateMachine_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeStateMachine_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeStateMachine_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeStateMachine::operator delete(void *)\n"
    "    jli::NodeStateMachine::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeStateMachine_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator new[]",1,"jli::NodeStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_new_array",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator delete[]",1,"jli::NodeStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator new[]",1,"jli::NodeStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachine::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_new_array",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeStateMachine_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeStateMachine_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeStateMachine_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeStateMachine_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeStateMachine::operator new[](size_t)\n"
    "    jli::NodeStateMachine::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeStateMachine_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::operator delete[]",1,"jli::NodeStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachine::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachine::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachine_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"NodeStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeStateMachine_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__NodeStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeStateMachine_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeStateMachine_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::NodeStateMachine::operator delete[](void *)\n"
    "    jli::NodeStateMachine::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeStateMachine_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::NodeStateMachine::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::calculateSerializeBufferSize",1,"jli::NodeStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  result = (s32)((jli::NodeStateMachine const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::serialize",1,"jli::NodeStateMachine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachine::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachine::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_serialize",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachine_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("NodeStateMachine_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::NodeStateMachine const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachine::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::getClassName",1,"jli::NodeStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_getClassName",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  result = (char *)((jli::NodeStateMachine const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachine_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeStateMachine::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachine::getType",1,"jli::NodeStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachine,0))){
    SWIG_fail_ptr("NodeStateMachine_getType",1,SWIGTYPE_p_jli__NodeStateMachine);
  }
  
  result = (u32)((jli::NodeStateMachine const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeStateMachine(void *obj) {
jli::NodeStateMachine *arg1 = (jli::NodeStateMachine *) obj;
delete arg1;
}
static int _proxy__wrap_new_NodeStateMachine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NodeStateMachine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NodeStateMachine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeStateMachine_methods[]= {
    { "operator_new", _wrap_NodeStateMachine_operator_new},
    { "operator_delete", _wrap_NodeStateMachine_operator_delete},
    { "operator_new_array", _wrap_NodeStateMachine_operator_new_array},
    { "operator_delete_array", _wrap_NodeStateMachine_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_NodeStateMachine_calculateSerializeBufferSize},
    { "serialize", _wrap_NodeStateMachine_serialize},
    { "getClassName", _wrap_NodeStateMachine_getClassName},
    { "getType", _wrap_NodeStateMachine_getType},
    {0,0}
};
static swig_lua_method swig_NodeStateMachine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeStateMachine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeStateMachine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeStateMachine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeStateMachine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeStateMachine_Sf_SwigStatic = {
    "NodeStateMachine",
    swig_NodeStateMachine_Sf_SwigStatic_methods,
    swig_NodeStateMachine_Sf_SwigStatic_attributes,
    swig_NodeStateMachine_Sf_SwigStatic_constants,
    swig_NodeStateMachine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeStateMachine_bases[] = {0};
static const char *swig_NodeStateMachine_base_names[] = {0};
static swig_lua_class _wrap_class_NodeStateMachine = { "NodeStateMachine", "NodeStateMachine", &SWIGTYPE_p_jli__NodeStateMachine,_proxy__wrap_new_NodeStateMachine, swig_delete_NodeStateMachine, swig_NodeStateMachine_methods, swig_NodeStateMachine_attributes, &swig_NodeStateMachine_Sf_SwigStatic, swig_NodeStateMachine_meta, swig_NodeStateMachine_bases, swig_NodeStateMachine_base_names };

static int _wrap_NodeStateMachineBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachineBuilder *arg1 = (jli::NodeStateMachineBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::NodeStateMachineBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachineBuilder::calculateSerializeBufferSize",1,"jli::NodeStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachineBuilder,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__NodeStateMachineBuilder);
  }
  
  result = (s32)((jli::NodeStateMachineBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachineBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachineBuilder *arg1 = (jli::NodeStateMachineBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachineBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachineBuilder::serialize",1,"jli::NodeStateMachineBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::NodeStateMachineBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::NodeStateMachineBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachineBuilder,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_serialize",1,SWIGTYPE_p_jli__NodeStateMachineBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"NodeStateMachineBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::NodeStateMachineBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachineBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachineBuilder *arg1 = (jli::NodeStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeStateMachineBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachineBuilder::getObjectType",1,"jli::NodeStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachineBuilder,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_getObjectType",1,SWIGTYPE_p_jli__NodeStateMachineBuilder);
  }
  
  result = (u32)((jli::NodeStateMachineBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachineBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachineBuilder *arg1 = (jli::NodeStateMachineBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::NodeStateMachineBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachineBuilder::getClassName",1,"jli::NodeStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachineBuilder,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_getClassName",1,SWIGTYPE_p_jli__NodeStateMachineBuilder);
  }
  
  result = (char *)((jli::NodeStateMachineBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeStateMachineBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::NodeStateMachineBuilder *arg1 = (jli::NodeStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::NodeStateMachineBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::NodeStateMachineBuilder::getType",1,"jli::NodeStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__NodeStateMachineBuilder,0))){
    SWIG_fail_ptr("NodeStateMachineBuilder_getType",1,SWIGTYPE_p_jli__NodeStateMachineBuilder);
  }
  
  result = (u32)((jli::NodeStateMachineBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_NodeStateMachineBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeStateMachineBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_NodeStateMachineBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_NodeStateMachineBuilder_serialize},
    { "getObjectType", _wrap_NodeStateMachineBuilder_getObjectType},
    { "getClassName", _wrap_NodeStateMachineBuilder_getClassName},
    { "getType", _wrap_NodeStateMachineBuilder_getType},
    {0,0}
};
static swig_lua_method swig_NodeStateMachineBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeStateMachineBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeStateMachineBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeStateMachineBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeStateMachineBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeStateMachineBuilder_Sf_SwigStatic = {
    "NodeStateMachineBuilder",
    swig_NodeStateMachineBuilder_Sf_SwigStatic_methods,
    swig_NodeStateMachineBuilder_Sf_SwigStatic_attributes,
    swig_NodeStateMachineBuilder_Sf_SwigStatic_constants,
    swig_NodeStateMachineBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeStateMachineBuilder_bases[] = {0};
static const char *swig_NodeStateMachineBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_NodeStateMachineBuilder = { "NodeStateMachineBuilder", "NodeStateMachineBuilder", &SWIGTYPE_p_jli__NodeStateMachineBuilder,0,0, swig_NodeStateMachineBuilder_methods, swig_NodeStateMachineBuilder_attributes, &swig_NodeStateMachineBuilder_Sf_SwigStatic, swig_NodeStateMachineBuilder_meta, swig_NodeStateMachineBuilder_bases, swig_NodeStateMachineBuilder_base_names };

static int _wrap_new_ParticleEmitter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::ParticleEmitter",0,0)
  result = (jli::ParticleEmitter *)new jli::ParticleEmitter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__ParticleEmitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::ParticleEmitter *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::ParticleEmitter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::ParticleEmitter::ParticleEmitter",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_ParticleEmitter",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::ParticleEmitter *)new jli::ParticleEmitter((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__ParticleEmitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = 0 ;
  jli::ParticleEmitter *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::ParticleEmitter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::ParticleEmitter::ParticleEmitter",1,"jli::ParticleEmitter const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("new_ParticleEmitter",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  result = (jli::ParticleEmitter *)new jli::ParticleEmitter((jli::ParticleEmitter const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__ParticleEmitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleEmitter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParticleEmitter__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParticleEmitter__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleEmitter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::ParticleEmitter::ParticleEmitter()\n"
    "    jli::ParticleEmitter::ParticleEmitter(jli::AbstractBuilder const &)\n"
    "    jli::ParticleEmitter::ParticleEmitter(jli::ParticleEmitter const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleEmitter_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator new",1,"jli::ParticleEmitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_new",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator delete",1,"jli::ParticleEmitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_delete",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitter_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator new",1,"jli::ParticleEmitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitter::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_new",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ParticleEmitter_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleEmitter_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ParticleEmitter_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleEmitter_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::ParticleEmitter::operator new(size_t)\n"
    "    jli::ParticleEmitter::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleEmitter_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator delete",1,"jli::ParticleEmitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitter::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_delete",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitter_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ParticleEmitter_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleEmitter_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ParticleEmitter_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleEmitter_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::ParticleEmitter::operator delete(void *)\n"
    "    jli::ParticleEmitter::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleEmitter_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator new[]",1,"jli::ParticleEmitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_new_array",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator delete[]",1,"jli::ParticleEmitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_delete_array",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitter_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator new[]",1,"jli::ParticleEmitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitter::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_new_array",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ParticleEmitter_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleEmitter_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ParticleEmitter_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleEmitter_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::ParticleEmitter::operator new[](size_t)\n"
    "    jli::ParticleEmitter::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleEmitter_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::operator delete[]",1,"jli::ParticleEmitter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitter::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitter::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_operator_delete_array",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitter_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ParticleEmitter_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleEmitter_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__ParticleEmitter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ParticleEmitter_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleEmitter_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::ParticleEmitter::operator delete[](void *)\n"
    "    jli::ParticleEmitter::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleEmitter_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::ParticleEmitter::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::calculateSerializeBufferSize",1,"jli::ParticleEmitter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  result = (s32)((jli::ParticleEmitter const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::serialize",1,"jli::ParticleEmitter const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitter::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitter::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_serialize",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitter_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("ParticleEmitter_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::ParticleEmitter const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitter::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::getClassName",1,"jli::ParticleEmitter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_getClassName",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  result = (char *)((jli::ParticleEmitter const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitter_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ParticleEmitter::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitter::getType",1,"jli::ParticleEmitter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitter,0))){
    SWIG_fail_ptr("ParticleEmitter_getType",1,SWIGTYPE_p_jli__ParticleEmitter);
  }
  
  result = (u32)((jli::ParticleEmitter const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleEmitter(void *obj) {
jli::ParticleEmitter *arg1 = (jli::ParticleEmitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleEmitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleEmitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleEmitter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleEmitter_methods[]= {
    { "operator_new", _wrap_ParticleEmitter_operator_new},
    { "operator_delete", _wrap_ParticleEmitter_operator_delete},
    { "operator_new_array", _wrap_ParticleEmitter_operator_new_array},
    { "operator_delete_array", _wrap_ParticleEmitter_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_ParticleEmitter_calculateSerializeBufferSize},
    { "serialize", _wrap_ParticleEmitter_serialize},
    { "getClassName", _wrap_ParticleEmitter_getClassName},
    { "getType", _wrap_ParticleEmitter_getType},
    {0,0}
};
static swig_lua_method swig_ParticleEmitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleEmitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleEmitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleEmitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleEmitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleEmitter_Sf_SwigStatic = {
    "ParticleEmitter",
    swig_ParticleEmitter_Sf_SwigStatic_methods,
    swig_ParticleEmitter_Sf_SwigStatic_attributes,
    swig_ParticleEmitter_Sf_SwigStatic_constants,
    swig_ParticleEmitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleEmitter_bases[] = {0};
static const char *swig_ParticleEmitter_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleEmitter = { "ParticleEmitter", "ParticleEmitter", &SWIGTYPE_p_jli__ParticleEmitter,_proxy__wrap_new_ParticleEmitter, swig_delete_ParticleEmitter, swig_ParticleEmitter_methods, swig_ParticleEmitter_attributes, &swig_ParticleEmitter_Sf_SwigStatic, swig_ParticleEmitter_meta, swig_ParticleEmitter_bases, swig_ParticleEmitter_base_names };

static int _wrap_ParticleEmitterBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitterBuilder *arg1 = (jli::ParticleEmitterBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::ParticleEmitterBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitterBuilder::calculateSerializeBufferSize",1,"jli::ParticleEmitterBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitterBuilder,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__ParticleEmitterBuilder);
  }
  
  result = (s32)((jli::ParticleEmitterBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitterBuilder *arg1 = (jli::ParticleEmitterBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitterBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitterBuilder::serialize",1,"jli::ParticleEmitterBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ParticleEmitterBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ParticleEmitterBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitterBuilder,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_serialize",1,SWIGTYPE_p_jli__ParticleEmitterBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ParticleEmitterBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::ParticleEmitterBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitterBuilder *arg1 = (jli::ParticleEmitterBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ParticleEmitterBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitterBuilder::getObjectType",1,"jli::ParticleEmitterBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitterBuilder,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_getObjectType",1,SWIGTYPE_p_jli__ParticleEmitterBuilder);
  }
  
  result = (u32)((jli::ParticleEmitterBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitterBuilder *arg1 = (jli::ParticleEmitterBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::ParticleEmitterBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitterBuilder::getClassName",1,"jli::ParticleEmitterBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitterBuilder,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_getClassName",1,SWIGTYPE_p_jli__ParticleEmitterBuilder);
  }
  
  result = (char *)((jli::ParticleEmitterBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ParticleEmitterBuilder *arg1 = (jli::ParticleEmitterBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ParticleEmitterBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ParticleEmitterBuilder::getType",1,"jli::ParticleEmitterBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ParticleEmitterBuilder,0))){
    SWIG_fail_ptr("ParticleEmitterBuilder_getType",1,SWIGTYPE_p_jli__ParticleEmitterBuilder);
  }
  
  result = (u32)((jli::ParticleEmitterBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_ParticleEmitterBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleEmitterBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_ParticleEmitterBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_ParticleEmitterBuilder_serialize},
    { "getObjectType", _wrap_ParticleEmitterBuilder_getObjectType},
    { "getClassName", _wrap_ParticleEmitterBuilder_getClassName},
    { "getType", _wrap_ParticleEmitterBuilder_getType},
    {0,0}
};
static swig_lua_method swig_ParticleEmitterBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleEmitterBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleEmitterBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleEmitterBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleEmitterBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleEmitterBuilder_Sf_SwigStatic = {
    "ParticleEmitterBuilder",
    swig_ParticleEmitterBuilder_Sf_SwigStatic_methods,
    swig_ParticleEmitterBuilder_Sf_SwigStatic_attributes,
    swig_ParticleEmitterBuilder_Sf_SwigStatic_constants,
    swig_ParticleEmitterBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleEmitterBuilder_bases[] = {0};
static const char *swig_ParticleEmitterBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleEmitterBuilder = { "ParticleEmitterBuilder", "ParticleEmitterBuilder", &SWIGTYPE_p_jli__ParticleEmitterBuilder,0,0, swig_ParticleEmitterBuilder_methods, swig_ParticleEmitterBuilder_attributes, &swig_ParticleEmitterBuilder_Sf_SwigStatic, swig_ParticleEmitterBuilder_meta, swig_ParticleEmitterBuilder_bases, swig_ParticleEmitterBuilder_base_names };

static int _wrap_new_PhysicsContact__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::PhysicsContact",0,0)
  result = (jli::PhysicsContact *)new jli::PhysicsContact();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsContact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsContact__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::PhysicsContact *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::PhysicsContact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsContact::PhysicsContact",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_PhysicsContact",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::PhysicsContact *)new jli::PhysicsContact((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsContact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsContact__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = 0 ;
  jli::PhysicsContact *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::PhysicsContact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsContact::PhysicsContact",1,"jli::PhysicsContact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("new_PhysicsContact",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  result = (jli::PhysicsContact *)new jli::PhysicsContact((jli::PhysicsContact const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsContact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsContact(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsContact__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsContact__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsContact__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsContact'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsContact::PhysicsContact()\n"
    "    jli::PhysicsContact::PhysicsContact(jli::AbstractBuilder const &)\n"
    "    jli::PhysicsContact::PhysicsContact(jli::PhysicsContact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContact_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator new",1,"jli::PhysicsContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_new",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator delete",1,"jli::PhysicsContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_delete",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContact_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator new",1,"jli::PhysicsContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContact::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_new",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContact_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsContact_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContact_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContact_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsContact::operator new(size_t)\n"
    "    jli::PhysicsContact::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContact_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator delete",1,"jli::PhysicsContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContact::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_delete",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContact_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContact_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsContact_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContact_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContact_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsContact::operator delete(void *)\n"
    "    jli::PhysicsContact::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContact_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator new[]",1,"jli::PhysicsContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_new_array",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator delete[]",1,"jli::PhysicsContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContact_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator new[]",1,"jli::PhysicsContact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContact::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_new_array",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContact_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsContact_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContact_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContact_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsContact::operator new[](size_t)\n"
    "    jli::PhysicsContact::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContact_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::operator delete[]",1,"jli::PhysicsContact *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContact::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContact::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContact_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContact_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsContact_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsContact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContact_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContact_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsContact::operator delete[](void *)\n"
    "    jli::PhysicsContact::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContact_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsContact::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::calculateSerializeBufferSize",1,"jli::PhysicsContact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  result = (s32)((jli::PhysicsContact const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::serialize",1,"jli::PhysicsContact const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContact::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContact::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_serialize",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContact_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsContact_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsContact const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContact::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::getClassName",1,"jli::PhysicsContact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_getClassName",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  result = (char *)((jli::PhysicsContact const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContact_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContact *arg1 = (jli::PhysicsContact *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsContact::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContact::getType",1,"jli::PhysicsContact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContact,0))){
    SWIG_fail_ptr("PhysicsContact_getType",1,SWIGTYPE_p_jli__PhysicsContact);
  }
  
  result = (u32)((jli::PhysicsContact const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsContact(void *obj) {
jli::PhysicsContact *arg1 = (jli::PhysicsContact *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsContact(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsContact);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsContact_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsContact_methods[]= {
    { "operator_new", _wrap_PhysicsContact_operator_new},
    { "operator_delete", _wrap_PhysicsContact_operator_delete},
    { "operator_new_array", _wrap_PhysicsContact_operator_new_array},
    { "operator_delete_array", _wrap_PhysicsContact_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_PhysicsContact_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsContact_serialize},
    { "getClassName", _wrap_PhysicsContact_getClassName},
    { "getType", _wrap_PhysicsContact_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsContact_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsContact_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsContact_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsContact_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsContact_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsContact_Sf_SwigStatic = {
    "PhysicsContact",
    swig_PhysicsContact_Sf_SwigStatic_methods,
    swig_PhysicsContact_Sf_SwigStatic_attributes,
    swig_PhysicsContact_Sf_SwigStatic_constants,
    swig_PhysicsContact_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsContact_bases[] = {0};
static const char *swig_PhysicsContact_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsContact = { "PhysicsContact", "PhysicsContact", &SWIGTYPE_p_jli__PhysicsContact,_proxy__wrap_new_PhysicsContact, swig_delete_PhysicsContact, swig_PhysicsContact_methods, swig_PhysicsContact_attributes, &swig_PhysicsContact_Sf_SwigStatic, swig_PhysicsContact_meta, swig_PhysicsContact_bases, swig_PhysicsContact_base_names };

static int _wrap_PhysicsContactBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContactBuilder *arg1 = (jli::PhysicsContactBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsContactBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContactBuilder::calculateSerializeBufferSize",1,"jli::PhysicsContactBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContactBuilder,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsContactBuilder);
  }
  
  result = (s32)((jli::PhysicsContactBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContactBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContactBuilder *arg1 = (jli::PhysicsContactBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsContactBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContactBuilder::serialize",1,"jli::PhysicsContactBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsContactBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsContactBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContactBuilder,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_serialize",1,SWIGTYPE_p_jli__PhysicsContactBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsContactBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsContactBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContactBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContactBuilder *arg1 = (jli::PhysicsContactBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsContactBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContactBuilder::getObjectType",1,"jli::PhysicsContactBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContactBuilder,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_getObjectType",1,SWIGTYPE_p_jli__PhysicsContactBuilder);
  }
  
  result = (u32)((jli::PhysicsContactBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContactBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContactBuilder *arg1 = (jli::PhysicsContactBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsContactBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContactBuilder::getClassName",1,"jli::PhysicsContactBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContactBuilder,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_getClassName",1,SWIGTYPE_p_jli__PhysicsContactBuilder);
  }
  
  result = (char *)((jli::PhysicsContactBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContactBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsContactBuilder *arg1 = (jli::PhysicsContactBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsContactBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsContactBuilder::getType",1,"jli::PhysicsContactBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsContactBuilder,0))){
    SWIG_fail_ptr("PhysicsContactBuilder_getType",1,SWIGTYPE_p_jli__PhysicsContactBuilder);
  }
  
  result = (u32)((jli::PhysicsContactBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_PhysicsContactBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsContactBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_PhysicsContactBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsContactBuilder_serialize},
    { "getObjectType", _wrap_PhysicsContactBuilder_getObjectType},
    { "getClassName", _wrap_PhysicsContactBuilder_getClassName},
    { "getType", _wrap_PhysicsContactBuilder_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsContactBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsContactBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsContactBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsContactBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsContactBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsContactBuilder_Sf_SwigStatic = {
    "PhysicsContactBuilder",
    swig_PhysicsContactBuilder_Sf_SwigStatic_methods,
    swig_PhysicsContactBuilder_Sf_SwigStatic_attributes,
    swig_PhysicsContactBuilder_Sf_SwigStatic_constants,
    swig_PhysicsContactBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsContactBuilder_bases[] = {0};
static const char *swig_PhysicsContactBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsContactBuilder = { "PhysicsContactBuilder", "PhysicsContactBuilder", &SWIGTYPE_p_jli__PhysicsContactBuilder,0,0, swig_PhysicsContactBuilder_methods, swig_PhysicsContactBuilder_attributes, &swig_PhysicsContactBuilder_Sf_SwigStatic, swig_PhysicsContactBuilder_meta, swig_PhysicsContactBuilder_bases, swig_PhysicsContactBuilder_base_names };

static int _wrap_new_PhysicsField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::PhysicsField",0,0)
  result = (jli::PhysicsField *)new jli::PhysicsField();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsField,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::PhysicsField *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::PhysicsField",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsField::PhysicsField",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_PhysicsField",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::PhysicsField *)new jli::PhysicsField((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsField,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsField__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = 0 ;
  jli::PhysicsField *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::PhysicsField",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsField::PhysicsField",1,"jli::PhysicsField const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("new_PhysicsField",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  result = (jli::PhysicsField *)new jli::PhysicsField((jli::PhysicsField const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsField,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsField(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsField__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsField__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsField__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsField::PhysicsField()\n"
    "    jli::PhysicsField::PhysicsField(jli::AbstractBuilder const &)\n"
    "    jli::PhysicsField::PhysicsField(jli::PhysicsField const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsField_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator new",1,"jli::PhysicsField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsField::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_new",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator delete",1,"jli::PhysicsField *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsField::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_delete",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsField_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator new",1,"jli::PhysicsField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsField::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsField::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_new",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsField_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsField_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsField_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsField_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsField::operator new(size_t)\n"
    "    jli::PhysicsField::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsField_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator delete",1,"jli::PhysicsField *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsField::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsField::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_delete",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsField_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsField_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsField_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsField_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsField_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsField::operator delete(void *)\n"
    "    jli::PhysicsField::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsField_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator new[]",1,"jli::PhysicsField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsField::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_new_array",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator delete[]",1,"jli::PhysicsField *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsField::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsField_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator new[]",1,"jli::PhysicsField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsField::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsField::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_new_array",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsField_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsField_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsField_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsField_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsField::operator new[](size_t)\n"
    "    jli::PhysicsField::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsField_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::operator delete[]",1,"jli::PhysicsField *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsField::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsField::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsField_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsField_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsField_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsField, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsField_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsField_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsField::operator delete[](void *)\n"
    "    jli::PhysicsField::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsField_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsField::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::calculateSerializeBufferSize",1,"jli::PhysicsField const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  result = (s32)((jli::PhysicsField const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::serialize",1,"jli::PhysicsField const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsField::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsField::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_serialize",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsField_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsField_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsField const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsField::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::getClassName",1,"jli::PhysicsField const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_getClassName",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  result = (char *)((jli::PhysicsField const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsField_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsField *arg1 = (jli::PhysicsField *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsField::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsField::getType",1,"jli::PhysicsField const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsField,0))){
    SWIG_fail_ptr("PhysicsField_getType",1,SWIGTYPE_p_jli__PhysicsField);
  }
  
  result = (u32)((jli::PhysicsField const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsField(void *obj) {
jli::PhysicsField *arg1 = (jli::PhysicsField *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsField(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsField);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsField_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsField_methods[]= {
    { "operator_new", _wrap_PhysicsField_operator_new},
    { "operator_delete", _wrap_PhysicsField_operator_delete},
    { "operator_new_array", _wrap_PhysicsField_operator_new_array},
    { "operator_delete_array", _wrap_PhysicsField_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_PhysicsField_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsField_serialize},
    { "getClassName", _wrap_PhysicsField_getClassName},
    { "getType", _wrap_PhysicsField_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsField_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsField_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsField_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsField_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsField_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsField_Sf_SwigStatic = {
    "PhysicsField",
    swig_PhysicsField_Sf_SwigStatic_methods,
    swig_PhysicsField_Sf_SwigStatic_attributes,
    swig_PhysicsField_Sf_SwigStatic_constants,
    swig_PhysicsField_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsField_bases[] = {0};
static const char *swig_PhysicsField_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsField = { "PhysicsField", "PhysicsField", &SWIGTYPE_p_jli__PhysicsField,_proxy__wrap_new_PhysicsField, swig_delete_PhysicsField, swig_PhysicsField_methods, swig_PhysicsField_attributes, &swig_PhysicsField_Sf_SwigStatic, swig_PhysicsField_meta, swig_PhysicsField_bases, swig_PhysicsField_base_names };

static int _wrap_PhysicsFieldBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsFieldBuilder *arg1 = (jli::PhysicsFieldBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsFieldBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsFieldBuilder::calculateSerializeBufferSize",1,"jli::PhysicsFieldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsFieldBuilder,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsFieldBuilder);
  }
  
  result = (s32)((jli::PhysicsFieldBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsFieldBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsFieldBuilder *arg1 = (jli::PhysicsFieldBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsFieldBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsFieldBuilder::serialize",1,"jli::PhysicsFieldBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsFieldBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsFieldBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsFieldBuilder,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_serialize",1,SWIGTYPE_p_jli__PhysicsFieldBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsFieldBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsFieldBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsFieldBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsFieldBuilder *arg1 = (jli::PhysicsFieldBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsFieldBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsFieldBuilder::getObjectType",1,"jli::PhysicsFieldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsFieldBuilder,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_getObjectType",1,SWIGTYPE_p_jli__PhysicsFieldBuilder);
  }
  
  result = (u32)((jli::PhysicsFieldBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsFieldBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsFieldBuilder *arg1 = (jli::PhysicsFieldBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsFieldBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsFieldBuilder::getClassName",1,"jli::PhysicsFieldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsFieldBuilder,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_getClassName",1,SWIGTYPE_p_jli__PhysicsFieldBuilder);
  }
  
  result = (char *)((jli::PhysicsFieldBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsFieldBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsFieldBuilder *arg1 = (jli::PhysicsFieldBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsFieldBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsFieldBuilder::getType",1,"jli::PhysicsFieldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsFieldBuilder,0))){
    SWIG_fail_ptr("PhysicsFieldBuilder_getType",1,SWIGTYPE_p_jli__PhysicsFieldBuilder);
  }
  
  result = (u32)((jli::PhysicsFieldBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_PhysicsFieldBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsFieldBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_PhysicsFieldBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsFieldBuilder_serialize},
    { "getObjectType", _wrap_PhysicsFieldBuilder_getObjectType},
    { "getClassName", _wrap_PhysicsFieldBuilder_getClassName},
    { "getType", _wrap_PhysicsFieldBuilder_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsFieldBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsFieldBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsFieldBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsFieldBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsFieldBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsFieldBuilder_Sf_SwigStatic = {
    "PhysicsFieldBuilder",
    swig_PhysicsFieldBuilder_Sf_SwigStatic_methods,
    swig_PhysicsFieldBuilder_Sf_SwigStatic_attributes,
    swig_PhysicsFieldBuilder_Sf_SwigStatic_constants,
    swig_PhysicsFieldBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsFieldBuilder_bases[] = {0};
static const char *swig_PhysicsFieldBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsFieldBuilder = { "PhysicsFieldBuilder", "PhysicsFieldBuilder", &SWIGTYPE_p_jli__PhysicsFieldBuilder,0,0, swig_PhysicsFieldBuilder_methods, swig_PhysicsFieldBuilder_attributes, &swig_PhysicsFieldBuilder_Sf_SwigStatic, swig_PhysicsFieldBuilder_meta, swig_PhysicsFieldBuilder_bases, swig_PhysicsFieldBuilder_base_names };

static int _wrap_new_PhysicsShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::PhysicsShape",0,0)
  result = (jli::PhysicsShape *)new jli::PhysicsShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::PhysicsShape *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::PhysicsShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsShape::PhysicsShape",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_PhysicsShape",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::PhysicsShape *)new jli::PhysicsShape((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = 0 ;
  jli::PhysicsShape *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::PhysicsShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsShape::PhysicsShape",1,"jli::PhysicsShape const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("new_PhysicsShape",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  result = (jli::PhysicsShape *)new jli::PhysicsShape((jli::PhysicsShape const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsShape(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsShape__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsShape__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsShape__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsShape::PhysicsShape()\n"
    "    jli::PhysicsShape::PhysicsShape(jli::AbstractBuilder const &)\n"
    "    jli::PhysicsShape::PhysicsShape(jli::PhysicsShape const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsShape_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator new",1,"jli::PhysicsShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_new",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator delete",1,"jli::PhysicsShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_delete",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShape_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator new",1,"jli::PhysicsShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShape::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_new",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsShape_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsShape_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsShape_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsShape_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsShape::operator new(size_t)\n"
    "    jli::PhysicsShape::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsShape_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator delete",1,"jli::PhysicsShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShape::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_delete",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShape_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsShape_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsShape_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsShape_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsShape_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsShape::operator delete(void *)\n"
    "    jli::PhysicsShape::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsShape_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator new[]",1,"jli::PhysicsShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_new_array",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator delete[]",1,"jli::PhysicsShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShape_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator new[]",1,"jli::PhysicsShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShape::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_new_array",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsShape_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsShape_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsShape_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsShape_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsShape::operator new[](size_t)\n"
    "    jli::PhysicsShape::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsShape_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::operator delete[]",1,"jli::PhysicsShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShape::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShape::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShape_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsShape_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsShape_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsShape_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsShape_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsShape::operator delete[](void *)\n"
    "    jli::PhysicsShape::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::calculateSerializeBufferSize",1,"jli::PhysicsShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  result = (s32)((jli::PhysicsShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::serialize",1,"jli::PhysicsShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_serialize",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsShape const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShape::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::getClassName",1,"jli::PhysicsShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_getClassName",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  result = (char *)((jli::PhysicsShape const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShape_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShape *arg1 = (jli::PhysicsShape *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsShape::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShape::getType",1,"jli::PhysicsShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShape,0))){
    SWIG_fail_ptr("PhysicsShape_getType",1,SWIGTYPE_p_jli__PhysicsShape);
  }
  
  result = (u32)((jli::PhysicsShape const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsShape(void *obj) {
jli::PhysicsShape *arg1 = (jli::PhysicsShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsShape_methods[]= {
    { "operator_new", _wrap_PhysicsShape_operator_new},
    { "operator_delete", _wrap_PhysicsShape_operator_delete},
    { "operator_new_array", _wrap_PhysicsShape_operator_new_array},
    { "operator_delete_array", _wrap_PhysicsShape_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_PhysicsShape_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsShape_serialize},
    { "getClassName", _wrap_PhysicsShape_getClassName},
    { "getType", _wrap_PhysicsShape_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsShape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsShape_Sf_SwigStatic = {
    "PhysicsShape",
    swig_PhysicsShape_Sf_SwigStatic_methods,
    swig_PhysicsShape_Sf_SwigStatic_attributes,
    swig_PhysicsShape_Sf_SwigStatic_constants,
    swig_PhysicsShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsShape_bases[] = {0};
static const char *swig_PhysicsShape_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsShape = { "PhysicsShape", "PhysicsShape", &SWIGTYPE_p_jli__PhysicsShape,_proxy__wrap_new_PhysicsShape, swig_delete_PhysicsShape, swig_PhysicsShape_methods, swig_PhysicsShape_attributes, &swig_PhysicsShape_Sf_SwigStatic, swig_PhysicsShape_meta, swig_PhysicsShape_bases, swig_PhysicsShape_base_names };

static int _wrap_PhysicsShapeBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShapeBuilder *arg1 = (jli::PhysicsShapeBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsShapeBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShapeBuilder::calculateSerializeBufferSize",1,"jli::PhysicsShapeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShapeBuilder,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsShapeBuilder);
  }
  
  result = (s32)((jli::PhysicsShapeBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShapeBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShapeBuilder *arg1 = (jli::PhysicsShapeBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsShapeBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShapeBuilder::serialize",1,"jli::PhysicsShapeBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsShapeBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsShapeBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShapeBuilder,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_serialize",1,SWIGTYPE_p_jli__PhysicsShapeBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsShapeBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsShapeBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShapeBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShapeBuilder *arg1 = (jli::PhysicsShapeBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsShapeBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShapeBuilder::getObjectType",1,"jli::PhysicsShapeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShapeBuilder,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_getObjectType",1,SWIGTYPE_p_jli__PhysicsShapeBuilder);
  }
  
  result = (u32)((jli::PhysicsShapeBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShapeBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShapeBuilder *arg1 = (jli::PhysicsShapeBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsShapeBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShapeBuilder::getClassName",1,"jli::PhysicsShapeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShapeBuilder,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_getClassName",1,SWIGTYPE_p_jli__PhysicsShapeBuilder);
  }
  
  result = (char *)((jli::PhysicsShapeBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsShapeBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsShapeBuilder *arg1 = (jli::PhysicsShapeBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsShapeBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsShapeBuilder::getType",1,"jli::PhysicsShapeBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsShapeBuilder,0))){
    SWIG_fail_ptr("PhysicsShapeBuilder_getType",1,SWIGTYPE_p_jli__PhysicsShapeBuilder);
  }
  
  result = (u32)((jli::PhysicsShapeBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_PhysicsShapeBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsShapeBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_PhysicsShapeBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsShapeBuilder_serialize},
    { "getObjectType", _wrap_PhysicsShapeBuilder_getObjectType},
    { "getClassName", _wrap_PhysicsShapeBuilder_getClassName},
    { "getType", _wrap_PhysicsShapeBuilder_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsShapeBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsShapeBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsShapeBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsShapeBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsShapeBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsShapeBuilder_Sf_SwigStatic = {
    "PhysicsShapeBuilder",
    swig_PhysicsShapeBuilder_Sf_SwigStatic_methods,
    swig_PhysicsShapeBuilder_Sf_SwigStatic_attributes,
    swig_PhysicsShapeBuilder_Sf_SwigStatic_constants,
    swig_PhysicsShapeBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsShapeBuilder_bases[] = {0};
static const char *swig_PhysicsShapeBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsShapeBuilder = { "PhysicsShapeBuilder", "PhysicsShapeBuilder", &SWIGTYPE_p_jli__PhysicsShapeBuilder,0,0, swig_PhysicsShapeBuilder_methods, swig_PhysicsShapeBuilder_attributes, &swig_PhysicsShapeBuilder_Sf_SwigStatic, swig_PhysicsShapeBuilder_meta, swig_PhysicsShapeBuilder_bases, swig_PhysicsShapeBuilder_base_names };

static int _wrap_new_PhysicsWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::PhysicsWorld",0,0)
  result = (jli::PhysicsWorld *)new jli::PhysicsWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::PhysicsWorld *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::PhysicsWorld",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsWorld::PhysicsWorld",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_PhysicsWorld",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::PhysicsWorld *)new jli::PhysicsWorld((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorld__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = 0 ;
  jli::PhysicsWorld *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::PhysicsWorld",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::PhysicsWorld::PhysicsWorld",1,"jli::PhysicsWorld const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("new_PhysicsWorld",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  result = (jli::PhysicsWorld *)new jli::PhysicsWorld((jli::PhysicsWorld const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__PhysicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorld(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsWorld__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsWorld__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsWorld__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsWorld::PhysicsWorld()\n"
    "    jli::PhysicsWorld::PhysicsWorld(jli::AbstractBuilder const &)\n"
    "    jli::PhysicsWorld::PhysicsWorld(jli::PhysicsWorld const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorld_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator new",1,"jli::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_new",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator delete",1,"jli::PhysicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_delete",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorld_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator new",1,"jli::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorld::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_new",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsWorld_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorld_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsWorld_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsWorld_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsWorld::operator new(size_t)\n"
    "    jli::PhysicsWorld::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorld_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator delete",1,"jli::PhysicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorld::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_delete",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorld_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsWorld_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsWorld_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsWorld_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsWorld_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsWorld::operator delete(void *)\n"
    "    jli::PhysicsWorld::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorld_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator new[]",1,"jli::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_new_array",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator delete[]",1,"jli::PhysicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorld_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator new[]",1,"jli::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorld::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_new_array",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsWorld_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorld_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsWorld_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsWorld_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsWorld::operator new[](size_t)\n"
    "    jli::PhysicsWorld::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorld_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::operator delete[]",1,"jli::PhysicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorld::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorld::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_operator_delete_array",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorld_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsWorld_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsWorld_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__PhysicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsWorld_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsWorld_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::PhysicsWorld::operator delete[](void *)\n"
    "    jli::PhysicsWorld::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorld_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsWorld::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::calculateSerializeBufferSize",1,"jli::PhysicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  result = (s32)((jli::PhysicsWorld const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::serialize",1,"jli::PhysicsWorld const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorld::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorld::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_serialize",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorld_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsWorld_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsWorld const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorld::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::getClassName",1,"jli::PhysicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_getClassName",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  result = (char *)((jli::PhysicsWorld const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsWorld::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorld::getType",1,"jli::PhysicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_getType",1,SWIGTYPE_p_jli__PhysicsWorld);
  }
  
  result = (u32)((jli::PhysicsWorld const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsWorld(void *obj) {
jli::PhysicsWorld *arg1 = (jli::PhysicsWorld *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsWorld(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsWorld);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsWorld_methods[]= {
    { "operator_new", _wrap_PhysicsWorld_operator_new},
    { "operator_delete", _wrap_PhysicsWorld_operator_delete},
    { "operator_new_array", _wrap_PhysicsWorld_operator_new_array},
    { "operator_delete_array", _wrap_PhysicsWorld_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_PhysicsWorld_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsWorld_serialize},
    { "getClassName", _wrap_PhysicsWorld_getClassName},
    { "getType", _wrap_PhysicsWorld_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsWorld_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsWorld_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsWorld_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsWorld_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsWorld_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsWorld_Sf_SwigStatic = {
    "PhysicsWorld",
    swig_PhysicsWorld_Sf_SwigStatic_methods,
    swig_PhysicsWorld_Sf_SwigStatic_attributes,
    swig_PhysicsWorld_Sf_SwigStatic_constants,
    swig_PhysicsWorld_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsWorld_bases[] = {0};
static const char *swig_PhysicsWorld_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsWorld = { "PhysicsWorld", "PhysicsWorld", &SWIGTYPE_p_jli__PhysicsWorld,_proxy__wrap_new_PhysicsWorld, swig_delete_PhysicsWorld, swig_PhysicsWorld_methods, swig_PhysicsWorld_attributes, &swig_PhysicsWorld_Sf_SwigStatic, swig_PhysicsWorld_meta, swig_PhysicsWorld_bases, swig_PhysicsWorld_base_names };

static int _wrap_PhysicsWorldBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorldBuilder *arg1 = (jli::PhysicsWorldBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::PhysicsWorldBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorldBuilder::calculateSerializeBufferSize",1,"jli::PhysicsWorldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorldBuilder,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__PhysicsWorldBuilder);
  }
  
  result = (s32)((jli::PhysicsWorldBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorldBuilder *arg1 = (jli::PhysicsWorldBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorldBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorldBuilder::serialize",1,"jli::PhysicsWorldBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::PhysicsWorldBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::PhysicsWorldBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorldBuilder,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_serialize",1,SWIGTYPE_p_jli__PhysicsWorldBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PhysicsWorldBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::PhysicsWorldBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorldBuilder *arg1 = (jli::PhysicsWorldBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsWorldBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorldBuilder::getObjectType",1,"jli::PhysicsWorldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorldBuilder,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_getObjectType",1,SWIGTYPE_p_jli__PhysicsWorldBuilder);
  }
  
  result = (u32)((jli::PhysicsWorldBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorldBuilder *arg1 = (jli::PhysicsWorldBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::PhysicsWorldBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorldBuilder::getClassName",1,"jli::PhysicsWorldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorldBuilder,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_getClassName",1,SWIGTYPE_p_jli__PhysicsWorldBuilder);
  }
  
  result = (char *)((jli::PhysicsWorldBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::PhysicsWorldBuilder *arg1 = (jli::PhysicsWorldBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::PhysicsWorldBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::PhysicsWorldBuilder::getType",1,"jli::PhysicsWorldBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__PhysicsWorldBuilder,0))){
    SWIG_fail_ptr("PhysicsWorldBuilder_getType",1,SWIGTYPE_p_jli__PhysicsWorldBuilder);
  }
  
  result = (u32)((jli::PhysicsWorldBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_PhysicsWorldBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsWorldBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_PhysicsWorldBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_PhysicsWorldBuilder_serialize},
    { "getObjectType", _wrap_PhysicsWorldBuilder_getObjectType},
    { "getClassName", _wrap_PhysicsWorldBuilder_getClassName},
    { "getType", _wrap_PhysicsWorldBuilder_getType},
    {0,0}
};
static swig_lua_method swig_PhysicsWorldBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsWorldBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsWorldBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsWorldBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsWorldBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsWorldBuilder_Sf_SwigStatic = {
    "PhysicsWorldBuilder",
    swig_PhysicsWorldBuilder_Sf_SwigStatic_methods,
    swig_PhysicsWorldBuilder_Sf_SwigStatic_attributes,
    swig_PhysicsWorldBuilder_Sf_SwigStatic_constants,
    swig_PhysicsWorldBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsWorldBuilder_bases[] = {0};
static const char *swig_PhysicsWorldBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsWorldBuilder = { "PhysicsWorldBuilder", "PhysicsWorldBuilder", &SWIGTYPE_p_jli__PhysicsWorldBuilder,0,0, swig_PhysicsWorldBuilder_methods, swig_PhysicsWorldBuilder_attributes, &swig_PhysicsWorldBuilder_Sf_SwigStatic, swig_PhysicsWorldBuilder_meta, swig_PhysicsWorldBuilder_bases, swig_PhysicsWorldBuilder_base_names };

static int _wrap_new_Resource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::Resource",0,0)
  result = (jli::Resource *)new jli::Resource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Resource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Resource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Resource *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::Resource",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Resource::Resource",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Resource",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Resource *)new jli::Resource((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Resource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Resource__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = 0 ;
  jli::Resource *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::Resource",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Resource::Resource",1,"jli::Resource const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("new_Resource",1,SWIGTYPE_p_jli__Resource);
  }
  
  result = (jli::Resource *)new jli::Resource((jli::Resource const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Resource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Resource(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Resource__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Resource__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Resource__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Resource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Resource::Resource()\n"
    "    jli::Resource::Resource(jli::AbstractBuilder const &)\n"
    "    jli::Resource::Resource(jli::Resource const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Resource_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator new",1,"jli::Resource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Resource::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_new",1,SWIGTYPE_p_jli__Resource);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Resource::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator delete",1,"jli::Resource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Resource::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_delete",1,SWIGTYPE_p_jli__Resource);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Resource_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator new",1,"jli::Resource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Resource::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Resource::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_new",1,SWIGTYPE_p_jli__Resource);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Resource_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Resource_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Resource_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resource_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Resource::operator new(size_t)\n"
    "    jli::Resource::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Resource_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Resource::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator delete",1,"jli::Resource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Resource::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Resource::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_delete",1,SWIGTYPE_p_jli__Resource);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Resource_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Resource_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Resource_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Resource_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resource_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Resource::operator delete(void *)\n"
    "    jli::Resource::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Resource_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator new[]",1,"jli::Resource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Resource::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_new_array",1,SWIGTYPE_p_jli__Resource);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Resource::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator delete[]",1,"jli::Resource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Resource::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_delete_array",1,SWIGTYPE_p_jli__Resource);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Resource_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator new[]",1,"jli::Resource *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Resource::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Resource::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_new_array",1,SWIGTYPE_p_jli__Resource);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Resource_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Resource_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Resource_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resource_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Resource::operator new[](size_t)\n"
    "    jli::Resource::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Resource_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Resource::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::operator delete[]",1,"jli::Resource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Resource::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Resource::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_operator_delete_array",1,SWIGTYPE_p_jli__Resource);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Resource_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Resource_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Resource_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Resource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Resource_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resource_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Resource::operator delete[](void *)\n"
    "    jli::Resource::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Resource_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Resource::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::calculateSerializeBufferSize",1,"jli::Resource const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Resource);
  }
  
  result = (s32)((jli::Resource const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Resource::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::serialize",1,"jli::Resource const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Resource::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Resource::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_serialize",1,SWIGTYPE_p_jli__Resource);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Resource_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Resource_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Resource const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Resource::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::getClassName",1,"jli::Resource const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_getClassName",1,SWIGTYPE_p_jli__Resource);
  }
  
  result = (char *)((jli::Resource const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resource_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Resource *arg1 = (jli::Resource *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Resource::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Resource::getType",1,"jli::Resource const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Resource,0))){
    SWIG_fail_ptr("Resource_getType",1,SWIGTYPE_p_jli__Resource);
  }
  
  result = (u32)((jli::Resource const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Resource(void *obj) {
jli::Resource *arg1 = (jli::Resource *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resource_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Resource_methods[]= {
    { "operator_new", _wrap_Resource_operator_new},
    { "operator_delete", _wrap_Resource_operator_delete},
    { "operator_new_array", _wrap_Resource_operator_new_array},
    { "operator_delete_array", _wrap_Resource_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Resource_calculateSerializeBufferSize},
    { "serialize", _wrap_Resource_serialize},
    { "getClassName", _wrap_Resource_getClassName},
    { "getType", _wrap_Resource_getType},
    {0,0}
};
static swig_lua_method swig_Resource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Resource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resource_Sf_SwigStatic = {
    "Resource",
    swig_Resource_Sf_SwigStatic_methods,
    swig_Resource_Sf_SwigStatic_attributes,
    swig_Resource_Sf_SwigStatic_constants,
    swig_Resource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resource_bases[] = {0};
static const char *swig_Resource_base_names[] = {0};
static swig_lua_class _wrap_class_Resource = { "Resource", "Resource", &SWIGTYPE_p_jli__Resource,_proxy__wrap_new_Resource, swig_delete_Resource, swig_Resource_methods, swig_Resource_attributes, &swig_Resource_Sf_SwigStatic, swig_Resource_meta, swig_Resource_bases, swig_Resource_base_names };

static int _wrap_ResourceBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ResourceBuilder *arg1 = (jli::ResourceBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::ResourceBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ResourceBuilder::calculateSerializeBufferSize",1,"jli::ResourceBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ResourceBuilder,0))){
    SWIG_fail_ptr("ResourceBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__ResourceBuilder);
  }
  
  result = (s32)((jli::ResourceBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::ResourceBuilder *arg1 = (jli::ResourceBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::ResourceBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ResourceBuilder::serialize",1,"jli::ResourceBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::ResourceBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::ResourceBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ResourceBuilder,0))){
    SWIG_fail_ptr("ResourceBuilder_serialize",1,SWIGTYPE_p_jli__ResourceBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ResourceBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("ResourceBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::ResourceBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ResourceBuilder *arg1 = (jli::ResourceBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ResourceBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ResourceBuilder::getObjectType",1,"jli::ResourceBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ResourceBuilder,0))){
    SWIG_fail_ptr("ResourceBuilder_getObjectType",1,SWIGTYPE_p_jli__ResourceBuilder);
  }
  
  result = (u32)((jli::ResourceBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::ResourceBuilder *arg1 = (jli::ResourceBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::ResourceBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ResourceBuilder::getClassName",1,"jli::ResourceBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ResourceBuilder,0))){
    SWIG_fail_ptr("ResourceBuilder_getClassName",1,SWIGTYPE_p_jli__ResourceBuilder);
  }
  
  result = (char *)((jli::ResourceBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::ResourceBuilder *arg1 = (jli::ResourceBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::ResourceBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::ResourceBuilder::getType",1,"jli::ResourceBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__ResourceBuilder,0))){
    SWIG_fail_ptr("ResourceBuilder_getType",1,SWIGTYPE_p_jli__ResourceBuilder);
  }
  
  result = (u32)((jli::ResourceBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_ResourceBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResourceBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_ResourceBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_ResourceBuilder_serialize},
    { "getObjectType", _wrap_ResourceBuilder_getObjectType},
    { "getClassName", _wrap_ResourceBuilder_getClassName},
    { "getType", _wrap_ResourceBuilder_getType},
    {0,0}
};
static swig_lua_method swig_ResourceBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResourceBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResourceBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResourceBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ResourceBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResourceBuilder_Sf_SwigStatic = {
    "ResourceBuilder",
    swig_ResourceBuilder_Sf_SwigStatic_methods,
    swig_ResourceBuilder_Sf_SwigStatic_attributes,
    swig_ResourceBuilder_Sf_SwigStatic_constants,
    swig_ResourceBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResourceBuilder_bases[] = {0};
static const char *swig_ResourceBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ResourceBuilder = { "ResourceBuilder", "ResourceBuilder", &SWIGTYPE_p_jli__ResourceBuilder,0,0, swig_ResourceBuilder_methods, swig_ResourceBuilder_attributes, &swig_ResourceBuilder_Sf_SwigStatic, swig_ResourceBuilder_meta, swig_ResourceBuilder_bases, swig_ResourceBuilder_base_names };

static int _wrap_new_RigidPhysicsBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::RigidPhysicsBody",0,0)
  result = (jli::RigidPhysicsBody *)new jli::RigidPhysicsBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__RigidPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidPhysicsBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::RigidPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::RigidPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::RigidPhysicsBody",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_RigidPhysicsBody",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::RigidPhysicsBody *)new jli::RigidPhysicsBody((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__RigidPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidPhysicsBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = 0 ;
  jli::RigidPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::RigidPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::RigidPhysicsBody",1,"jli::RigidPhysicsBody const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("new_RigidPhysicsBody",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  result = (jli::RigidPhysicsBody *)new jli::RigidPhysicsBody((jli::RigidPhysicsBody const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__RigidPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidPhysicsBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RigidPhysicsBody__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RigidPhysicsBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RigidPhysicsBody__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RigidPhysicsBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::RigidPhysicsBody::RigidPhysicsBody()\n"
    "    jli::RigidPhysicsBody::RigidPhysicsBody(jli::AbstractBuilder const &)\n"
    "    jli::RigidPhysicsBody::RigidPhysicsBody(jli::RigidPhysicsBody const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidPhysicsBody_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new",1,"jli::RigidPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_new",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete",1,"jli::RigidPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new",1,"jli::RigidPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_new",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RigidPhysicsBody_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidPhysicsBody_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RigidPhysicsBody_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidPhysicsBody_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::RigidPhysicsBody::operator new(size_t)\n"
    "    jli::RigidPhysicsBody::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidPhysicsBody_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete",1,"jli::RigidPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBody_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RigidPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidPhysicsBody_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RigidPhysicsBody_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidPhysicsBody_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::RigidPhysicsBody::operator delete(void *)\n"
    "    jli::RigidPhysicsBody::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidPhysicsBody_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new[]",1,"jli::RigidPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete[]",1,"jli::RigidPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new[]",1,"jli::RigidPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBody::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RigidPhysicsBody_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidPhysicsBody_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RigidPhysicsBody_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidPhysicsBody_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::RigidPhysicsBody::operator new[](size_t)\n"
    "    jli::RigidPhysicsBody::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidPhysicsBody_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete[]",1,"jli::RigidPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBody::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBody_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RigidPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RigidPhysicsBody_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__RigidPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RigidPhysicsBody_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidPhysicsBody_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::RigidPhysicsBody::operator delete[](void *)\n"
    "    jli::RigidPhysicsBody::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidPhysicsBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::calculateSerializeBufferSize",1,"jli::RigidPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  result = (s32)((jli::RigidPhysicsBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::serialize",1,"jli::RigidPhysicsBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_serialize",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("RigidPhysicsBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::RigidPhysicsBody const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::getClassName",1,"jli::RigidPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_getClassName",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  result = (char *)((jli::RigidPhysicsBody const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBody_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::RigidPhysicsBody::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBody::getType",1,"jli::RigidPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBody,0))){
    SWIG_fail_ptr("RigidPhysicsBody_getType",1,SWIGTYPE_p_jli__RigidPhysicsBody);
  }
  
  result = (u32)((jli::RigidPhysicsBody const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RigidPhysicsBody(void *obj) {
jli::RigidPhysicsBody *arg1 = (jli::RigidPhysicsBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_RigidPhysicsBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RigidPhysicsBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RigidPhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidPhysicsBody_methods[]= {
    { "operator_new", _wrap_RigidPhysicsBody_operator_new},
    { "operator_delete", _wrap_RigidPhysicsBody_operator_delete},
    { "operator_new_array", _wrap_RigidPhysicsBody_operator_new_array},
    { "operator_delete_array", _wrap_RigidPhysicsBody_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_RigidPhysicsBody_calculateSerializeBufferSize},
    { "serialize", _wrap_RigidPhysicsBody_serialize},
    { "getClassName", _wrap_RigidPhysicsBody_getClassName},
    { "getType", _wrap_RigidPhysicsBody_getType},
    {0,0}
};
static swig_lua_method swig_RigidPhysicsBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RigidPhysicsBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RigidPhysicsBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RigidPhysicsBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RigidPhysicsBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RigidPhysicsBody_Sf_SwigStatic = {
    "RigidPhysicsBody",
    swig_RigidPhysicsBody_Sf_SwigStatic_methods,
    swig_RigidPhysicsBody_Sf_SwigStatic_attributes,
    swig_RigidPhysicsBody_Sf_SwigStatic_constants,
    swig_RigidPhysicsBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RigidPhysicsBody_bases[] = {0};
static const char *swig_RigidPhysicsBody_base_names[] = {0};
static swig_lua_class _wrap_class_RigidPhysicsBody = { "RigidPhysicsBody", "RigidPhysicsBody", &SWIGTYPE_p_jli__RigidPhysicsBody,_proxy__wrap_new_RigidPhysicsBody, swig_delete_RigidPhysicsBody, swig_RigidPhysicsBody_methods, swig_RigidPhysicsBody_attributes, &swig_RigidPhysicsBody_Sf_SwigStatic, swig_RigidPhysicsBody_meta, swig_RigidPhysicsBody_bases, swig_RigidPhysicsBody_base_names };

static int _wrap_RigidPhysicsBodyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBodyBuilder *arg1 = (jli::RigidPhysicsBodyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::RigidPhysicsBodyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::calculateSerializeBufferSize",1,"jli::RigidPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder);
  }
  
  result = (s32)((jli::RigidPhysicsBodyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBodyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBodyBuilder *arg1 = (jli::RigidPhysicsBodyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBodyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::serialize",1,"jli::RigidPhysicsBodyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_serialize",1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RigidPhysicsBodyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::RigidPhysicsBodyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBodyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBodyBuilder *arg1 = (jli::RigidPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::RigidPhysicsBodyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::getObjectType",1,"jli::RigidPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_getObjectType",1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::RigidPhysicsBodyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBodyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBodyBuilder *arg1 = (jli::RigidPhysicsBodyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::RigidPhysicsBodyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::getClassName",1,"jli::RigidPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_getClassName",1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder);
  }
  
  result = (char *)((jli::RigidPhysicsBodyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidPhysicsBodyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::RigidPhysicsBodyBuilder *arg1 = (jli::RigidPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::RigidPhysicsBodyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::RigidPhysicsBodyBuilder::getType",1,"jli::RigidPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("RigidPhysicsBodyBuilder_getType",1,SWIGTYPE_p_jli__RigidPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::RigidPhysicsBodyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_RigidPhysicsBodyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidPhysicsBodyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_RigidPhysicsBodyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_RigidPhysicsBodyBuilder_serialize},
    { "getObjectType", _wrap_RigidPhysicsBodyBuilder_getObjectType},
    { "getClassName", _wrap_RigidPhysicsBodyBuilder_getClassName},
    { "getType", _wrap_RigidPhysicsBodyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_RigidPhysicsBodyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RigidPhysicsBodyBuilder_Sf_SwigStatic = {
    "RigidPhysicsBodyBuilder",
    swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_methods,
    swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_attributes,
    swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_constants,
    swig_RigidPhysicsBodyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RigidPhysicsBodyBuilder_bases[] = {0};
static const char *swig_RigidPhysicsBodyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_RigidPhysicsBodyBuilder = { "RigidPhysicsBodyBuilder", "RigidPhysicsBodyBuilder", &SWIGTYPE_p_jli__RigidPhysicsBodyBuilder,0,0, swig_RigidPhysicsBodyBuilder_methods, swig_RigidPhysicsBodyBuilder_attributes, &swig_RigidPhysicsBodyBuilder_Sf_SwigStatic, swig_RigidPhysicsBodyBuilder_meta, swig_RigidPhysicsBodyBuilder_bases, swig_RigidPhysicsBodyBuilder_base_names };

static int _wrap_new_Scene__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::Scene",0,0)
  result = (jli::Scene *)new jli::Scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Scene__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Scene *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::Scene",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Scene::Scene",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Scene",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Scene *)new jli::Scene((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Scene__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = 0 ;
  jli::Scene *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::Scene",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Scene::Scene",1,"jli::Scene const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("new_Scene",1,SWIGTYPE_p_jli__Scene);
  }
  
  result = (jli::Scene *)new jli::Scene((jli::Scene const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Scene(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Scene__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Scene__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Scene__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Scene'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Scene::Scene()\n"
    "    jli::Scene::Scene(jli::AbstractBuilder const &)\n"
    "    jli::Scene::Scene(jli::Scene const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator new",1,"jli::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Scene::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_new",1,SWIGTYPE_p_jli__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Scene::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator delete",1,"jli::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Scene::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_delete",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Scene_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator new",1,"jli::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Scene::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Scene::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_new",1,SWIGTYPE_p_jli__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Scene_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Scene::operator new(size_t)\n"
    "    jli::Scene::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Scene::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator delete",1,"jli::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Scene::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Scene::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_delete",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Scene_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Scene_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Scene::operator delete(void *)\n"
    "    jli::Scene::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator new[]",1,"jli::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Scene::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_new_array",1,SWIGTYPE_p_jli__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Scene::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator delete[]",1,"jli::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Scene::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_delete_array",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Scene_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator new[]",1,"jli::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Scene::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Scene::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_new_array",1,SWIGTYPE_p_jli__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Scene_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Scene::operator new[](size_t)\n"
    "    jli::Scene::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Scene::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::operator delete[]",1,"jli::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Scene::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Scene::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_operator_delete_array",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Scene_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Scene_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Scene::operator delete[](void *)\n"
    "    jli::Scene::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Scene::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::calculateSerializeBufferSize",1,"jli::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Scene);
  }
  
  result = (s32)((jli::Scene const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Scene::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::serialize",1,"jli::Scene const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Scene::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Scene::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_serialize",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Scene_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Scene_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Scene const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::getClassName",1,"jli::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_getClassName",1,SWIGTYPE_p_jli__Scene);
  }
  
  result = (char *)((jli::Scene const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Scene::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::getType",1,"jli::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_getType",1,SWIGTYPE_p_jli__Scene);
  }
  
  result = (u32)((jli::Scene const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::Scene::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::setName",1,"jli::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::Scene::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_setName",1,SWIGTYPE_p_jli__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Scene *arg1 = (jli::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Scene::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Scene::getName",1,"jli::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("Scene_getName",1,SWIGTYPE_p_jli__Scene);
  }
  
  result = (char *)((jli::Scene const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
jli::Scene *arg1 = (jli::Scene *) obj;
delete arg1;
}
static int _proxy__wrap_new_Scene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Scene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Scene_methods[]= {
    { "operator_new", _wrap_Scene_operator_new},
    { "operator_delete", _wrap_Scene_operator_delete},
    { "operator_new_array", _wrap_Scene_operator_new_array},
    { "operator_delete_array", _wrap_Scene_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Scene_calculateSerializeBufferSize},
    { "serialize", _wrap_Scene_serialize},
    { "getClassName", _wrap_Scene_getClassName},
    { "getType", _wrap_Scene_getType},
    { "setName", _wrap_Scene_setName},
    { "getName", _wrap_Scene_getName},
    {0,0}
};
static swig_lua_method swig_Scene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Scene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Scene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Scene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Scene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Scene_Sf_SwigStatic = {
    "Scene",
    swig_Scene_Sf_SwigStatic_methods,
    swig_Scene_Sf_SwigStatic_attributes,
    swig_Scene_Sf_SwigStatic_constants,
    swig_Scene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Scene_bases[] = {0};
static const char *swig_Scene_base_names[] = {0};
static swig_lua_class _wrap_class_Scene = { "Scene", "Scene", &SWIGTYPE_p_jli__Scene,_proxy__wrap_new_Scene, swig_delete_Scene, swig_Scene_methods, swig_Scene_attributes, &swig_Scene_Sf_SwigStatic, swig_Scene_meta, swig_Scene_bases, swig_Scene_base_names };

static int _wrap_SceneBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneBuilder *arg1 = (jli::SceneBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SceneBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneBuilder::calculateSerializeBufferSize",1,"jli::SceneBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneBuilder,0))){
    SWIG_fail_ptr("SceneBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SceneBuilder);
  }
  
  result = (s32)((jli::SceneBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneBuilder *arg1 = (jli::SceneBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SceneBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneBuilder::serialize",1,"jli::SceneBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneBuilder,0))){
    SWIG_fail_ptr("SceneBuilder_serialize",1,SWIGTYPE_p_jli__SceneBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SceneBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SceneBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneBuilder *arg1 = (jli::SceneBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneBuilder::getObjectType",1,"jli::SceneBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneBuilder,0))){
    SWIG_fail_ptr("SceneBuilder_getObjectType",1,SWIGTYPE_p_jli__SceneBuilder);
  }
  
  result = (u32)((jli::SceneBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneBuilder *arg1 = (jli::SceneBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneBuilder::getClassName",1,"jli::SceneBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneBuilder,0))){
    SWIG_fail_ptr("SceneBuilder_getClassName",1,SWIGTYPE_p_jli__SceneBuilder);
  }
  
  result = (char *)((jli::SceneBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneBuilder *arg1 = (jli::SceneBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneBuilder::getType",1,"jli::SceneBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneBuilder,0))){
    SWIG_fail_ptr("SceneBuilder_getType",1,SWIGTYPE_p_jli__SceneBuilder);
  }
  
  result = (u32)((jli::SceneBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SceneBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_SceneBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_SceneBuilder_serialize},
    { "getObjectType", _wrap_SceneBuilder_getObjectType},
    { "getClassName", _wrap_SceneBuilder_getClassName},
    { "getType", _wrap_SceneBuilder_getType},
    {0,0}
};
static swig_lua_method swig_SceneBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneBuilder_Sf_SwigStatic = {
    "SceneBuilder",
    swig_SceneBuilder_Sf_SwigStatic_methods,
    swig_SceneBuilder_Sf_SwigStatic_attributes,
    swig_SceneBuilder_Sf_SwigStatic_constants,
    swig_SceneBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneBuilder_bases[] = {0};
static const char *swig_SceneBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SceneBuilder = { "SceneBuilder", "SceneBuilder", &SWIGTYPE_p_jli__SceneBuilder,0,0, swig_SceneBuilder_methods, swig_SceneBuilder_attributes, &swig_SceneBuilder_Sf_SwigStatic, swig_SceneBuilder_meta, swig_SceneBuilder_bases, swig_SceneBuilder_base_names };

static int _wrap_new_SceneState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::SceneState",0,0)
  result = (jli::SceneState *)new jli::SceneState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::SceneState *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::SceneState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SceneState::SceneState",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_SceneState",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::SceneState *)new jli::SceneState((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = 0 ;
  jli::SceneState *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::SceneState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SceneState::SceneState",1,"jli::SceneState const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("new_SceneState",1,SWIGTYPE_p_jli__SceneState);
  }
  
  result = (jli::SceneState *)new jli::SceneState((jli::SceneState const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneState(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SceneState__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneState__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneState__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SceneState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneState::SceneState()\n"
    "    jli::SceneState::SceneState(jli::AbstractBuilder const &)\n"
    "    jli::SceneState::SceneState(jli::SceneState const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneState_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator new",1,"jli::SceneState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneState::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_new",1,SWIGTYPE_p_jli__SceneState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator delete",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_delete",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneState_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator new",1,"jli::SceneState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneState::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneState::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_new",1,SWIGTYPE_p_jli__SceneState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneState_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneState_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneState_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneState_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneState::operator new(size_t)\n"
    "    jli::SceneState::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneState_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator delete",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneState::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_delete",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneState_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneState_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneState_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneState_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneState_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneState::operator delete(void *)\n"
    "    jli::SceneState::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneState_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator new[]",1,"jli::SceneState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneState::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_new_array",1,SWIGTYPE_p_jli__SceneState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator delete[]",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_delete_array",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneState_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator new[]",1,"jli::SceneState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneState::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneState::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_new_array",1,SWIGTYPE_p_jli__SceneState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneState_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneState_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneState_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneState_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneState::operator new[](size_t)\n"
    "    jli::SceneState::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneState_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::operator delete[]",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneState::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_operator_delete_array",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneState_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneState_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneState_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneState_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneState_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneState::operator delete[](void *)\n"
    "    jli::SceneState::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneState_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SceneState::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::calculateSerializeBufferSize",1,"jli::SceneState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SceneState);
  }
  
  result = (s32)((jli::SceneState const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::serialize",1,"jli::SceneState const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneState::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_serialize",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneState_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SceneState_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SceneState const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::getClassName",1,"jli::SceneState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_getClassName",1,SWIGTYPE_p_jli__SceneState);
  }
  
  result = (char *)((jli::SceneState const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneState::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::getType",1,"jli::SceneState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_getType",1,SWIGTYPE_p_jli__SceneState);
  }
  
  result = (u32)((jli::SceneState const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_enter(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  jli::Scene *arg2 = (jli::Scene *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::enter",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::enter",2,"jli::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_enter",1,SWIGTYPE_p_jli__SceneState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("SceneState_enter",2,SWIGTYPE_p_jli__Scene);
  }
  
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_update(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  jli::Scene *arg2 = (jli::Scene *) 0 ;
  f32 arg3 ;
  
  SWIG_check_num_args("jli::SceneState::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::update",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::update",2,"jli::Scene *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jli::SceneState::update",3,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_update",1,SWIGTYPE_p_jli__SceneState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("SceneState_update",2,SWIGTYPE_p_jli__Scene);
  }
  
  arg3 = (f32)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_exit(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  jli::Scene *arg2 = (jli::Scene *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::exit",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::exit",2,"jli::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_exit",1,SWIGTYPE_p_jli__SceneState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("SceneState_exit",2,SWIGTYPE_p_jli__Scene);
  }
  
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  jli::Scene *arg2 = (jli::Scene *) 0 ;
  jli::Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::SceneState::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::onMessage",1,"jli::SceneState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneState::onMessage",2,"jli::Scene *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jli::SceneState::onMessage",3,"jli::Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_onMessage",1,SWIGTYPE_p_jli__SceneState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("SceneState_onMessage",2,SWIGTYPE_p_jli__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("SceneState_onMessage",3,SWIGTYPE_p_jli__Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(jli::Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::SceneState::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::setName",1,"jli::SceneState *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::SceneState::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_setName",1,SWIGTYPE_p_jli__SceneState);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneState_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneState *arg1 = (jli::SceneState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneState::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneState::getName",1,"jli::SceneState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneState,0))){
    SWIG_fail_ptr("SceneState_getName",1,SWIGTYPE_p_jli__SceneState);
  }
  
  result = (char *)((jli::SceneState const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneState(void *obj) {
jli::SceneState *arg1 = (jli::SceneState *) obj;
delete arg1;
}
static int _proxy__wrap_new_SceneState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SceneState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SceneState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneState_methods[]= {
    { "operator_new", _wrap_SceneState_operator_new},
    { "operator_delete", _wrap_SceneState_operator_delete},
    { "operator_new_array", _wrap_SceneState_operator_new_array},
    { "operator_delete_array", _wrap_SceneState_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_SceneState_calculateSerializeBufferSize},
    { "serialize", _wrap_SceneState_serialize},
    { "getClassName", _wrap_SceneState_getClassName},
    { "getType", _wrap_SceneState_getType},
    { "enter", _wrap_SceneState_enter},
    { "update", _wrap_SceneState_update},
    { "exit", _wrap_SceneState_exit},
    { "onMessage", _wrap_SceneState_onMessage},
    { "setName", _wrap_SceneState_setName},
    { "getName", _wrap_SceneState_getName},
    {0,0}
};
static swig_lua_method swig_SceneState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneState_Sf_SwigStatic = {
    "SceneState",
    swig_SceneState_Sf_SwigStatic_methods,
    swig_SceneState_Sf_SwigStatic_attributes,
    swig_SceneState_Sf_SwigStatic_constants,
    swig_SceneState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneState_bases[] = {0};
static const char *swig_SceneState_base_names[] = {0};
static swig_lua_class _wrap_class_SceneState = { "SceneState", "SceneState", &SWIGTYPE_p_jli__SceneState,_proxy__wrap_new_SceneState, swig_delete_SceneState, swig_SceneState_methods, swig_SceneState_attributes, &swig_SceneState_Sf_SwigStatic, swig_SceneState_meta, swig_SceneState_bases, swig_SceneState_base_names };

static int _wrap_SceneStateBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateBuilder *arg1 = (jli::SceneStateBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SceneStateBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateBuilder::calculateSerializeBufferSize",1,"jli::SceneStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateBuilder,0))){
    SWIG_fail_ptr("SceneStateBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SceneStateBuilder);
  }
  
  result = (s32)((jli::SceneStateBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateBuilder *arg1 = (jli::SceneStateBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateBuilder::serialize",1,"jli::SceneStateBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateBuilder,0))){
    SWIG_fail_ptr("SceneStateBuilder_serialize",1,SWIGTYPE_p_jli__SceneStateBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SceneStateBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SceneStateBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateBuilder *arg1 = (jli::SceneStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneStateBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateBuilder::getObjectType",1,"jli::SceneStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateBuilder,0))){
    SWIG_fail_ptr("SceneStateBuilder_getObjectType",1,SWIGTYPE_p_jli__SceneStateBuilder);
  }
  
  result = (u32)((jli::SceneStateBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateBuilder *arg1 = (jli::SceneStateBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateBuilder::getClassName",1,"jli::SceneStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateBuilder,0))){
    SWIG_fail_ptr("SceneStateBuilder_getClassName",1,SWIGTYPE_p_jli__SceneStateBuilder);
  }
  
  result = (char *)((jli::SceneStateBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateBuilder *arg1 = (jli::SceneStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneStateBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateBuilder::getType",1,"jli::SceneStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateBuilder,0))){
    SWIG_fail_ptr("SceneStateBuilder_getType",1,SWIGTYPE_p_jli__SceneStateBuilder);
  }
  
  result = (u32)((jli::SceneStateBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SceneStateBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneStateBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_SceneStateBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_SceneStateBuilder_serialize},
    { "getObjectType", _wrap_SceneStateBuilder_getObjectType},
    { "getClassName", _wrap_SceneStateBuilder_getClassName},
    { "getType", _wrap_SceneStateBuilder_getType},
    {0,0}
};
static swig_lua_method swig_SceneStateBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneStateBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneStateBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneStateBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneStateBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneStateBuilder_Sf_SwigStatic = {
    "SceneStateBuilder",
    swig_SceneStateBuilder_Sf_SwigStatic_methods,
    swig_SceneStateBuilder_Sf_SwigStatic_attributes,
    swig_SceneStateBuilder_Sf_SwigStatic_constants,
    swig_SceneStateBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneStateBuilder_bases[] = {0};
static const char *swig_SceneStateBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SceneStateBuilder = { "SceneStateBuilder", "SceneStateBuilder", &SWIGTYPE_p_jli__SceneStateBuilder,0,0, swig_SceneStateBuilder_methods, swig_SceneStateBuilder_attributes, &swig_SceneStateBuilder_Sf_SwigStatic, swig_SceneStateBuilder_meta, swig_SceneStateBuilder_bases, swig_SceneStateBuilder_base_names };

static int _wrap_new_SceneStateMachine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::SceneStateMachine",0,0)
  result = (jli::SceneStateMachine *)new jli::SceneStateMachine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneStateMachine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::SceneStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::SceneStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SceneStateMachine::SceneStateMachine",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_SceneStateMachine",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::SceneStateMachine *)new jli::SceneStateMachine((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneStateMachine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = 0 ;
  jli::SceneStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::SceneStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SceneStateMachine::SceneStateMachine",1,"jli::SceneStateMachine const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("new_SceneStateMachine",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  result = (jli::SceneStateMachine *)new jli::SceneStateMachine((jli::SceneStateMachine const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SceneStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneStateMachine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SceneStateMachine__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneStateMachine__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneStateMachine__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SceneStateMachine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneStateMachine::SceneStateMachine()\n"
    "    jli::SceneStateMachine::SceneStateMachine(jli::AbstractBuilder const &)\n"
    "    jli::SceneStateMachine::SceneStateMachine(jli::SceneStateMachine const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneStateMachine_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator new",1,"jli::SceneStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_new",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator delete",1,"jli::SceneStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_delete",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachine_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator new",1,"jli::SceneStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachine::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_new",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneStateMachine_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneStateMachine_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneStateMachine_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneStateMachine_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneStateMachine::operator new(size_t)\n"
    "    jli::SceneStateMachine::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneStateMachine_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator delete",1,"jli::SceneStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachine::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_delete",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachine_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneStateMachine_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneStateMachine_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneStateMachine_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneStateMachine_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneStateMachine::operator delete(void *)\n"
    "    jli::SceneStateMachine::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneStateMachine_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator new[]",1,"jli::SceneStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_new_array",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator delete[]",1,"jli::SceneStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator new[]",1,"jli::SceneStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachine::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_new_array",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneStateMachine_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneStateMachine_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneStateMachine_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneStateMachine_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneStateMachine::operator new[](size_t)\n"
    "    jli::SceneStateMachine::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneStateMachine_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::operator delete[]",1,"jli::SceneStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachine::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachine::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachine_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SceneStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneStateMachine_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SceneStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SceneStateMachine_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneStateMachine_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SceneStateMachine::operator delete[](void *)\n"
    "    jli::SceneStateMachine::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneStateMachine_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SceneStateMachine::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::calculateSerializeBufferSize",1,"jli::SceneStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  result = (s32)((jli::SceneStateMachine const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::serialize",1,"jli::SceneStateMachine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachine::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachine::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_serialize",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachine_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SceneStateMachine_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SceneStateMachine const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachine::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::getClassName",1,"jli::SceneStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_getClassName",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  result = (char *)((jli::SceneStateMachine const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachine_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneStateMachine::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachine::getType",1,"jli::SceneStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachine,0))){
    SWIG_fail_ptr("SceneStateMachine_getType",1,SWIGTYPE_p_jli__SceneStateMachine);
  }
  
  result = (u32)((jli::SceneStateMachine const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneStateMachine(void *obj) {
jli::SceneStateMachine *arg1 = (jli::SceneStateMachine *) obj;
delete arg1;
}
static int _proxy__wrap_new_SceneStateMachine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SceneStateMachine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SceneStateMachine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneStateMachine_methods[]= {
    { "operator_new", _wrap_SceneStateMachine_operator_new},
    { "operator_delete", _wrap_SceneStateMachine_operator_delete},
    { "operator_new_array", _wrap_SceneStateMachine_operator_new_array},
    { "operator_delete_array", _wrap_SceneStateMachine_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_SceneStateMachine_calculateSerializeBufferSize},
    { "serialize", _wrap_SceneStateMachine_serialize},
    { "getClassName", _wrap_SceneStateMachine_getClassName},
    { "getType", _wrap_SceneStateMachine_getType},
    {0,0}
};
static swig_lua_method swig_SceneStateMachine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneStateMachine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneStateMachine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneStateMachine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneStateMachine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneStateMachine_Sf_SwigStatic = {
    "SceneStateMachine",
    swig_SceneStateMachine_Sf_SwigStatic_methods,
    swig_SceneStateMachine_Sf_SwigStatic_attributes,
    swig_SceneStateMachine_Sf_SwigStatic_constants,
    swig_SceneStateMachine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneStateMachine_bases[] = {0};
static const char *swig_SceneStateMachine_base_names[] = {0};
static swig_lua_class _wrap_class_SceneStateMachine = { "SceneStateMachine", "SceneStateMachine", &SWIGTYPE_p_jli__SceneStateMachine,_proxy__wrap_new_SceneStateMachine, swig_delete_SceneStateMachine, swig_SceneStateMachine_methods, swig_SceneStateMachine_attributes, &swig_SceneStateMachine_Sf_SwigStatic, swig_SceneStateMachine_meta, swig_SceneStateMachine_bases, swig_SceneStateMachine_base_names };

static int _wrap_SceneStateMachineBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachineBuilder *arg1 = (jli::SceneStateMachineBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SceneStateMachineBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachineBuilder::calculateSerializeBufferSize",1,"jli::SceneStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachineBuilder,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SceneStateMachineBuilder);
  }
  
  result = (s32)((jli::SceneStateMachineBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachineBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachineBuilder *arg1 = (jli::SceneStateMachineBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachineBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachineBuilder::serialize",1,"jli::SceneStateMachineBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SceneStateMachineBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SceneStateMachineBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachineBuilder,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_serialize",1,SWIGTYPE_p_jli__SceneStateMachineBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SceneStateMachineBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SceneStateMachineBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachineBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachineBuilder *arg1 = (jli::SceneStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneStateMachineBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachineBuilder::getObjectType",1,"jli::SceneStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachineBuilder,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_getObjectType",1,SWIGTYPE_p_jli__SceneStateMachineBuilder);
  }
  
  result = (u32)((jli::SceneStateMachineBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachineBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachineBuilder *arg1 = (jli::SceneStateMachineBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SceneStateMachineBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachineBuilder::getClassName",1,"jli::SceneStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachineBuilder,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_getClassName",1,SWIGTYPE_p_jli__SceneStateMachineBuilder);
  }
  
  result = (char *)((jli::SceneStateMachineBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneStateMachineBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SceneStateMachineBuilder *arg1 = (jli::SceneStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SceneStateMachineBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SceneStateMachineBuilder::getType",1,"jli::SceneStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SceneStateMachineBuilder,0))){
    SWIG_fail_ptr("SceneStateMachineBuilder_getType",1,SWIGTYPE_p_jli__SceneStateMachineBuilder);
  }
  
  result = (u32)((jli::SceneStateMachineBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SceneStateMachineBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneStateMachineBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_SceneStateMachineBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_SceneStateMachineBuilder_serialize},
    { "getObjectType", _wrap_SceneStateMachineBuilder_getObjectType},
    { "getClassName", _wrap_SceneStateMachineBuilder_getClassName},
    { "getType", _wrap_SceneStateMachineBuilder_getType},
    {0,0}
};
static swig_lua_method swig_SceneStateMachineBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneStateMachineBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneStateMachineBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneStateMachineBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneStateMachineBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneStateMachineBuilder_Sf_SwigStatic = {
    "SceneStateMachineBuilder",
    swig_SceneStateMachineBuilder_Sf_SwigStatic_methods,
    swig_SceneStateMachineBuilder_Sf_SwigStatic_attributes,
    swig_SceneStateMachineBuilder_Sf_SwigStatic_constants,
    swig_SceneStateMachineBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneStateMachineBuilder_bases[] = {0};
static const char *swig_SceneStateMachineBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SceneStateMachineBuilder = { "SceneStateMachineBuilder", "SceneStateMachineBuilder", &SWIGTYPE_p_jli__SceneStateMachineBuilder,0,0, swig_SceneStateMachineBuilder_methods, swig_SceneStateMachineBuilder_attributes, &swig_SceneStateMachineBuilder_Sf_SwigStatic, swig_SceneStateMachineBuilder_meta, swig_SceneStateMachineBuilder_bases, swig_SceneStateMachineBuilder_base_names };

static int _wrap_new_SoftPhysicsBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::SoftPhysicsBody",0,0)
  result = (jli::SoftPhysicsBody *)new jli::SoftPhysicsBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SoftPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftPhysicsBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::SoftPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::SoftPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::SoftPhysicsBody",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_SoftPhysicsBody",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::SoftPhysicsBody *)new jli::SoftPhysicsBody((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SoftPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftPhysicsBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = 0 ;
  jli::SoftPhysicsBody *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::SoftPhysicsBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::SoftPhysicsBody",1,"jli::SoftPhysicsBody const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("new_SoftPhysicsBody",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  result = (jli::SoftPhysicsBody *)new jli::SoftPhysicsBody((jli::SoftPhysicsBody const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__SoftPhysicsBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftPhysicsBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoftPhysicsBody__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoftPhysicsBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoftPhysicsBody__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SoftPhysicsBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SoftPhysicsBody::SoftPhysicsBody()\n"
    "    jli::SoftPhysicsBody::SoftPhysicsBody(jli::AbstractBuilder const &)\n"
    "    jli::SoftPhysicsBody::SoftPhysicsBody(jli::SoftPhysicsBody const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftPhysicsBody_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new",1,"jli::SoftPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_new",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete",1,"jli::SoftPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new",1,"jli::SoftPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_new",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SoftPhysicsBody_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoftPhysicsBody_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SoftPhysicsBody_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftPhysicsBody_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SoftPhysicsBody::operator new(size_t)\n"
    "    jli::SoftPhysicsBody::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftPhysicsBody_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete",1,"jli::SoftPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_delete",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBody_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SoftPhysicsBody_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftPhysicsBody_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SoftPhysicsBody_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftPhysicsBody_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SoftPhysicsBody::operator delete(void *)\n"
    "    jli::SoftPhysicsBody::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftPhysicsBody_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new[]",1,"jli::SoftPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete[]",1,"jli::SoftPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new[]",1,"jli::SoftPhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBody::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_new_array",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SoftPhysicsBody_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoftPhysicsBody_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SoftPhysicsBody_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftPhysicsBody_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SoftPhysicsBody::operator new[](size_t)\n"
    "    jli::SoftPhysicsBody::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftPhysicsBody_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete[]",1,"jli::SoftPhysicsBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBody::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_operator_delete_array",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBody_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SoftPhysicsBody_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftPhysicsBody_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__SoftPhysicsBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SoftPhysicsBody_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftPhysicsBody_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::SoftPhysicsBody::operator delete[](void *)\n"
    "    jli::SoftPhysicsBody::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftPhysicsBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::calculateSerializeBufferSize",1,"jli::SoftPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  result = (s32)((jli::SoftPhysicsBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::serialize",1,"jli::SoftPhysicsBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_serialize",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SoftPhysicsBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SoftPhysicsBody const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::getClassName",1,"jli::SoftPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_getClassName",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  result = (char *)((jli::SoftPhysicsBody const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBody_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SoftPhysicsBody::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBody::getType",1,"jli::SoftPhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBody,0))){
    SWIG_fail_ptr("SoftPhysicsBody_getType",1,SWIGTYPE_p_jli__SoftPhysicsBody);
  }
  
  result = (u32)((jli::SoftPhysicsBody const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoftPhysicsBody(void *obj) {
jli::SoftPhysicsBody *arg1 = (jli::SoftPhysicsBody *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoftPhysicsBody(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoftPhysicsBody);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoftPhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftPhysicsBody_methods[]= {
    { "operator_new", _wrap_SoftPhysicsBody_operator_new},
    { "operator_delete", _wrap_SoftPhysicsBody_operator_delete},
    { "operator_new_array", _wrap_SoftPhysicsBody_operator_new_array},
    { "operator_delete_array", _wrap_SoftPhysicsBody_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_SoftPhysicsBody_calculateSerializeBufferSize},
    { "serialize", _wrap_SoftPhysicsBody_serialize},
    { "getClassName", _wrap_SoftPhysicsBody_getClassName},
    { "getType", _wrap_SoftPhysicsBody_getType},
    {0,0}
};
static swig_lua_method swig_SoftPhysicsBody_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoftPhysicsBody_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoftPhysicsBody_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoftPhysicsBody_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoftPhysicsBody_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoftPhysicsBody_Sf_SwigStatic = {
    "SoftPhysicsBody",
    swig_SoftPhysicsBody_Sf_SwigStatic_methods,
    swig_SoftPhysicsBody_Sf_SwigStatic_attributes,
    swig_SoftPhysicsBody_Sf_SwigStatic_constants,
    swig_SoftPhysicsBody_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoftPhysicsBody_bases[] = {0};
static const char *swig_SoftPhysicsBody_base_names[] = {0};
static swig_lua_class _wrap_class_SoftPhysicsBody = { "SoftPhysicsBody", "SoftPhysicsBody", &SWIGTYPE_p_jli__SoftPhysicsBody,_proxy__wrap_new_SoftPhysicsBody, swig_delete_SoftPhysicsBody, swig_SoftPhysicsBody_methods, swig_SoftPhysicsBody_attributes, &swig_SoftPhysicsBody_Sf_SwigStatic, swig_SoftPhysicsBody_meta, swig_SoftPhysicsBody_bases, swig_SoftPhysicsBody_base_names };

static int _wrap_SoftPhysicsBodyBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBodyBuilder *arg1 = (jli::SoftPhysicsBodyBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SoftPhysicsBodyBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::calculateSerializeBufferSize",1,"jli::SoftPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder);
  }
  
  result = (s32)((jli::SoftPhysicsBodyBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBodyBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBodyBuilder *arg1 = (jli::SoftPhysicsBodyBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBodyBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::serialize",1,"jli::SoftPhysicsBodyBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_serialize",1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoftPhysicsBodyBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SoftPhysicsBodyBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBodyBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBodyBuilder *arg1 = (jli::SoftPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SoftPhysicsBodyBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::getObjectType",1,"jli::SoftPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_getObjectType",1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::SoftPhysicsBodyBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBodyBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBodyBuilder *arg1 = (jli::SoftPhysicsBodyBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SoftPhysicsBodyBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::getClassName",1,"jli::SoftPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_getClassName",1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder);
  }
  
  result = (char *)((jli::SoftPhysicsBodyBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftPhysicsBodyBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoftPhysicsBodyBuilder *arg1 = (jli::SoftPhysicsBodyBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SoftPhysicsBodyBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoftPhysicsBodyBuilder::getType",1,"jli::SoftPhysicsBodyBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0))){
    SWIG_fail_ptr("SoftPhysicsBodyBuilder_getType",1,SWIGTYPE_p_jli__SoftPhysicsBodyBuilder);
  }
  
  result = (u32)((jli::SoftPhysicsBodyBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SoftPhysicsBodyBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftPhysicsBodyBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_SoftPhysicsBodyBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_SoftPhysicsBodyBuilder_serialize},
    { "getObjectType", _wrap_SoftPhysicsBodyBuilder_getObjectType},
    { "getClassName", _wrap_SoftPhysicsBodyBuilder_getClassName},
    { "getType", _wrap_SoftPhysicsBodyBuilder_getType},
    {0,0}
};
static swig_lua_method swig_SoftPhysicsBodyBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoftPhysicsBodyBuilder_Sf_SwigStatic = {
    "SoftPhysicsBodyBuilder",
    swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_methods,
    swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_attributes,
    swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_constants,
    swig_SoftPhysicsBodyBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoftPhysicsBodyBuilder_bases[] = {0};
static const char *swig_SoftPhysicsBodyBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SoftPhysicsBodyBuilder = { "SoftPhysicsBodyBuilder", "SoftPhysicsBodyBuilder", &SWIGTYPE_p_jli__SoftPhysicsBodyBuilder,0,0, swig_SoftPhysicsBodyBuilder_methods, swig_SoftPhysicsBodyBuilder_attributes, &swig_SoftPhysicsBodyBuilder_Sf_SwigStatic, swig_SoftPhysicsBodyBuilder_meta, swig_SoftPhysicsBodyBuilder_bases, swig_SoftPhysicsBodyBuilder_base_names };

static int _wrap_new_Sound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::Sound",0,0)
  result = (jli::Sound *)new jli::Sound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::Sound *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::Sound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Sound::Sound",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_Sound",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::Sound *)new jli::Sound((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = 0 ;
  jli::Sound *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::Sound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::Sound::Sound",1,"jli::Sound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("new_Sound",1,SWIGTYPE_p_jli__Sound);
  }
  
  result = (jli::Sound *)new jli::Sound((jli::Sound const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sound__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sound__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sound__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Sound::Sound()\n"
    "    jli::Sound::Sound(jli::AbstractBuilder const &)\n"
    "    jli::Sound::Sound(jli::Sound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator new",1,"jli::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Sound::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_new",1,SWIGTYPE_p_jli__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Sound::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator delete",1,"jli::Sound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Sound::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_delete",1,SWIGTYPE_p_jli__Sound);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Sound_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator new",1,"jli::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Sound::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Sound::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_new",1,SWIGTYPE_p_jli__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Sound_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Sound_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Sound::operator new(size_t)\n"
    "    jli::Sound::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Sound::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator delete",1,"jli::Sound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Sound::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Sound::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_delete",1,SWIGTYPE_p_jli__Sound);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Sound_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Sound_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sound_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Sound_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Sound::operator delete(void *)\n"
    "    jli::Sound::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator new[]",1,"jli::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Sound::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_new_array",1,SWIGTYPE_p_jli__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Sound::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator delete[]",1,"jli::Sound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Sound::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_delete_array",1,SWIGTYPE_p_jli__Sound);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Sound_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator new[]",1,"jli::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::Sound::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Sound::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_new_array",1,SWIGTYPE_p_jli__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Sound_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Sound_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Sound::operator new[](size_t)\n"
    "    jli::Sound::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::Sound::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::operator delete[]",1,"jli::Sound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Sound::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Sound::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_operator_delete_array",1,SWIGTYPE_p_jli__Sound);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Sound_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Sound_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sound_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Sound_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::Sound::operator delete[](void *)\n"
    "    jli::Sound::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::Sound::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::calculateSerializeBufferSize",1,"jli::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__Sound);
  }
  
  result = (s32)((jli::Sound const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::Sound::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::serialize",1,"jli::Sound const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::Sound::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::Sound::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_serialize",1,SWIGTYPE_p_jli__Sound);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Sound_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("Sound_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::Sound const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::Sound::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::getClassName",1,"jli::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_getClassName",1,SWIGTYPE_p_jli__Sound);
  }
  
  result = (char *)((jli::Sound const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::Sound *arg1 = (jli::Sound *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::Sound::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::Sound::getType",1,"jli::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__Sound,0))){
    SWIG_fail_ptr("Sound_getType",1,SWIGTYPE_p_jli__Sound);
  }
  
  result = (u32)((jli::Sound const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sound(void *obj) {
jli::Sound *arg1 = (jli::Sound *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sound(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sound);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sound_methods[]= {
    { "operator_new", _wrap_Sound_operator_new},
    { "operator_delete", _wrap_Sound_operator_delete},
    { "operator_new_array", _wrap_Sound_operator_new_array},
    { "operator_delete_array", _wrap_Sound_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_Sound_calculateSerializeBufferSize},
    { "serialize", _wrap_Sound_serialize},
    { "getClassName", _wrap_Sound_getClassName},
    { "getType", _wrap_Sound_getType},
    {0,0}
};
static swig_lua_method swig_Sound_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sound_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sound_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sound_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sound_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sound_Sf_SwigStatic = {
    "Sound",
    swig_Sound_Sf_SwigStatic_methods,
    swig_Sound_Sf_SwigStatic_attributes,
    swig_Sound_Sf_SwigStatic_constants,
    swig_Sound_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sound_bases[] = {0};
static const char *swig_Sound_base_names[] = {0};
static swig_lua_class _wrap_class_Sound = { "Sound", "Sound", &SWIGTYPE_p_jli__Sound,_proxy__wrap_new_Sound, swig_delete_Sound, swig_Sound_methods, swig_Sound_attributes, &swig_Sound_Sf_SwigStatic, swig_Sound_meta, swig_Sound_bases, swig_Sound_base_names };

static int _wrap_SoundBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoundBuilder *arg1 = (jli::SoundBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::SoundBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoundBuilder::calculateSerializeBufferSize",1,"jli::SoundBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoundBuilder,0))){
    SWIG_fail_ptr("SoundBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__SoundBuilder);
  }
  
  result = (s32)((jli::SoundBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoundBuilder *arg1 = (jli::SoundBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::SoundBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoundBuilder::serialize",1,"jli::SoundBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::SoundBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::SoundBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoundBuilder,0))){
    SWIG_fail_ptr("SoundBuilder_serialize",1,SWIGTYPE_p_jli__SoundBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SoundBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("SoundBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::SoundBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoundBuilder *arg1 = (jli::SoundBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SoundBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoundBuilder::getObjectType",1,"jli::SoundBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoundBuilder,0))){
    SWIG_fail_ptr("SoundBuilder_getObjectType",1,SWIGTYPE_p_jli__SoundBuilder);
  }
  
  result = (u32)((jli::SoundBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoundBuilder *arg1 = (jli::SoundBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::SoundBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoundBuilder::getClassName",1,"jli::SoundBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoundBuilder,0))){
    SWIG_fail_ptr("SoundBuilder_getClassName",1,SWIGTYPE_p_jli__SoundBuilder);
  }
  
  result = (char *)((jli::SoundBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::SoundBuilder *arg1 = (jli::SoundBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::SoundBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::SoundBuilder::getType",1,"jli::SoundBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__SoundBuilder,0))){
    SWIG_fail_ptr("SoundBuilder_getType",1,SWIGTYPE_p_jli__SoundBuilder);
  }
  
  result = (u32)((jli::SoundBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SoundBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_SoundBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_SoundBuilder_serialize},
    { "getObjectType", _wrap_SoundBuilder_getObjectType},
    { "getClassName", _wrap_SoundBuilder_getClassName},
    { "getType", _wrap_SoundBuilder_getType},
    {0,0}
};
static swig_lua_method swig_SoundBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundBuilder_Sf_SwigStatic = {
    "SoundBuilder",
    swig_SoundBuilder_Sf_SwigStatic_methods,
    swig_SoundBuilder_Sf_SwigStatic_attributes,
    swig_SoundBuilder_Sf_SwigStatic_constants,
    swig_SoundBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundBuilder_bases[] = {0};
static const char *swig_SoundBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_SoundBuilder = { "SoundBuilder", "SoundBuilder", &SWIGTYPE_p_jli__SoundBuilder,0,0, swig_SoundBuilder_methods, swig_SoundBuilder_attributes, &swig_SoundBuilder_Sf_SwigStatic, swig_SoundBuilder_meta, swig_SoundBuilder_bases, swig_SoundBuilder_base_names };

static int _wrap_TextureBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::TextureBuilder *arg1 = (jli::TextureBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::TextureBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::TextureBuilder::calculateSerializeBufferSize",1,"jli::TextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__TextureBuilder,0))){
    SWIG_fail_ptr("TextureBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__TextureBuilder);
  }
  
  result = (s32)((jli::TextureBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::TextureBuilder *arg1 = (jli::TextureBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::TextureBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::TextureBuilder::serialize",1,"jli::TextureBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::TextureBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::TextureBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__TextureBuilder,0))){
    SWIG_fail_ptr("TextureBuilder_serialize",1,SWIGTYPE_p_jli__TextureBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TextureBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("TextureBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::TextureBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::TextureBuilder *arg1 = (jli::TextureBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::TextureBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::TextureBuilder::getObjectType",1,"jli::TextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__TextureBuilder,0))){
    SWIG_fail_ptr("TextureBuilder_getObjectType",1,SWIGTYPE_p_jli__TextureBuilder);
  }
  
  result = (u32)((jli::TextureBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::TextureBuilder *arg1 = (jli::TextureBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::TextureBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::TextureBuilder::getClassName",1,"jli::TextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__TextureBuilder,0))){
    SWIG_fail_ptr("TextureBuilder_getClassName",1,SWIGTYPE_p_jli__TextureBuilder);
  }
  
  result = (char *)((jli::TextureBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::TextureBuilder *arg1 = (jli::TextureBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::TextureBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::TextureBuilder::getType",1,"jli::TextureBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__TextureBuilder,0))){
    SWIG_fail_ptr("TextureBuilder_getType",1,SWIGTYPE_p_jli__TextureBuilder);
  }
  
  result = (u32)((jli::TextureBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_TextureBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_TextureBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_TextureBuilder_serialize},
    { "getObjectType", _wrap_TextureBuilder_getObjectType},
    { "getClassName", _wrap_TextureBuilder_getClassName},
    { "getType", _wrap_TextureBuilder_getType},
    {0,0}
};
static swig_lua_method swig_TextureBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TextureBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TextureBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TextureBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TextureBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TextureBuilder_Sf_SwigStatic = {
    "TextureBuilder",
    swig_TextureBuilder_Sf_SwigStatic_methods,
    swig_TextureBuilder_Sf_SwigStatic_attributes,
    swig_TextureBuilder_Sf_SwigStatic_constants,
    swig_TextureBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TextureBuilder_bases[] = {0};
static const char *swig_TextureBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_TextureBuilder = { "TextureBuilder", "TextureBuilder", &SWIGTYPE_p_jli__TextureBuilder,0,0, swig_TextureBuilder_methods, swig_TextureBuilder_attributes, &swig_TextureBuilder_Sf_SwigStatic, swig_TextureBuilder_meta, swig_TextureBuilder_bases, swig_TextureBuilder_base_names };

static int _wrap_WorldFactory_create__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  u32 arg2 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::create",1,"jli::WorldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldFactory::create",2,"u32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_create",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (u32 const)lua_tonumber(L, 2);
  result = (jli::AbstractFactoryObject *)(arg1)->create(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_create__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractBuilder *arg2 = 0 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::create",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::create",2,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_create",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("WorldFactory_create",2,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::AbstractFactoryObject *)(arg1)->create((jli::AbstractBuilder const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_create(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_create__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldFactory_create__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldFactory_create'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldFactory::create(u32 const)\n"
    "    jli::WorldFactory::create(jli::AbstractBuilder const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldFactory_clone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = 0 ;
  bool arg3 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::clone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::clone",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::clone",2,"jli::AbstractFactoryObject const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("jli::WorldFactory::clone",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_clone",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_clone",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (jli::AbstractFactoryObject *)(arg1)->clone((jli::AbstractFactoryObject const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_clone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = 0 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::clone",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::clone",2,"jli::AbstractFactoryObject const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_clone",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_clone",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  result = (jli::AbstractFactoryObject *)(arg1)->clone((jli::AbstractFactoryObject const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_clone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractFactoryObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_clone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractFactoryObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_WorldFactory_clone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldFactory_clone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldFactory::clone(jli::AbstractFactoryObject const &,bool)\n"
    "    jli::WorldFactory::clone(jli::AbstractFactoryObject const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldFactory_has(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldFactory::has",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::has",1,"jli::WorldFactory const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::has",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_has",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_has",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  result = (bool)((jli::WorldFactory const *)arg1)->has(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::destroyInstance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::destroyInstance",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::destroyInstance",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_destroyInstance",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_destroyInstance",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  (arg1)->destroyInstance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::destroy",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::destroy",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_destroy",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_destroy",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  (arg1)->destroy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::destroyAll",1,"jli::WorldFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_destroyAll",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_size(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldFactory::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::size",1,"jli::WorldFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_size",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  result = (s32)(arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_instances__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  u32 arg2 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldFactory::instances",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::instances",1,"jli::WorldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldFactory::instances",2,"u32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_instances",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (u32 const)lua_tonumber(L, 2);
  result = (s32)(arg1)->instances(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_instances__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldFactory::instances",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::instances",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::instances",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_instances",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_instances",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  result = (s32)(arg1)->instances(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_instances(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractFactoryObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_instances__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldFactory_instances__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldFactory_instances'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldFactory::instances(u32 const)\n"
    "    jli::WorldFactory::instances(jli::AbstractFactoryObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldFactory_get(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  u32 arg2 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::get",1,"jli::WorldFactory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldFactory::get",2,"u32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_get",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (u32 const)lua_tonumber(L, 2);
  result = (jli::AbstractFactoryObject *)((jli::WorldFactory const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_getAll(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  btAlignedObjectArray< jli::AbstractFactoryObject * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::getAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::getAll",1,"jli::WorldFactory const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::getAll",2,"btAlignedObjectArray< jli::AbstractFactoryObject * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_getAll",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t,0))){
    SWIG_fail_ptr("WorldFactory_getAll",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t);
  }
  
  ((jli::WorldFactory const *)arg1)->getAll(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_index(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldFactory::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::index",1,"jli::WorldFactory const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::index",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_index",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_index",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  result = (s32)((jli::WorldFactory const *)arg1)->index(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::serialize",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::serialize",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_serialize",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("WorldFactory_serialize",2,SWIGTYPE_p_btSerializer);
  }
  
  (arg1)->serialize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldFactory(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::WorldFactory",0,0)
  result = (jli::WorldFactory *)new jli::WorldFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_ctor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  u32 *arg2 = 0 ;
  u32 temp2 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::ctor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::ctor",1,"jli::WorldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldFactory::ctor",2,"u32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_ctor",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(u32)lua_tonumber(L,2); arg2=&temp2;
  result = (jli::AbstractFactoryObject *)(arg1)->ctor((u32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_ctor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractBuilder *arg2 = 0 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::ctor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::ctor",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::ctor",2,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_ctor",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("WorldFactory_ctor",2,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::AbstractFactoryObject *)(arg1)->ctor((jli::AbstractBuilder const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_ctor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = 0 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::ctor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::ctor",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::ctor",2,"jli::AbstractFactoryObject const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_ctor",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_ctor",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  result = (jli::AbstractFactoryObject *)(arg1)->ctor((jli::AbstractFactoryObject const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_ctor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_ctor__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractFactoryObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_ctor__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldFactory_ctor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldFactory_ctor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldFactory::ctor(u32 const &)\n"
    "    jli::WorldFactory::ctor(jli::AbstractBuilder const &)\n"
    "    jli::WorldFactory::ctor(jli::AbstractFactoryObject const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldFactory_create_Internal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  u32 arg2 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::create_Internal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::create_Internal",1,"jli::WorldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldFactory::create_Internal",2,"u32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_create_Internal",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (u32 const)lua_tonumber(L, 2);
  result = (jli::AbstractFactoryObject *)(arg1)->create_Internal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_create_Internal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractBuilder *arg2 = 0 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::create_Internal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::create_Internal",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::create_Internal",2,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_create_Internal",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("WorldFactory_create_Internal",2,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::AbstractFactoryObject *)(arg1)->create_Internal((jli::AbstractBuilder const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_create_Internal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldFactory_create_Internal__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldFactory_create_Internal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldFactory_create_Internal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldFactory::create_Internal(u32 const)\n"
    "    jli::WorldFactory::create_Internal(jli::AbstractBuilder const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldFactory_clone_Internal(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = 0 ;
  bool arg3 ;
  jli::AbstractFactoryObject *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::clone_Internal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::clone_Internal",1,"jli::WorldFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldFactory::clone_Internal",2,"jli::AbstractFactoryObject const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("jli::WorldFactory::clone_Internal",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_clone_Internal",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_clone_Internal",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (jli::AbstractFactoryObject *)(arg1)->clone_Internal((jli::AbstractFactoryObject const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__AbstractFactoryObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_remove_Internal(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::AbstractFactoryObject *arg2 = (jli::AbstractFactoryObject *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::remove_Internal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::remove_Internal",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::remove_Internal",2,"jli::AbstractFactoryObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_remove_Internal",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__AbstractFactoryObject,0))){
    SWIG_fail_ptr("WorldFactory_remove_Internal",2,SWIGTYPE_p_jli__AbstractFactoryObject);
  }
  
  (arg1)->remove_Internal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_m_ObjectList_set(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::WorldFactory::ObjectList *arg2 = (jli::WorldFactory::ObjectList *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::m_ObjectList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::m_ObjectList",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::m_ObjectList",2,"jli::WorldFactory::ObjectList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectList_set",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectList_set",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t);
  }
  
  if (arg1) (arg1)->m_ObjectList = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_m_ObjectList_get(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::WorldFactory::ObjectList *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::m_ObjectList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::m_ObjectList",1,"jli::WorldFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectList_get",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  result = (jli::WorldFactory::ObjectList *)& ((arg1)->m_ObjectList);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_m_ObjectDuplicateMap_set(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::WorldFactory::ObjectDuplicateMap *arg2 = (jli::WorldFactory::ObjectDuplicateMap *) 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::m_ObjectDuplicateMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::m_ObjectDuplicateMap",1,"jli::WorldFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldFactory::m_ObjectDuplicateMap",2,"jli::WorldFactory::ObjectDuplicateMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectDuplicateMap_set",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btHashMapT_btHashPtr_int_t,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectDuplicateMap_set",2,SWIGTYPE_p_btHashMapT_btHashPtr_int_t);
  }
  
  if (arg1) (arg1)->m_ObjectDuplicateMap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldFactory_m_ObjectDuplicateMap_get(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldFactory *arg1 = (jli::WorldFactory *) 0 ;
  jli::WorldFactory::ObjectDuplicateMap *result = 0 ;
  
  SWIG_check_num_args("jli::WorldFactory::m_ObjectDuplicateMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldFactory::m_ObjectDuplicateMap",1,"jli::WorldFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldFactory,0))){
    SWIG_fail_ptr("WorldFactory_m_ObjectDuplicateMap_get",1,SWIGTYPE_p_jli__WorldFactory);
  }
  
  result = (jli::WorldFactory::ObjectDuplicateMap *)& ((arg1)->m_ObjectDuplicateMap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashMapT_btHashPtr_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldFactory(void *obj) {
jli::WorldFactory *arg1 = (jli::WorldFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldFactory_attributes[] = {
    { "m_ObjectList", _wrap_WorldFactory_m_ObjectList_get, _wrap_WorldFactory_m_ObjectList_set },
    { "m_ObjectDuplicateMap", _wrap_WorldFactory_m_ObjectDuplicateMap_get, _wrap_WorldFactory_m_ObjectDuplicateMap_set },
    {0,0,0}
};
static swig_lua_method swig_WorldFactory_methods[]= {
    { "create", _wrap_WorldFactory_create},
    { "clone", _wrap_WorldFactory_clone},
    { "has", _wrap_WorldFactory_has},
    { "destroyInstance", _wrap_WorldFactory_destroyInstance},
    { "destroy", _wrap_WorldFactory_destroy},
    { "destroyAll", _wrap_WorldFactory_destroyAll},
    { "size", _wrap_WorldFactory_size},
    { "instances", _wrap_WorldFactory_instances},
    { "get", _wrap_WorldFactory_get},
    { "getAll", _wrap_WorldFactory_getAll},
    { "index", _wrap_WorldFactory_index},
    { "serialize", _wrap_WorldFactory_serialize},
    { "ctor", _wrap_WorldFactory_ctor},
    { "create_Internal", _wrap_WorldFactory_create_Internal},
    { "clone_Internal", _wrap_WorldFactory_clone_Internal},
    { "remove_Internal", _wrap_WorldFactory_remove_Internal},
    {0,0}
};
static swig_lua_method swig_WorldFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldFactory_Sf_SwigStatic = {
    "WorldFactory",
    swig_WorldFactory_Sf_SwigStatic_methods,
    swig_WorldFactory_Sf_SwigStatic_attributes,
    swig_WorldFactory_Sf_SwigStatic_constants,
    swig_WorldFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldFactory_bases[] = {0};
static const char *swig_WorldFactory_base_names[] = {0};
static swig_lua_class _wrap_class_WorldFactory = { "WorldFactory", "WorldFactory", &SWIGTYPE_p_jli__WorldFactory,_proxy__wrap_new_WorldFactory, swig_delete_WorldFactory, swig_WorldFactory_methods, swig_WorldFactory_attributes, &swig_WorldFactory_Sf_SwigStatic, swig_WorldFactory_meta, swig_WorldFactory_bases, swig_WorldFactory_base_names };

static int _wrap_new_WorldMySQL(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldMySQL *result = 0 ;
  
  SWIG_check_num_args("jli::WorldMySQL::WorldMySQL",0,0)
  result = (jli::WorldMySQL *)new jli::WorldMySQL();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldMySQL,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldMySQL(void *obj) {
jli::WorldMySQL *arg1 = (jli::WorldMySQL *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldMySQL(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldMySQL);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldMySQL_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldMySQL_methods[]= {
    {0,0}
};
static swig_lua_method swig_WorldMySQL_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldMySQL_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldMySQL_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldMySQL_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldMySQL_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldMySQL_Sf_SwigStatic = {
    "WorldMySQL",
    swig_WorldMySQL_Sf_SwigStatic_methods,
    swig_WorldMySQL_Sf_SwigStatic_attributes,
    swig_WorldMySQL_Sf_SwigStatic_constants,
    swig_WorldMySQL_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldMySQL_bases[] = {0};
static const char *swig_WorldMySQL_base_names[] = {0};
static swig_lua_class _wrap_class_WorldMySQL = { "WorldMySQL", "WorldMySQL", &SWIGTYPE_p_jli__WorldMySQL,_proxy__wrap_new_WorldMySQL, swig_delete_WorldMySQL, swig_WorldMySQL_methods, swig_WorldMySQL_attributes, &swig_WorldMySQL_Sf_SwigStatic, swig_WorldMySQL_meta, swig_WorldMySQL_bases, swig_WorldMySQL_base_names };

static int _wrap_new_WorldSound(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldSound *result = 0 ;
  
  SWIG_check_num_args("jli::WorldSound::WorldSound",0,0)
  result = (jli::WorldSound *)new jli::WorldSound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldSound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldSound(void *obj) {
jli::WorldSound *arg1 = (jli::WorldSound *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldSound(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldSound);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldSound_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldSound_methods[]= {
    {0,0}
};
static swig_lua_method swig_WorldSound_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldSound_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldSound_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldSound_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldSound_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldSound_Sf_SwigStatic = {
    "WorldSound",
    swig_WorldSound_Sf_SwigStatic_methods,
    swig_WorldSound_Sf_SwigStatic_attributes,
    swig_WorldSound_Sf_SwigStatic_constants,
    swig_WorldSound_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldSound_bases[] = {0};
static const char *swig_WorldSound_base_names[] = {0};
static swig_lua_class _wrap_class_WorldSound = { "WorldSound", "WorldSound", &SWIGTYPE_p_jli__WorldSound,_proxy__wrap_new_WorldSound, swig_delete_WorldSound, swig_WorldSound_methods, swig_WorldSound_attributes, &swig_WorldSound_Sf_SwigStatic, swig_WorldSound_meta, swig_WorldSound_bases, swig_WorldSound_base_names };

static int _wrap_new_WorldLuaVirtualMachine(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *result = 0 ;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::WorldLuaVirtualMachine",0,0)
  result = (jli::WorldLuaVirtualMachine *)new jli::WorldLuaVirtualMachine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldLuaVirtualMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_reset(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::reset",1,"jli::WorldLuaVirtualMachine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_reset",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->execute((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  f32 arg3 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (f32)lua_tonumber(L, 3);
  result = (bool)(arg1)->execute((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Telegram *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Telegram const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",4,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Telegram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",4,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,(jli::Telegram const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Scene *arg3 = (jli::Scene *) 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Scene);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Scene *arg3 = (jli::Scene *) 0 ;
  f32 arg4 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Scene *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",4,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Scene);
  }
  
  arg4 = (f32)lua_tonumber(L, 4);
  result = (bool)(arg1)->execute((char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Scene *arg3 = (jli::Scene *) 0 ;
  jli::Telegram *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Scene *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",4,"jli::Telegram const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",5,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Scene,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",4,SWIGTYPE_p_jli__Telegram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",5,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,arg3,(jli::Telegram const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Node *arg3 = (jli::Node *) 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Node);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Node *arg3 = (jli::Node *) 0 ;
  f32 arg4 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Node *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",4,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Node);
  }
  
  arg4 = (f32)lua_tonumber(L, 4);
  result = (bool)(arg1)->execute((char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  jli::Node *arg3 = (jli::Node *) 0 ;
  jli::Telegram *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"jli::Node *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",4,"jli::Telegram const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",5,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Node,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_jli__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",4,SWIGTYPE_p_jli__Telegram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",5,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,arg3,(jli::Telegram const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) 0 ;
  char *arg2 = (char *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldLuaVirtualMachine::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",1,"jli::WorldLuaVirtualMachine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jli::WorldLuaVirtualMachine::execute",3,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",1,SWIGTYPE_p_jli__WorldLuaVirtualMachine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("WorldLuaVirtualMachine_execute",3,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  result = (bool)(arg1)->execute((char const *)arg2,(btAlignedObjectArray< jli::DeviceTouch * > const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldLuaVirtualMachine_execute(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldLuaVirtualMachine_execute__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldLuaVirtualMachine_execute__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldLuaVirtualMachine_execute__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldLuaVirtualMachine_execute__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WorldLuaVirtualMachine_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Telegram, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_WorldLuaVirtualMachine_execute__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldLuaVirtualMachine_execute__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldLuaVirtualMachine_execute__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_jli__Telegram, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_WorldLuaVirtualMachine_execute__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldLuaVirtualMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jli__Scene, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_jli__Telegram, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_WorldLuaVirtualMachine_execute__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldLuaVirtualMachine_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,f32)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Telegram const &,bool &)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Scene *)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Scene *,f32)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Scene *,jli::Telegram const &,bool &)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Node *)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Node *,f32)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,jli::Node *,jli::Telegram const &,bool &)\n"
    "    jli::WorldLuaVirtualMachine::execute(char const *,btAlignedObjectArray< jli::DeviceTouch * > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_WorldLuaVirtualMachine(void *obj) {
jli::WorldLuaVirtualMachine *arg1 = (jli::WorldLuaVirtualMachine *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldLuaVirtualMachine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldLuaVirtualMachine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldLuaVirtualMachine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldLuaVirtualMachine_methods[]= {
    { "reset", _wrap_WorldLuaVirtualMachine_reset},
    { "execute", _wrap_WorldLuaVirtualMachine_execute},
    {0,0}
};
static swig_lua_method swig_WorldLuaVirtualMachine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldLuaVirtualMachine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldLuaVirtualMachine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldLuaVirtualMachine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldLuaVirtualMachine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldLuaVirtualMachine_Sf_SwigStatic = {
    "WorldLuaVirtualMachine",
    swig_WorldLuaVirtualMachine_Sf_SwigStatic_methods,
    swig_WorldLuaVirtualMachine_Sf_SwigStatic_attributes,
    swig_WorldLuaVirtualMachine_Sf_SwigStatic_constants,
    swig_WorldLuaVirtualMachine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldLuaVirtualMachine_bases[] = {0};
static const char *swig_WorldLuaVirtualMachine_base_names[] = {0};
static swig_lua_class _wrap_class_WorldLuaVirtualMachine = { "WorldLuaVirtualMachine", "WorldLuaVirtualMachine", &SWIGTYPE_p_jli__WorldLuaVirtualMachine,_proxy__wrap_new_WorldLuaVirtualMachine, swig_delete_WorldLuaVirtualMachine, swig_WorldLuaVirtualMachine_methods, swig_WorldLuaVirtualMachine_attributes, &swig_WorldLuaVirtualMachine_Sf_SwigStatic, swig_WorldLuaVirtualMachine_meta, swig_WorldLuaVirtualMachine_bases, swig_WorldLuaVirtualMachine_base_names };

static int _wrap_new_WorldStateMachine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::WorldStateMachine",0,0)
  result = (jli::WorldStateMachine *)new jli::WorldStateMachine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldStateMachine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::WorldStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::WorldStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::WorldStateMachine::WorldStateMachine",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_WorldStateMachine",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::WorldStateMachine *)new jli::WorldStateMachine((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldStateMachine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = 0 ;
  jli::WorldStateMachine *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::WorldStateMachine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::WorldStateMachine::WorldStateMachine",1,"jli::WorldStateMachine const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("new_WorldStateMachine",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  result = (jli::WorldStateMachine *)new jli::WorldStateMachine((jli::WorldStateMachine const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldStateMachine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldStateMachine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WorldStateMachine__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldStateMachine__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldStateMachine__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WorldStateMachine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldStateMachine::WorldStateMachine()\n"
    "    jli::WorldStateMachine::WorldStateMachine(jli::AbstractBuilder const &)\n"
    "    jli::WorldStateMachine::WorldStateMachine(jli::WorldStateMachine const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldStateMachine_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator new",1,"jli::WorldStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_new",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator delete",1,"jli::WorldStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_delete",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachine_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator new",1,"jli::WorldStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachine::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_new",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldStateMachine_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldStateMachine_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldStateMachine_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldStateMachine_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldStateMachine::operator new(size_t)\n"
    "    jli::WorldStateMachine::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldStateMachine_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator delete",1,"jli::WorldStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachine::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_delete",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachine_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldStateMachine_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldStateMachine_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldStateMachine_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldStateMachine_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldStateMachine::operator delete(void *)\n"
    "    jli::WorldStateMachine::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldStateMachine_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator new[]",1,"jli::WorldStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_new_array",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator delete[]",1,"jli::WorldStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator new[]",1,"jli::WorldStateMachine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachine::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_new_array",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldStateMachine_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldStateMachine_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldStateMachine_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldStateMachine_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldStateMachine::operator new[](size_t)\n"
    "    jli::WorldStateMachine::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldStateMachine_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::operator delete[]",1,"jli::WorldStateMachine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachine::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachine::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_operator_delete_array",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachine_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldStateMachine_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldStateMachine_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldStateMachine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldStateMachine_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldStateMachine_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldStateMachine::operator delete[](void *)\n"
    "    jli::WorldStateMachine::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldStateMachine_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldStateMachine::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::calculateSerializeBufferSize",1,"jli::WorldStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  result = (s32)((jli::WorldStateMachine const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::serialize",1,"jli::WorldStateMachine const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachine::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachine::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_serialize",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachine_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("WorldStateMachine_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::WorldStateMachine const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachine::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::getClassName",1,"jli::WorldStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_getClassName",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  result = (char *)((jli::WorldStateMachine const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachine_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldStateMachine::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachine::getType",1,"jli::WorldStateMachine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachine,0))){
    SWIG_fail_ptr("WorldStateMachine_getType",1,SWIGTYPE_p_jli__WorldStateMachine);
  }
  
  result = (u32)((jli::WorldStateMachine const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldStateMachine(void *obj) {
jli::WorldStateMachine *arg1 = (jli::WorldStateMachine *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldStateMachine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldStateMachine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldStateMachine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldStateMachine_methods[]= {
    { "operator_new", _wrap_WorldStateMachine_operator_new},
    { "operator_delete", _wrap_WorldStateMachine_operator_delete},
    { "operator_new_array", _wrap_WorldStateMachine_operator_new_array},
    { "operator_delete_array", _wrap_WorldStateMachine_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_WorldStateMachine_calculateSerializeBufferSize},
    { "serialize", _wrap_WorldStateMachine_serialize},
    { "getClassName", _wrap_WorldStateMachine_getClassName},
    { "getType", _wrap_WorldStateMachine_getType},
    {0,0}
};
static swig_lua_method swig_WorldStateMachine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldStateMachine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldStateMachine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldStateMachine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldStateMachine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldStateMachine_Sf_SwigStatic = {
    "WorldStateMachine",
    swig_WorldStateMachine_Sf_SwigStatic_methods,
    swig_WorldStateMachine_Sf_SwigStatic_attributes,
    swig_WorldStateMachine_Sf_SwigStatic_constants,
    swig_WorldStateMachine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldStateMachine_bases[] = {0};
static const char *swig_WorldStateMachine_base_names[] = {0};
static swig_lua_class _wrap_class_WorldStateMachine = { "WorldStateMachine", "WorldStateMachine", &SWIGTYPE_p_jli__WorldStateMachine,_proxy__wrap_new_WorldStateMachine, swig_delete_WorldStateMachine, swig_WorldStateMachine_methods, swig_WorldStateMachine_attributes, &swig_WorldStateMachine_Sf_SwigStatic, swig_WorldStateMachine_meta, swig_WorldStateMachine_bases, swig_WorldStateMachine_base_names };

static int _wrap_new_WorldState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::WorldState",0,0)
  result = (jli::WorldState *)new jli::WorldState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::AbstractBuilder *arg1 = 0 ;
  jli::WorldState *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::WorldState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::WorldState::WorldState",1,"jli::AbstractBuilder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__AbstractBuilder,0))){
    SWIG_fail_ptr("new_WorldState",1,SWIGTYPE_p_jli__AbstractBuilder);
  }
  
  result = (jli::WorldState *)new jli::WorldState((jli::AbstractBuilder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = 0 ;
  jli::WorldState *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::WorldState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jli::WorldState::WorldState",1,"jli::WorldState const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("new_WorldState",1,SWIGTYPE_p_jli__WorldState);
  }
  
  result = (jli::WorldState *)new jli::WorldState((jli::WorldState const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldState(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WorldState__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__AbstractBuilder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldState__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldState__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WorldState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldState::WorldState()\n"
    "    jli::WorldState::WorldState(jli::AbstractBuilder const &)\n"
    "    jli::WorldState::WorldState(jli::WorldState const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldState_operator_new__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator new",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator new",1,"jli::WorldState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldState::operator new",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_new",1,SWIGTYPE_p_jli__WorldState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_delete__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator delete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator delete",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::operator delete",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_delete",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_operator_delete");
  (arg1)->operator delete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_new__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator new",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator new",1,"jli::WorldState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldState::operator new",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldState::operator new",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_new",1,SWIGTYPE_p_jli__WorldState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldState_operator_new");
  result = (void *)(arg1)->operator new(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_new(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldState_operator_new__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldState_operator_new__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldState_operator_new'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldState::operator new(size_t)\n"
    "    jli::WorldState::operator new(size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldState_operator_delete__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator delete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator delete",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::operator delete",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldState::operator delete",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_delete",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_operator_delete");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldState_operator_delete");
  (arg1)->operator delete(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_delete(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldState_operator_delete__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldState_operator_delete__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldState_operator_delete'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldState::operator delete(void *)\n"
    "    jli::WorldState::operator delete(void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldState_operator_new_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator new[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator new[]",1,"jli::WorldState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldState::operator new[]",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_new_array",1,SWIGTYPE_p_jli__WorldState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (void *)(arg1)->operator new[](arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_delete_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator delete[]",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator delete[]",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::operator delete[]",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_delete_array",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_operator_delete_array");
  (arg1)->operator delete[](arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_new_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator new[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator new[]",1,"jli::WorldState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::WorldState::operator new[]",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldState::operator new[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_new_array",1,SWIGTYPE_p_jli__WorldState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldState_operator_new_array");
  result = (void *)(arg1)->operator new[](arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_new_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldState_operator_new_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldState_operator_new_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldState_operator_new_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldState::operator new[](size_t)\n"
    "    jli::WorldState::operator new[](size_t,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldState_operator_delete_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::operator delete[]",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::operator delete[]",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::operator delete[]",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldState::operator delete[]",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_operator_delete_array",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_operator_delete_array");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"WorldState_operator_delete_array");
  (arg1)->operator delete[](arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_operator_delete_array(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldState_operator_delete_array__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jli__WorldState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldState_operator_delete_array__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldState_operator_delete_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jli::WorldState::operator delete[](void *)\n"
    "    jli::WorldState::operator delete[](void *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldState_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldState::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::calculateSerializeBufferSize",1,"jli::WorldState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__WorldState);
  }
  
  result = (s32)((jli::WorldState const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::serialize",1,"jli::WorldState const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldState::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_serialize",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("WorldState_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::WorldState const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::getClassName",1,"jli::WorldState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_getClassName",1,SWIGTYPE_p_jli__WorldState);
  }
  
  result = (char *)((jli::WorldState const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldState::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::getType",1,"jli::WorldState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_getType",1,SWIGTYPE_p_jli__WorldState);
  }
  
  result = (u32)((jli::WorldState const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_enter(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::enter",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::enter",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_enter",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_enter");
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_update(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  f32 arg3 ;
  
  SWIG_check_num_args("jli::WorldState::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::update",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::update",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jli::WorldState::update",3,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_update",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_update");
  arg3 = (f32)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_exit(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::exit",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::exit",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_exit",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_exit");
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  void *arg2 = (void *) 0 ;
  jli::Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("jli::WorldState::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::onMessage",1,"jli::WorldState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldState::onMessage",2,"void *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jli::WorldState::onMessage",3,"jli::Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_onMessage",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldState_onMessage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jli__Telegram,0))){
    SWIG_fail_ptr("WorldState_onMessage",3,SWIGTYPE_p_jli__Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(jli::Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::WorldState::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::setName",1,"jli::WorldState *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::WorldState::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_setName",1,SWIGTYPE_p_jli__WorldState);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::WorldState::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::getName",1,"jli::WorldState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_getName",1,SWIGTYPE_p_jli__WorldState);
  }
  
  result = (char *)((jli::WorldState const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_touchDown(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::WorldState::touchDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::touchDown",1,"jli::WorldState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldState::touchDown",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_touchDown",1,SWIGTYPE_p_jli__WorldState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("WorldState_touchDown",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchDown((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_touchUp(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::WorldState::touchUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::touchUp",1,"jli::WorldState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldState::touchUp",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_touchUp",1,SWIGTYPE_p_jli__WorldState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("WorldState_touchUp",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchUp((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_touchMove(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::WorldState::touchMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::touchMove",1,"jli::WorldState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldState::touchMove",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_touchMove",1,SWIGTYPE_p_jli__WorldState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("WorldState_touchMove",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchMove((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldState_touchCancelled(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldState *arg1 = (jli::WorldState *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::WorldState::touchCancelled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldState::touchCancelled",1,"jli::WorldState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::WorldState::touchCancelled",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("WorldState_touchCancelled",1,SWIGTYPE_p_jli__WorldState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("WorldState_touchCancelled",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchCancelled((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldState(void *obj) {
jli::WorldState *arg1 = (jli::WorldState *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldState_methods[]= {
    { "operator_new", _wrap_WorldState_operator_new},
    { "operator_delete", _wrap_WorldState_operator_delete},
    { "operator_new_array", _wrap_WorldState_operator_new_array},
    { "operator_delete_array", _wrap_WorldState_operator_delete_array},
    { "calculateSerializeBufferSize", _wrap_WorldState_calculateSerializeBufferSize},
    { "serialize", _wrap_WorldState_serialize},
    { "getClassName", _wrap_WorldState_getClassName},
    { "getType", _wrap_WorldState_getType},
    { "enter", _wrap_WorldState_enter},
    { "update", _wrap_WorldState_update},
    { "exit", _wrap_WorldState_exit},
    { "onMessage", _wrap_WorldState_onMessage},
    { "setName", _wrap_WorldState_setName},
    { "getName", _wrap_WorldState_getName},
    { "touchDown", _wrap_WorldState_touchDown},
    { "touchUp", _wrap_WorldState_touchUp},
    { "touchMove", _wrap_WorldState_touchMove},
    { "touchCancelled", _wrap_WorldState_touchCancelled},
    {0,0}
};
static swig_lua_method swig_WorldState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldState_Sf_SwigStatic = {
    "WorldState",
    swig_WorldState_Sf_SwigStatic_methods,
    swig_WorldState_Sf_SwigStatic_attributes,
    swig_WorldState_Sf_SwigStatic_constants,
    swig_WorldState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldState_bases[] = {0};
static const char *swig_WorldState_base_names[] = {0};
static swig_lua_class _wrap_class_WorldState = { "WorldState", "WorldState", &SWIGTYPE_p_jli__WorldState,_proxy__wrap_new_WorldState, swig_delete_WorldState, swig_WorldState_methods, swig_WorldState_attributes, &swig_WorldState_Sf_SwigStatic, swig_WorldState_meta, swig_WorldState_bases, swig_WorldState_base_names };

static int _wrap_World_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("jli::World::createInstance",0,0)
  jli::World::createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("jli::World::destroyInstance",0,0)
  jli::World::destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *result = 0 ;
  
  SWIG_check_num_args("jli::World::getInstance",0,0)
  result = (jli::World *)jli::World::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_hasInstance(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("jli::World::hasInstance",0,0)
  result = (bool)jli::World::hasInstance();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getWorldFactory(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::WorldFactory *result = 0 ;
  
  SWIG_check_num_args("jli::World::getWorldFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getWorldFactory",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getWorldFactory",1,SWIGTYPE_p_jli__World);
  }
  
  result = (jli::WorldFactory *)((jli::World const *)arg1)->getWorldFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getWorldMySQL(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::WorldMySQL *result = 0 ;
  
  SWIG_check_num_args("jli::World::getWorldMySQL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getWorldMySQL",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getWorldMySQL",1,SWIGTYPE_p_jli__World);
  }
  
  result = (jli::WorldMySQL *)((jli::World const *)arg1)->getWorldMySQL();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldMySQL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getWorldSound(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::WorldSound *result = 0 ;
  
  SWIG_check_num_args("jli::World::getWorldSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getWorldSound",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getWorldSound",1,SWIGTYPE_p_jli__World);
  }
  
  result = (jli::WorldSound *)((jli::World const *)arg1)->getWorldSound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getWorldLuaVirtualMachine(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::WorldLuaVirtualMachine *result = 0 ;
  
  SWIG_check_num_args("jli::World::getWorldLuaVirtualMachine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getWorldLuaVirtualMachine",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getWorldLuaVirtualMachine",1,SWIGTYPE_p_jli__World);
  }
  
  result = (jli::WorldLuaVirtualMachine *)((jli::World const *)arg1)->getWorldLuaVirtualMachine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__WorldLuaVirtualMachine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getWorldClock(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::Clock *result = 0 ;
  
  SWIG_check_num_args("jli::World::getWorldClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getWorldClock",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getWorldClock",1,SWIGTYPE_p_jli__World);
  }
  
  result = (jli::Clock *)((jli::World const *)arg1)->getWorldClock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jli__Clock,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_pushState(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::WorldState *arg2 = (jli::WorldState *) 0 ;
  
  SWIG_check_num_args("jli::World::pushState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::pushState",1,"jli::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::World::pushState",2,"jli::WorldState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_pushState",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__WorldState,0))){
    SWIG_fail_ptr("World_pushState",2,SWIGTYPE_p_jli__WorldState);
  }
  
  (arg1)->pushState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_touchDown(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::World::touchDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::touchDown",1,"jli::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::World::touchDown",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_touchDown",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("World_touchDown",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchDown((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_touchUp(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::World::touchUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::touchUp",1,"jli::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::World::touchUp",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_touchUp",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("World_touchUp",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchUp((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_touchMove(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::World::touchMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::touchMove",1,"jli::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::World::touchMove",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_touchMove",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("World_touchMove",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchMove((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_touchCancelled(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  btAlignedObjectArray< jli::DeviceTouch * > *arg2 = 0 ;
  
  SWIG_check_num_args("jli::World::touchCancelled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::touchCancelled",1,"jli::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jli::World::touchCancelled",2,"btAlignedObjectArray< jli::DeviceTouch * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_touchCancelled",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,0))){
    SWIG_fail_ptr("World_touchCancelled",2,SWIGTYPE_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t);
  }
  
  (arg1)->touchCancelled((btAlignedObjectArray< jli::DeviceTouch * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_addCamera(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::Camera *arg2 = (jli::Camera *) 0 ;
  
  SWIG_check_num_args("jli::World::addCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::addCamera",1,"jli::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::World::addCamera",2,"jli::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_addCamera",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("World_addCamera",2,SWIGTYPE_p_jli__Camera);
  }
  
  (arg1)->addCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_removeCamera(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  jli::Camera *arg2 = (jli::Camera *) 0 ;
  
  SWIG_check_num_args("jli::World::removeCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::removeCamera",1,"jli::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::World::removeCamera",2,"jli::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_removeCamera",1,SWIGTYPE_p_jli__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jli__Camera,0))){
    SWIG_fail_ptr("World_removeCamera",2,SWIGTYPE_p_jli__Camera);
  }
  
  (arg1)->removeCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_update(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  f32 arg2 ;
  
  SWIG_check_num_args("jli::World::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::update",1,"jli::World *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jli::World::update",2,"f32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_update",1,SWIGTYPE_p_jli__World);
  }
  
  arg2 = (f32)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_render(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  
  SWIG_check_num_args("jli::World::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::render",1,"jli::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_render",1,SWIGTYPE_p_jli__World);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_setName(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("jli::World::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::setName",1,"jli::World *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("jli::World::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_setName",1,SWIGTYPE_p_jli__World);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getName(lua_State* L) {
  int SWIG_arg = 0;
  jli::World *arg1 = (jli::World *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::World::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::World::getName",1,"jli::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__World,0))){
    SWIG_fail_ptr("World_getName",1,SWIGTYPE_p_jli__World);
  }
  
  result = (char *)((jli::World const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_World_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_World_methods[]= {
    { "getWorldFactory", _wrap_World_getWorldFactory},
    { "getWorldMySQL", _wrap_World_getWorldMySQL},
    { "getWorldSound", _wrap_World_getWorldSound},
    { "getWorldLuaVirtualMachine", _wrap_World_getWorldLuaVirtualMachine},
    { "getWorldClock", _wrap_World_getWorldClock},
    { "pushState", _wrap_World_pushState},
    { "touchDown", _wrap_World_touchDown},
    { "touchUp", _wrap_World_touchUp},
    { "touchMove", _wrap_World_touchMove},
    { "touchCancelled", _wrap_World_touchCancelled},
    { "addCamera", _wrap_World_addCamera},
    { "removeCamera", _wrap_World_removeCamera},
    { "update", _wrap_World_update},
    { "render", _wrap_World_render},
    { "setName", _wrap_World_setName},
    { "getName", _wrap_World_getName},
    {0,0}
};
static swig_lua_method swig_World_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_World_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_World_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_World_Sf_SwigStatic_methods[]= {
    { "createInstance", _wrap_World_createInstance},
    { "destroyInstance", _wrap_World_destroyInstance},
    { "getInstance", _wrap_World_getInstance},
    { "hasInstance", _wrap_World_hasInstance},
    {0,0}
};
static swig_lua_class* swig_World_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_World_Sf_SwigStatic = {
    "World",
    swig_World_Sf_SwigStatic_methods,
    swig_World_Sf_SwigStatic_attributes,
    swig_World_Sf_SwigStatic_constants,
    swig_World_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_World_bases[] = {0};
static const char *swig_World_base_names[] = {0};
static swig_lua_class _wrap_class_World = { "World", "World", &SWIGTYPE_p_jli__World,0,0, swig_World_methods, swig_World_attributes, &swig_World_Sf_SwigStatic, swig_World_meta, swig_World_bases, swig_World_base_names };

static int _wrap_WorldStateBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateBuilder *arg1 = (jli::WorldStateBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldStateBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateBuilder::calculateSerializeBufferSize",1,"jli::WorldStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateBuilder,0))){
    SWIG_fail_ptr("WorldStateBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__WorldStateBuilder);
  }
  
  result = (s32)((jli::WorldStateBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateBuilder *arg1 = (jli::WorldStateBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateBuilder::serialize",1,"jli::WorldStateBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateBuilder,0))){
    SWIG_fail_ptr("WorldStateBuilder_serialize",1,SWIGTYPE_p_jli__WorldStateBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("WorldStateBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::WorldStateBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateBuilder *arg1 = (jli::WorldStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldStateBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateBuilder::getObjectType",1,"jli::WorldStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateBuilder,0))){
    SWIG_fail_ptr("WorldStateBuilder_getObjectType",1,SWIGTYPE_p_jli__WorldStateBuilder);
  }
  
  result = (u32)((jli::WorldStateBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateBuilder *arg1 = (jli::WorldStateBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateBuilder::getClassName",1,"jli::WorldStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateBuilder,0))){
    SWIG_fail_ptr("WorldStateBuilder_getClassName",1,SWIGTYPE_p_jli__WorldStateBuilder);
  }
  
  result = (char *)((jli::WorldStateBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateBuilder *arg1 = (jli::WorldStateBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldStateBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateBuilder::getType",1,"jli::WorldStateBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateBuilder,0))){
    SWIG_fail_ptr("WorldStateBuilder_getType",1,SWIGTYPE_p_jli__WorldStateBuilder);
  }
  
  result = (u32)((jli::WorldStateBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_WorldStateBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldStateBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_WorldStateBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_WorldStateBuilder_serialize},
    { "getObjectType", _wrap_WorldStateBuilder_getObjectType},
    { "getClassName", _wrap_WorldStateBuilder_getClassName},
    { "getType", _wrap_WorldStateBuilder_getType},
    {0,0}
};
static swig_lua_method swig_WorldStateBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldStateBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldStateBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldStateBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldStateBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldStateBuilder_Sf_SwigStatic = {
    "WorldStateBuilder",
    swig_WorldStateBuilder_Sf_SwigStatic_methods,
    swig_WorldStateBuilder_Sf_SwigStatic_attributes,
    swig_WorldStateBuilder_Sf_SwigStatic_constants,
    swig_WorldStateBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldStateBuilder_bases[] = {0};
static const char *swig_WorldStateBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_WorldStateBuilder = { "WorldStateBuilder", "WorldStateBuilder", &SWIGTYPE_p_jli__WorldStateBuilder,0,0, swig_WorldStateBuilder_methods, swig_WorldStateBuilder_attributes, &swig_WorldStateBuilder_Sf_SwigStatic, swig_WorldStateBuilder_meta, swig_WorldStateBuilder_bases, swig_WorldStateBuilder_base_names };

static int _wrap_WorldStateMachineBuilder_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachineBuilder *arg1 = (jli::WorldStateMachineBuilder *) 0 ;
  s32 result;
  
  SWIG_check_num_args("jli::WorldStateMachineBuilder::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachineBuilder::calculateSerializeBufferSize",1,"jli::WorldStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachineBuilder,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_calculateSerializeBufferSize",1,SWIGTYPE_p_jli__WorldStateMachineBuilder);
  }
  
  result = (s32)((jli::WorldStateMachineBuilder const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachineBuilder_serialize(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachineBuilder *arg1 = (jli::WorldStateMachineBuilder *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachineBuilder::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachineBuilder::serialize",1,"jli::WorldStateMachineBuilder const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jli::WorldStateMachineBuilder::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("jli::WorldStateMachineBuilder::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachineBuilder,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_serialize",1,SWIGTYPE_p_jli__WorldStateMachineBuilder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WorldStateMachineBuilder_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  ((jli::WorldStateMachineBuilder const *)arg1)->serialize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachineBuilder_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachineBuilder *arg1 = (jli::WorldStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldStateMachineBuilder::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachineBuilder::getObjectType",1,"jli::WorldStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachineBuilder,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_getObjectType",1,SWIGTYPE_p_jli__WorldStateMachineBuilder);
  }
  
  result = (u32)((jli::WorldStateMachineBuilder const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachineBuilder_getClassName(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachineBuilder *arg1 = (jli::WorldStateMachineBuilder *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("jli::WorldStateMachineBuilder::getClassName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachineBuilder::getClassName",1,"jli::WorldStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachineBuilder,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_getClassName",1,SWIGTYPE_p_jli__WorldStateMachineBuilder);
  }
  
  result = (char *)((jli::WorldStateMachineBuilder const *)arg1)->getClassName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldStateMachineBuilder_getType(lua_State* L) {
  int SWIG_arg = 0;
  jli::WorldStateMachineBuilder *arg1 = (jli::WorldStateMachineBuilder *) 0 ;
  u32 result;
  
  SWIG_check_num_args("jli::WorldStateMachineBuilder::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jli::WorldStateMachineBuilder::getType",1,"jli::WorldStateMachineBuilder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jli__WorldStateMachineBuilder,0))){
    SWIG_fail_ptr("WorldStateMachineBuilder_getType",1,SWIGTYPE_p_jli__WorldStateMachineBuilder);
  }
  
  result = (u32)((jli::WorldStateMachineBuilder const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_WorldStateMachineBuilder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldStateMachineBuilder_methods[]= {
    { "calculateSerializeBufferSize", _wrap_WorldStateMachineBuilder_calculateSerializeBufferSize},
    { "serialize", _wrap_WorldStateMachineBuilder_serialize},
    { "getObjectType", _wrap_WorldStateMachineBuilder_getObjectType},
    { "getClassName", _wrap_WorldStateMachineBuilder_getClassName},
    { "getType", _wrap_WorldStateMachineBuilder_getType},
    {0,0}
};
static swig_lua_method swig_WorldStateMachineBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldStateMachineBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldStateMachineBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldStateMachineBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldStateMachineBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldStateMachineBuilder_Sf_SwigStatic = {
    "WorldStateMachineBuilder",
    swig_WorldStateMachineBuilder_Sf_SwigStatic_methods,
    swig_WorldStateMachineBuilder_Sf_SwigStatic_attributes,
    swig_WorldStateMachineBuilder_Sf_SwigStatic_constants,
    swig_WorldStateMachineBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldStateMachineBuilder_bases[] = {0};
static const char *swig_WorldStateMachineBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_WorldStateMachineBuilder = { "WorldStateMachineBuilder", "WorldStateMachineBuilder", &SWIGTYPE_p_jli__WorldStateMachineBuilder,0,0, swig_WorldStateMachineBuilder_methods, swig_WorldStateMachineBuilder_attributes, &swig_WorldStateMachineBuilder_Sf_SwigStatic, swig_WorldStateMachineBuilder_meta, swig_WorldStateMachineBuilder_bases, swig_WorldStateMachineBuilder_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_None", jli::JLI_OBJECT_TYPE_None)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Action", jli::JLI_OBJECT_TYPE_Action)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_ActionBuilder", jli::JLI_OBJECT_TYPE_ActionBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Camera", jli::JLI_OBJECT_TYPE_Camera)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_CameraBuilder", jli::JLI_OBJECT_TYPE_CameraBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Clock", jli::JLI_OBJECT_TYPE_Clock)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_ClockBuilder", jli::JLI_OBJECT_TYPE_ClockBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_CollisionResponse", jli::JLI_OBJECT_TYPE_CollisionResponse)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_CollisionResponseBuilder", jli::JLI_OBJECT_TYPE_CollisionResponseBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_CubicTexture", jli::JLI_OBJECT_TYPE_CubicTexture)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_CubicTextureBuilder", jli::JLI_OBJECT_TYPE_CubicTextureBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_DynamicPhysicsBody", jli::JLI_OBJECT_TYPE_DynamicPhysicsBody)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_DynamicPhysicsBodyBuilder", jli::JLI_OBJECT_TYPE_DynamicPhysicsBodyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Geometry", jli::JLI_OBJECT_TYPE_Geometry)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_GeometryBuilder", jli::JLI_OBJECT_TYPE_GeometryBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_GhostPhysicsBody", jli::JLI_OBJECT_TYPE_GhostPhysicsBody)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_GhostPhysicsBodyBuilder", jli::JLI_OBJECT_TYPE_GhostPhysicsBodyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_KinematicPhysicsBody", jli::JLI_OBJECT_TYPE_KinematicPhysicsBody)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_KinematicPhysicsBodyBuilder", jli::JLI_OBJECT_TYPE_KinematicPhysicsBodyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Light", jli::JLI_OBJECT_TYPE_Light)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_LightBuilder", jli::JLI_OBJECT_TYPE_LightBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Material", jli::JLI_OBJECT_TYPE_Material)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_MaterialBuilder", jli::JLI_OBJECT_TYPE_MaterialBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_MaterialProperty", jli::JLI_OBJECT_TYPE_MaterialProperty)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_MaterialPropertyBuilder", jli::JLI_OBJECT_TYPE_MaterialPropertyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Node", jli::JLI_OBJECT_TYPE_Node)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NodeBuilder", jli::JLI_OBJECT_TYPE_NodeBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NodeState", jli::JLI_OBJECT_TYPE_NodeState)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NodeStateBuilder", jli::JLI_OBJECT_TYPE_NodeStateBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NodeStateMachine", jli::JLI_OBJECT_TYPE_NodeStateMachine)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NodeStateMachineBuilder", jli::JLI_OBJECT_TYPE_NodeStateMachineBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_ParticleEmitter", jli::JLI_OBJECT_TYPE_ParticleEmitter)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_ParticleEmitterBuilder", jli::JLI_OBJECT_TYPE_ParticleEmitterBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsContact", jli::JLI_OBJECT_TYPE_PhysicsContact)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsContactBuilder", jli::JLI_OBJECT_TYPE_PhysicsContactBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsField", jli::JLI_OBJECT_TYPE_PhysicsField)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsFieldBuilder", jli::JLI_OBJECT_TYPE_PhysicsFieldBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsShape", jli::JLI_OBJECT_TYPE_PhysicsShape)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsShapeBuilder", jli::JLI_OBJECT_TYPE_PhysicsShapeBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsWorld", jli::JLI_OBJECT_TYPE_PhysicsWorld)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_PhysicsWorldBuilder", jli::JLI_OBJECT_TYPE_PhysicsWorldBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Resource", jli::JLI_OBJECT_TYPE_Resource)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_ResourceBuilder", jli::JLI_OBJECT_TYPE_ResourceBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_RigidPhysicsBody", jli::JLI_OBJECT_TYPE_RigidPhysicsBody)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_RigidPhysicsBodyBuilder", jli::JLI_OBJECT_TYPE_RigidPhysicsBodyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Scene", jli::JLI_OBJECT_TYPE_Scene)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SceneBuilder", jli::JLI_OBJECT_TYPE_SceneBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SceneState", jli::JLI_OBJECT_TYPE_SceneState)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SceneStateBuilder", jli::JLI_OBJECT_TYPE_SceneStateBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SceneStateMachine", jli::JLI_OBJECT_TYPE_SceneStateMachine)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SceneStateMachineBuilder", jli::JLI_OBJECT_TYPE_SceneStateMachineBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SoftPhysicsBody", jli::JLI_OBJECT_TYPE_SoftPhysicsBody)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SoftPhysicsBodyBuilder", jli::JLI_OBJECT_TYPE_SoftPhysicsBodyBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Sound", jli::JLI_OBJECT_TYPE_Sound)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_SoundBuilder", jli::JLI_OBJECT_TYPE_SoundBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_Texture", jli::JLI_OBJECT_TYPE_Texture)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_TextureBuilder", jli::JLI_OBJECT_TYPE_TextureBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_WorldState", jli::JLI_OBJECT_TYPE_WorldState)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_WorldStateBuilder", jli::JLI_OBJECT_TYPE_WorldStateBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_WorldStateMachine", jli::JLI_OBJECT_TYPE_WorldStateMachine)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_WorldStateMachineBuilder", jli::JLI_OBJECT_TYPE_WorldStateMachineBuilder)},
    {SWIG_LUA_CONSTTAB_INT("JLI_OBJECT_TYPE_NumberOfTypes", jli::JLI_OBJECT_TYPE_NumberOfTypes)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "World_createInstance", _wrap_World_createInstance},
    { "World_destroyInstance", _wrap_World_destroyInstance},
    { "World_getInstance", _wrap_World_getInstance},
    { "World_hasInstance", _wrap_World_hasInstance},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_Action,
&_wrap_class_ActionBuilder,
&_wrap_class_Camera,
&_wrap_class_CameraBuilder,
&_wrap_class_Clock,
&_wrap_class_ClockBuilder,
&_wrap_class_CollisionResponse,
&_wrap_class_CollisionResponseBuilder,
&_wrap_class_Texture,
&_wrap_class_CubicTexture,
&_wrap_class_CubicTextureBuilder,
&_wrap_class_DynamicPhysicsBody,
&_wrap_class_DynamicPhysicsBodyBuilder,
&_wrap_class_Geometry,
&_wrap_class_GeometryBuilder,
&_wrap_class_GhostPhysicsBody,
&_wrap_class_GhostPhysicsBodyBuilder,
&_wrap_class_KinematicPhysicsBody,
&_wrap_class_KinematicPhysicsBodyBuilder,
&_wrap_class_Light,
&_wrap_class_LightBuilder,
&_wrap_class_Material,
&_wrap_class_MaterialBuilder,
&_wrap_class_MaterialProperty,
&_wrap_class_MaterialPropertyBuilder,
&_wrap_class_Node,
&_wrap_class_NodeBuilder,
&_wrap_class_NodeState,
&_wrap_class_NodeStateBuilder,
&_wrap_class_NodeStateMachine,
&_wrap_class_NodeStateMachineBuilder,
&_wrap_class_ParticleEmitter,
&_wrap_class_ParticleEmitterBuilder,
&_wrap_class_PhysicsContact,
&_wrap_class_PhysicsContactBuilder,
&_wrap_class_PhysicsField,
&_wrap_class_PhysicsFieldBuilder,
&_wrap_class_PhysicsShape,
&_wrap_class_PhysicsShapeBuilder,
&_wrap_class_PhysicsWorld,
&_wrap_class_PhysicsWorldBuilder,
&_wrap_class_Resource,
&_wrap_class_ResourceBuilder,
&_wrap_class_RigidPhysicsBody,
&_wrap_class_RigidPhysicsBodyBuilder,
&_wrap_class_Scene,
&_wrap_class_SceneBuilder,
&_wrap_class_SceneState,
&_wrap_class_SceneStateBuilder,
&_wrap_class_SceneStateMachine,
&_wrap_class_SceneStateMachineBuilder,
&_wrap_class_SoftPhysicsBody,
&_wrap_class_SoftPhysicsBodyBuilder,
&_wrap_class_Sound,
&_wrap_class_SoundBuilder,
&_wrap_class_TextureBuilder,
&_wrap_class_WorldFactory,
&_wrap_class_WorldMySQL,
&_wrap_class_WorldSound,
&_wrap_class_WorldLuaVirtualMachine,
&_wrap_class_WorldStateMachine,
&_wrap_class_WorldState,
&_wrap_class_World,
&_wrap_class_WorldStateBuilder,
&_wrap_class_WorldStateMachineBuilder,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "JLI",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_jli__PhysicsWorldTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::PhysicsWorld *) x));
}
static void *_p_jli__SceneTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Scene *) x));
}
static void *_p_jli__LightTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Light *) x));
}
static void *_p_jli__PhysicsShapeTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::PhysicsShape *) x));
}
static void *_p_jli__SoundTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Sound *) x));
}
static void *_p_jli__PhysicsFieldTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::PhysicsField *) x));
}
static void *_p_jli__GeometryTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Geometry *) x));
}
static void *_p_jli__CameraTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Camera *) x));
}
static void *_p_jli__ResourceTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Resource *) x));
}
static void *_p_jli__NodeStateMachineBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::NodeStateMachineBuilder *) x));
}
static void *_p_jli__NodeStateBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::NodeStateBuilder *) x));
}
static void *_p_jli__NodeBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::NodeBuilder *) x));
}
static void *_p_jli__MaterialPropertyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::MaterialPropertyBuilder *) x));
}
static void *_p_jli__MaterialBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::MaterialBuilder *) x));
}
static void *_p_jli__LightBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::LightBuilder *) x));
}
static void *_p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::KinematicPhysicsBodyBuilder *) x));
}
static void *_p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::GhostPhysicsBodyBuilder *) x));
}
static void *_p_jli__GeometryBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::GeometryBuilder *) x));
}
static void *_p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::DynamicPhysicsBodyBuilder *) x));
}
static void *_p_jli__CubicTextureBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::CubicTextureBuilder *) x));
}
static void *_p_jli__AbstractBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::AbstractBuilder *) x));
}
static void *_p_jli__ActionBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::ActionBuilder *) x));
}
static void *_p_jli__CameraBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::CameraBuilder *) x));
}
static void *_p_jli__ClockBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::ClockBuilder *) x));
}
static void *_p_jli__CollisionResponseBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::CollisionResponseBuilder *) x));
}
static void *_p_jli__ParticleEmitterBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::ParticleEmitterBuilder *) x));
}
static void *_p_jli__PhysicsContactBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::PhysicsContactBuilder *) x));
}
static void *_p_jli__PhysicsFieldBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::PhysicsFieldBuilder *) x));
}
static void *_p_jli__PhysicsShapeBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::PhysicsShapeBuilder *) x));
}
static void *_p_jli__PhysicsWorldBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::PhysicsWorldBuilder *) x));
}
static void *_p_jli__ResourceBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::ResourceBuilder *) x));
}
static void *_p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::RigidPhysicsBodyBuilder *) x));
}
static void *_p_jli__SceneBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::SceneBuilder *) x));
}
static void *_p_jli__SceneStateBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::SceneStateBuilder *) x));
}
static void *_p_jli__SceneStateMachineBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::SceneStateMachineBuilder *) x));
}
static void *_p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::SoftPhysicsBodyBuilder *) x));
}
static void *_p_jli__SoundBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::SoundBuilder *) x));
}
static void *_p_jli__TextureBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::TextureBuilder *) x));
}
static void *_p_jli__WorldStateBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::WorldStateBuilder *) x));
}
static void *_p_jli__WorldStateMachineBuilderTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractBuilder *) ((jli::WorldStateMachineBuilder *) x));
}
static void *_p_jli__NodeTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Node *) x));
}
static void *_p_jli__TextureTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Texture *) x));
}
static void *_p_jli__CubicTextureTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::Texture *) ((jli::CubicTexture *) x));
}
static void *_p_jli__MaterialTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Material *) x));
}
static void *_p_jli__AbstractDecoratorTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *)  ((jli::AbstractDecorator *) x));
}
static void *_p_jli__ParticleEmitterTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::ParticleEmitter *) x));
}
static void *_p_jli__PhysicsContactTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::PhysicsContact *) x));
}
static void *_p_jli__CollisionResponseTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::CollisionResponse *) x));
}
static void *_p_jli__AbstractFactoryObjectTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *)  ((jli::AbstractFactoryObject *) x));
}
static void *_p_jli__MaterialPropertyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::MaterialProperty *) x));
}
static void *_p_jli__ClockTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Clock *) x));
}
static void *_p_jli__ActionTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::Action *) x));
}
static void *_p_jli__KinematicPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::KinematicPhysicsBody *) x));
}
static void *_p_jli__GhostPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::GhostPhysicsBody *) x));
}
static void *_p_jli__DynamicPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::DynamicPhysicsBody *) x));
}
static void *_p_jli__AbstractPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::AbstractPhysicsBody *) x));
}
static void *_p_jli__RigidPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *)(jli::AbstractPhysicsBody *) ((jli::RigidPhysicsBody *) x));
}
static void *_p_jli__SoftPhysicsBodyTo_p_jli__AbstractObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractObject *) (jli::AbstractFactoryObject *) ((jli::SoftPhysicsBody *) x));
}
static void *_p_jli__NodeTo_p_jli__AbstractDecorator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractDecorator *)  ((jli::Node *) x));
}
static void *_p_jli__SceneTo_p_jli__AbstractDecorator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractDecorator *)  ((jli::Scene *) x));
}
static void *_p_jli__GeometryTo_p_jli__AbstractDecorator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractDecorator *)  ((jli::Geometry *) x));
}
static void *_p_jli__PhysicsWorldTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::PhysicsWorld *) x));
}
static void *_p_jli__SceneTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Scene *) x));
}
static void *_p_jli__LightTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Light *) x));
}
static void *_p_jli__PhysicsShapeTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::PhysicsShape *) x));
}
static void *_p_jli__SoundTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Sound *) x));
}
static void *_p_jli__PhysicsFieldTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::PhysicsField *) x));
}
static void *_p_jli__GeometryTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Geometry *) x));
}
static void *_p_jli__CameraTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Camera *) x));
}
static void *_p_jli__ResourceTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Resource *) x));
}
static void *_p_jli__ParticleEmitterBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::ParticleEmitterBuilder *) x));
}
static void *_p_jli__NodeStateMachineBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::NodeStateMachineBuilder *) x));
}
static void *_p_jli__NodeStateBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::NodeStateBuilder *) x));
}
static void *_p_jli__NodeBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::NodeBuilder *) x));
}
static void *_p_jli__MaterialPropertyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::MaterialPropertyBuilder *) x));
}
static void *_p_jli__MaterialBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::MaterialBuilder *) x));
}
static void *_p_jli__LightBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::LightBuilder *) x));
}
static void *_p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::KinematicPhysicsBodyBuilder *) x));
}
static void *_p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::GhostPhysicsBodyBuilder *) x));
}
static void *_p_jli__GeometryBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::GeometryBuilder *) x));
}
static void *_p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::DynamicPhysicsBodyBuilder *) x));
}
static void *_p_jli__AbstractBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::AbstractBuilder *) x));
}
static void *_p_jli__ActionBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::ActionBuilder *) x));
}
static void *_p_jli__CameraBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::CameraBuilder *) x));
}
static void *_p_jli__ClockBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::ClockBuilder *) x));
}
static void *_p_jli__CollisionResponseBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::CollisionResponseBuilder *) x));
}
static void *_p_jli__CubicTextureBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::CubicTextureBuilder *) x));
}
static void *_p_jli__PhysicsContactBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::PhysicsContactBuilder *) x));
}
static void *_p_jli__PhysicsFieldBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::PhysicsFieldBuilder *) x));
}
static void *_p_jli__PhysicsShapeBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::PhysicsShapeBuilder *) x));
}
static void *_p_jli__PhysicsWorldBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::PhysicsWorldBuilder *) x));
}
static void *_p_jli__ResourceBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::ResourceBuilder *) x));
}
static void *_p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::RigidPhysicsBodyBuilder *) x));
}
static void *_p_jli__SceneBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::SceneBuilder *) x));
}
static void *_p_jli__SceneStateBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::SceneStateBuilder *) x));
}
static void *_p_jli__SceneStateMachineBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::SceneStateMachineBuilder *) x));
}
static void *_p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::SoftPhysicsBodyBuilder *) x));
}
static void *_p_jli__SoundBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::SoundBuilder *) x));
}
static void *_p_jli__TextureBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::TextureBuilder *) x));
}
static void *_p_jli__WorldStateBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::WorldStateBuilder *) x));
}
static void *_p_jli__WorldStateMachineBuilderTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractBuilder *) ((jli::WorldStateMachineBuilder *) x));
}
static void *_p_jli__NodeTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Node *) x));
}
static void *_p_jli__TextureTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Texture *) x));
}
static void *_p_jli__CubicTextureTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::Texture *) ((jli::CubicTexture *) x));
}
static void *_p_jli__MaterialTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Material *) x));
}
static void *_p_jli__ParticleEmitterTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::ParticleEmitter *) x));
}
static void *_p_jli__PhysicsContactTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::PhysicsContact *) x));
}
static void *_p_jli__CollisionResponseTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::CollisionResponse *) x));
}
static void *_p_jli__MaterialPropertyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::MaterialProperty *) x));
}
static void *_p_jli__ClockTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Clock *) x));
}
static void *_p_jli__ActionTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::Action *) x));
}
static void *_p_jli__KinematicPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::KinematicPhysicsBody *) x));
}
static void *_p_jli__GhostPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::GhostPhysicsBody *) x));
}
static void *_p_jli__AbstractPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::AbstractPhysicsBody *) x));
}
static void *_p_jli__DynamicPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::DynamicPhysicsBody *) x));
}
static void *_p_jli__RigidPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *) (jli::AbstractPhysicsBody *) ((jli::RigidPhysicsBody *) x));
}
static void *_p_jli__SoftPhysicsBodyTo_p_jli__AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractFactoryObject *)  ((jli::SoftPhysicsBody *) x));
}
static void *_p_jli__CubicTextureTo_p_jli__Texture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::Texture *)  ((jli::CubicTexture *) x));
}
static void *_p_btDefaultSerializerTo_p_btSerializer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btSerializer *)  ((btDefaultSerializer *) x));
}
static void *_p_jli__RigidPhysicsBodyTo_p_jli__AbstractPhysicsBody(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractPhysicsBody *)  ((jli::RigidPhysicsBody *) x));
}
static void *_p_jli__NodeStateBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::NodeStateBuilder *) x));
}
static void *_p_jli__NodeBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::NodeBuilder *) x));
}
static void *_p_jli__MaterialPropertyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::MaterialPropertyBuilder *) x));
}
static void *_p_jli__MaterialBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::MaterialBuilder *) x));
}
static void *_p_jli__LightBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::LightBuilder *) x));
}
static void *_p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::KinematicPhysicsBodyBuilder *) x));
}
static void *_p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::GhostPhysicsBodyBuilder *) x));
}
static void *_p_jli__GeometryBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::GeometryBuilder *) x));
}
static void *_p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::DynamicPhysicsBodyBuilder *) x));
}
static void *_p_jli__CubicTextureBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::CubicTextureBuilder *) x));
}
static void *_p_jli__CollisionResponseBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::CollisionResponseBuilder *) x));
}
static void *_p_jli__ClockBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::ClockBuilder *) x));
}
static void *_p_jli__CameraBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::CameraBuilder *) x));
}
static void *_p_jli__ActionBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::ActionBuilder *) x));
}
static void *_p_jli__NodeStateMachineBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::NodeStateMachineBuilder *) x));
}
static void *_p_jli__ParticleEmitterBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::ParticleEmitterBuilder *) x));
}
static void *_p_jli__PhysicsContactBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::PhysicsContactBuilder *) x));
}
static void *_p_jli__PhysicsFieldBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::PhysicsFieldBuilder *) x));
}
static void *_p_jli__PhysicsShapeBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::PhysicsShapeBuilder *) x));
}
static void *_p_jli__PhysicsWorldBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::PhysicsWorldBuilder *) x));
}
static void *_p_jli__ResourceBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::ResourceBuilder *) x));
}
static void *_p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::RigidPhysicsBodyBuilder *) x));
}
static void *_p_jli__SceneBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::SceneBuilder *) x));
}
static void *_p_jli__SceneStateBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::SceneStateBuilder *) x));
}
static void *_p_jli__SceneStateMachineBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::SceneStateMachineBuilder *) x));
}
static void *_p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::SoftPhysicsBodyBuilder *) x));
}
static void *_p_jli__SoundBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::SoundBuilder *) x));
}
static void *_p_jli__TextureBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::TextureBuilder *) x));
}
static void *_p_jli__WorldStateBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::WorldStateBuilder *) x));
}
static void *_p_jli__WorldStateMachineBuilderTo_p_jli__AbstractBuilder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jli::AbstractBuilder *)  ((jli::WorldStateMachineBuilder *) x));
}
static swig_type_info _swigt__p_FMOD_ADVANCEDSETTINGS = {"_p_FMOD_ADVANCEDSETTINGS", "FMOD_ADVANCEDSETTINGS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_ASYNCREADINFO = {"_p_FMOD_ASYNCREADINFO", "FMOD_ASYNCREADINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CDTOC = {"_p_FMOD_CDTOC", "FMOD_CDTOC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CHANNEL = {"_p_FMOD_CHANNEL", "FMOD_CHANNEL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CHANNELGROUP = {"_p_FMOD_CHANNELGROUP", "FMOD_CHANNELGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CHANNELINDEX = {"_p_FMOD_CHANNELINDEX", "enum FMOD_CHANNELINDEX *|FMOD_CHANNELINDEX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CHANNEL_CALLBACKTYPE = {"_p_FMOD_CHANNEL_CALLBACKTYPE", "enum FMOD_CHANNEL_CALLBACKTYPE *|FMOD_CHANNEL_CALLBACKTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_CREATESOUNDEXINFO = {"_p_FMOD_CREATESOUNDEXINFO", "FMOD_CREATESOUNDEXINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_DELAYTYPE = {"_p_FMOD_DELAYTYPE", "enum FMOD_DELAYTYPE *|FMOD_DELAYTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_DSP = {"_p_FMOD_DSP", "FMOD_DSP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_DSPCONNECTION = {"_p_FMOD_DSPCONNECTION", "FMOD_DSPCONNECTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_DSP_FFT_WINDOW = {"_p_FMOD_DSP_FFT_WINDOW", "enum FMOD_DSP_FFT_WINDOW *|FMOD_DSP_FFT_WINDOW *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_DSP_RESAMPLER = {"_p_FMOD_DSP_RESAMPLER", "enum FMOD_DSP_RESAMPLER *|FMOD_DSP_RESAMPLER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_GEOMETRY = {"_p_FMOD_GEOMETRY", "FMOD_GEOMETRY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_GUID = {"_p_FMOD_GUID", "FMOD_GUID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_OPENSTATE = {"_p_FMOD_OPENSTATE", "enum FMOD_OPENSTATE *|FMOD_OPENSTATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_OUTPUTTYPE = {"_p_FMOD_OUTPUTTYPE", "enum FMOD_OUTPUTTYPE *|FMOD_OUTPUTTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_PLUGINTYPE = {"_p_FMOD_PLUGINTYPE", "enum FMOD_PLUGINTYPE *|FMOD_PLUGINTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_POLYGON = {"_p_FMOD_POLYGON", "FMOD_POLYGON *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_RESULT = {"_p_FMOD_RESULT", "enum FMOD_RESULT *|FMOD_RESULT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_REVERB = {"_p_FMOD_REVERB", "FMOD_REVERB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_REVERB_CHANNELPROPERTIES = {"_p_FMOD_REVERB_CHANNELPROPERTIES", "FMOD_REVERB_CHANNELPROPERTIES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_REVERB_PROPERTIES = {"_p_FMOD_REVERB_PROPERTIES", "FMOD_REVERB_PROPERTIES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SOUND = {"_p_FMOD_SOUND", "FMOD_SOUND *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SOUNDGROUP = {"_p_FMOD_SOUNDGROUP", "FMOD_SOUNDGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SOUNDGROUP_BEHAVIOR = {"_p_FMOD_SOUNDGROUP_BEHAVIOR", "enum FMOD_SOUNDGROUP_BEHAVIOR *|FMOD_SOUNDGROUP_BEHAVIOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SOUND_FORMAT = {"_p_FMOD_SOUND_FORMAT", "enum FMOD_SOUND_FORMAT *|FMOD_SOUND_FORMAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SOUND_TYPE = {"_p_FMOD_SOUND_TYPE", "enum FMOD_SOUND_TYPE *|FMOD_SOUND_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SPEAKER = {"_p_FMOD_SPEAKER", "enum FMOD_SPEAKER *|FMOD_SPEAKER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SPEAKERMAPTYPE = {"_p_FMOD_SPEAKERMAPTYPE", "enum FMOD_SPEAKERMAPTYPE *|FMOD_SPEAKERMAPTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SPEAKERMODE = {"_p_FMOD_SPEAKERMODE", "enum FMOD_SPEAKERMODE *|FMOD_SPEAKERMODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SYNCPOINT = {"_p_FMOD_SYNCPOINT", "FMOD_SYNCPOINT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SYSTEM = {"_p_FMOD_SYSTEM", "FMOD_SYSTEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_SYSTEM_CALLBACKTYPE = {"_p_FMOD_SYSTEM_CALLBACKTYPE", "enum FMOD_SYSTEM_CALLBACKTYPE *|FMOD_SYSTEM_CALLBACKTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_TAG = {"_p_FMOD_TAG", "FMOD_TAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_TAGDATATYPE = {"_p_FMOD_TAGDATATYPE", "enum FMOD_TAGDATATYPE *|FMOD_TAGDATATYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_TAGTYPE = {"_p_FMOD_TAGTYPE", "enum FMOD_TAGTYPE *|FMOD_TAGTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FMOD_VECTOR = {"_p_FMOD_VECTOR", "FMOD_VECTOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectDuplicateMap = {"_p_ObjectDuplicateMap", "ObjectDuplicateMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectList = {"_p_ObjectList", "ObjectList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PHY_ScalarType = {"_p_PHY_ScalarType", "enum PHY_ScalarType *|PHY_ScalarType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t = {"_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t", "btSapBroadphaseArray *|btAlignedObjectArray< btBroadphaseInterface * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBroadphasePair_t = {"_p_btAlignedObjectArrayT_btBroadphasePair_t", "btBroadphasePairArray *|btAlignedObjectArray< btBroadphasePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t = {"_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t", "BvhSubtreeInfoArray *|btAlignedObjectArray< btBvhSubtreeInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t = {"_p_btAlignedObjectArrayT_btCollisionObject_p_t", "btCollisionObjectArray *|btAlignedObjectArray< btCollisionObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t = {"_p_btAlignedObjectArrayT_btDbvtProxy_p_t", "btDbvtProxyArray *|btAlignedObjectArray< btDbvtProxy * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btIndexedMesh_t = {"_p_btAlignedObjectArrayT_btIndexedMesh_t", "IndexedMeshArray *|btAlignedObjectArray< btIndexedMesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t = {"_p_btAlignedObjectArrayT_btOptimizedBvhNode_t", "NodeArray *|btAlignedObjectArray< btOptimizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t = {"_p_btAlignedObjectArrayT_btPersistentManifold_p_t", "btManifoldArray *|btAlignedObjectArray< btPersistentManifold * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t = {"_p_btAlignedObjectArrayT_btQuantizedBvhNode_t", "QuantizedNodeArray *|btAlignedObjectArray< btQuantizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSolverConstraint_t = {"_p_btAlignedObjectArrayT_btSolverConstraint_t", "btConstraintArray *|btAlignedObjectArray< btSolverConstraint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t = {"_p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t", "btAlignedObjectArray< jli::AbstractFactoryObject * > *|jli::WorldFactory::ObjectList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_jli__DeviceTouch_p_t = {"_p_btAlignedObjectArrayT_jli__DeviceTouch_p_t", "btAlignedObjectArray< jli::DeviceTouch * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConstraintRow = {"_p_btConstraintRow", "btConstraintRow *|PfxConstraintRow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDbvtAabbMm = {"_p_btDbvtAabbMm", "btDbvtAabbMm *|btDbvtVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHashMapT_btHashInt_btTriangleInfo_t = {"_p_btHashMapT_btHashInt_btTriangleInfo_t", "btInternalTriangleInfoMap *|btHashMap< btHashInt,btTriangleInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHashMapT_btHashPtr_int_t = {"_p_btHashMapT_btHashPtr_int_t", "jli::WorldFactory::ObjectDuplicateMap *|btHashMap< btHashPtr,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSerializer = {"_p_btSerializer", "btSerializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDefaultSerializer = {"_p_btDefaultSerializer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|GLchar *|s8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "btAlignedFreeFunc *|btFreeFunc *|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|btAllocFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t_int__p_void = {"_p_f_size_t_int__p_void", "btAlignedAllocFunc *|void *(*)(size_t,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|GLclampf *|float *|GLfloat *|btScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "size_type *|GLsizei *|int *|FMOD_BOOL *|GLclampx *|GLfixed *|s32 *|GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *|GLint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__AbstractBuilder = {"_p_jli__AbstractBuilder", "jli::AbstractBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__AbstractDecorator = {"_p_jli__AbstractDecorator", "jli::AbstractDecorator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__AbstractFactoryObject = {"_p_jli__AbstractFactoryObject", "jli::AbstractFactoryObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__AbstractObject = {"_p_jli__AbstractObject", "jli::AbstractObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__AbstractPhysicsBody = {"_p_jli__AbstractPhysicsBody", "jli::AbstractPhysicsBody *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__Action = {"_p_jli__Action", "jli::Action *", 0, 0, (void*)&_wrap_class_Action, 0};
static swig_type_info _swigt__p_jli__ActionBuilder = {"_p_jli__ActionBuilder", "jli::ActionBuilder *", 0, 0, (void*)&_wrap_class_ActionBuilder, 0};
static swig_type_info _swigt__p_jli__Camera = {"_p_jli__Camera", "jli::Camera *", 0, 0, (void*)&_wrap_class_Camera, 0};
static swig_type_info _swigt__p_jli__CameraBuilder = {"_p_jli__CameraBuilder", "jli::CameraBuilder *", 0, 0, (void*)&_wrap_class_CameraBuilder, 0};
static swig_type_info _swigt__p_jli__Clock = {"_p_jli__Clock", "jli::Clock *", 0, 0, (void*)&_wrap_class_Clock, 0};
static swig_type_info _swigt__p_jli__ClockBuilder = {"_p_jli__ClockBuilder", "jli::ClockBuilder *", 0, 0, (void*)&_wrap_class_ClockBuilder, 0};
static swig_type_info _swigt__p_jli__CollisionResponse = {"_p_jli__CollisionResponse", "jli::CollisionResponse *", 0, 0, (void*)&_wrap_class_CollisionResponse, 0};
static swig_type_info _swigt__p_jli__CollisionResponseBuilder = {"_p_jli__CollisionResponseBuilder", "jli::CollisionResponseBuilder *", 0, 0, (void*)&_wrap_class_CollisionResponseBuilder, 0};
static swig_type_info _swigt__p_jli__CubicTexture = {"_p_jli__CubicTexture", "jli::CubicTexture *", 0, 0, (void*)&_wrap_class_CubicTexture, 0};
static swig_type_info _swigt__p_jli__CubicTextureBuilder = {"_p_jli__CubicTextureBuilder", "jli::CubicTextureBuilder *", 0, 0, (void*)&_wrap_class_CubicTextureBuilder, 0};
static swig_type_info _swigt__p_jli__DynamicPhysicsBody = {"_p_jli__DynamicPhysicsBody", "jli::DynamicPhysicsBody *", 0, 0, (void*)&_wrap_class_DynamicPhysicsBody, 0};
static swig_type_info _swigt__p_jli__DynamicPhysicsBodyBuilder = {"_p_jli__DynamicPhysicsBodyBuilder", "jli::DynamicPhysicsBodyBuilder *", 0, 0, (void*)&_wrap_class_DynamicPhysicsBodyBuilder, 0};
static swig_type_info _swigt__p_jli__Geometry = {"_p_jli__Geometry", "jli::Geometry *", 0, 0, (void*)&_wrap_class_Geometry, 0};
static swig_type_info _swigt__p_jli__GeometryBuilder = {"_p_jli__GeometryBuilder", "jli::GeometryBuilder *", 0, 0, (void*)&_wrap_class_GeometryBuilder, 0};
static swig_type_info _swigt__p_jli__GhostPhysicsBody = {"_p_jli__GhostPhysicsBody", "jli::GhostPhysicsBody *", 0, 0, (void*)&_wrap_class_GhostPhysicsBody, 0};
static swig_type_info _swigt__p_jli__GhostPhysicsBodyBuilder = {"_p_jli__GhostPhysicsBodyBuilder", "jli::GhostPhysicsBodyBuilder *", 0, 0, (void*)&_wrap_class_GhostPhysicsBodyBuilder, 0};
static swig_type_info _swigt__p_jli__KinematicPhysicsBody = {"_p_jli__KinematicPhysicsBody", "jli::KinematicPhysicsBody *", 0, 0, (void*)&_wrap_class_KinematicPhysicsBody, 0};
static swig_type_info _swigt__p_jli__KinematicPhysicsBodyBuilder = {"_p_jli__KinematicPhysicsBodyBuilder", "jli::KinematicPhysicsBodyBuilder *", 0, 0, (void*)&_wrap_class_KinematicPhysicsBodyBuilder, 0};
static swig_type_info _swigt__p_jli__Light = {"_p_jli__Light", "jli::Light *", 0, 0, (void*)&_wrap_class_Light, 0};
static swig_type_info _swigt__p_jli__LightBuilder = {"_p_jli__LightBuilder", "jli::LightBuilder *", 0, 0, (void*)&_wrap_class_LightBuilder, 0};
static swig_type_info _swigt__p_jli__Material = {"_p_jli__Material", "jli::Material *", 0, 0, (void*)&_wrap_class_Material, 0};
static swig_type_info _swigt__p_jli__MaterialBuilder = {"_p_jli__MaterialBuilder", "jli::MaterialBuilder *", 0, 0, (void*)&_wrap_class_MaterialBuilder, 0};
static swig_type_info _swigt__p_jli__MaterialProperty = {"_p_jli__MaterialProperty", "jli::MaterialProperty *", 0, 0, (void*)&_wrap_class_MaterialProperty, 0};
static swig_type_info _swigt__p_jli__MaterialPropertyBuilder = {"_p_jli__MaterialPropertyBuilder", "jli::MaterialPropertyBuilder *", 0, 0, (void*)&_wrap_class_MaterialPropertyBuilder, 0};
static swig_type_info _swigt__p_jli__Node = {"_p_jli__Node", "jli::Node *", 0, 0, (void*)&_wrap_class_Node, 0};
static swig_type_info _swigt__p_jli__NodeBuilder = {"_p_jli__NodeBuilder", "jli::NodeBuilder *", 0, 0, (void*)&_wrap_class_NodeBuilder, 0};
static swig_type_info _swigt__p_jli__NodeState = {"_p_jli__NodeState", "jli::NodeState *", 0, 0, (void*)&_wrap_class_NodeState, 0};
static swig_type_info _swigt__p_jli__NodeStateBuilder = {"_p_jli__NodeStateBuilder", "jli::NodeStateBuilder *", 0, 0, (void*)&_wrap_class_NodeStateBuilder, 0};
static swig_type_info _swigt__p_jli__NodeStateMachine = {"_p_jli__NodeStateMachine", "jli::NodeStateMachine *", 0, 0, (void*)&_wrap_class_NodeStateMachine, 0};
static swig_type_info _swigt__p_jli__NodeStateMachineBuilder = {"_p_jli__NodeStateMachineBuilder", "jli::NodeStateMachineBuilder *", 0, 0, (void*)&_wrap_class_NodeStateMachineBuilder, 0};
static swig_type_info _swigt__p_jli__ParticleEmitter = {"_p_jli__ParticleEmitter", "jli::ParticleEmitter *", 0, 0, (void*)&_wrap_class_ParticleEmitter, 0};
static swig_type_info _swigt__p_jli__ParticleEmitterBuilder = {"_p_jli__ParticleEmitterBuilder", "jli::ParticleEmitterBuilder *", 0, 0, (void*)&_wrap_class_ParticleEmitterBuilder, 0};
static swig_type_info _swigt__p_jli__PhysicsContact = {"_p_jli__PhysicsContact", "jli::PhysicsContact *", 0, 0, (void*)&_wrap_class_PhysicsContact, 0};
static swig_type_info _swigt__p_jli__PhysicsContactBuilder = {"_p_jli__PhysicsContactBuilder", "jli::PhysicsContactBuilder *", 0, 0, (void*)&_wrap_class_PhysicsContactBuilder, 0};
static swig_type_info _swigt__p_jli__PhysicsField = {"_p_jli__PhysicsField", "jli::PhysicsField *", 0, 0, (void*)&_wrap_class_PhysicsField, 0};
static swig_type_info _swigt__p_jli__PhysicsFieldBuilder = {"_p_jli__PhysicsFieldBuilder", "jli::PhysicsFieldBuilder *", 0, 0, (void*)&_wrap_class_PhysicsFieldBuilder, 0};
static swig_type_info _swigt__p_jli__PhysicsShape = {"_p_jli__PhysicsShape", "jli::PhysicsShape *", 0, 0, (void*)&_wrap_class_PhysicsShape, 0};
static swig_type_info _swigt__p_jli__PhysicsShapeBuilder = {"_p_jli__PhysicsShapeBuilder", "jli::PhysicsShapeBuilder *", 0, 0, (void*)&_wrap_class_PhysicsShapeBuilder, 0};
static swig_type_info _swigt__p_jli__PhysicsWorld = {"_p_jli__PhysicsWorld", "jli::PhysicsWorld *", 0, 0, (void*)&_wrap_class_PhysicsWorld, 0};
static swig_type_info _swigt__p_jli__PhysicsWorldBuilder = {"_p_jli__PhysicsWorldBuilder", "jli::PhysicsWorldBuilder *", 0, 0, (void*)&_wrap_class_PhysicsWorldBuilder, 0};
static swig_type_info _swigt__p_jli__Resource = {"_p_jli__Resource", "jli::Resource *", 0, 0, (void*)&_wrap_class_Resource, 0};
static swig_type_info _swigt__p_jli__ResourceBuilder = {"_p_jli__ResourceBuilder", "jli::ResourceBuilder *", 0, 0, (void*)&_wrap_class_ResourceBuilder, 0};
static swig_type_info _swigt__p_jli__RigidPhysicsBody = {"_p_jli__RigidPhysicsBody", "jli::RigidPhysicsBody *", 0, 0, (void*)&_wrap_class_RigidPhysicsBody, 0};
static swig_type_info _swigt__p_jli__RigidPhysicsBodyBuilder = {"_p_jli__RigidPhysicsBodyBuilder", "jli::RigidPhysicsBodyBuilder *", 0, 0, (void*)&_wrap_class_RigidPhysicsBodyBuilder, 0};
static swig_type_info _swigt__p_jli__Scene = {"_p_jli__Scene", "jli::Scene *", 0, 0, (void*)&_wrap_class_Scene, 0};
static swig_type_info _swigt__p_jli__SceneBuilder = {"_p_jli__SceneBuilder", "jli::SceneBuilder *", 0, 0, (void*)&_wrap_class_SceneBuilder, 0};
static swig_type_info _swigt__p_jli__SceneState = {"_p_jli__SceneState", "jli::SceneState *", 0, 0, (void*)&_wrap_class_SceneState, 0};
static swig_type_info _swigt__p_jli__SceneStateBuilder = {"_p_jli__SceneStateBuilder", "jli::SceneStateBuilder *", 0, 0, (void*)&_wrap_class_SceneStateBuilder, 0};
static swig_type_info _swigt__p_jli__SceneStateMachine = {"_p_jli__SceneStateMachine", "jli::SceneStateMachine *", 0, 0, (void*)&_wrap_class_SceneStateMachine, 0};
static swig_type_info _swigt__p_jli__SceneStateMachineBuilder = {"_p_jli__SceneStateMachineBuilder", "jli::SceneStateMachineBuilder *", 0, 0, (void*)&_wrap_class_SceneStateMachineBuilder, 0};
static swig_type_info _swigt__p_jli__SoftPhysicsBody = {"_p_jli__SoftPhysicsBody", "jli::SoftPhysicsBody *", 0, 0, (void*)&_wrap_class_SoftPhysicsBody, 0};
static swig_type_info _swigt__p_jli__SoftPhysicsBodyBuilder = {"_p_jli__SoftPhysicsBodyBuilder", "jli::SoftPhysicsBodyBuilder *", 0, 0, (void*)&_wrap_class_SoftPhysicsBodyBuilder, 0};
static swig_type_info _swigt__p_jli__Sound = {"_p_jli__Sound", "jli::Sound *", 0, 0, (void*)&_wrap_class_Sound, 0};
static swig_type_info _swigt__p_jli__SoundBuilder = {"_p_jli__SoundBuilder", "jli::SoundBuilder *", 0, 0, (void*)&_wrap_class_SoundBuilder, 0};
static swig_type_info _swigt__p_jli__Telegram = {"_p_jli__Telegram", "jli::Telegram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jli__Texture = {"_p_jli__Texture", "jli::Texture *", 0, 0, (void*)&_wrap_class_Texture, 0};
static swig_type_info _swigt__p_jli__TextureBuilder = {"_p_jli__TextureBuilder", "jli::TextureBuilder *", 0, 0, (void*)&_wrap_class_TextureBuilder, 0};
static swig_type_info _swigt__p_jli__World = {"_p_jli__World", "jli::World *", 0, 0, (void*)&_wrap_class_World, 0};
static swig_type_info _swigt__p_jli__WorldFactory = {"_p_jli__WorldFactory", "jli::WorldFactory *", 0, 0, (void*)&_wrap_class_WorldFactory, 0};
static swig_type_info _swigt__p_jli__WorldLuaVirtualMachine = {"_p_jli__WorldLuaVirtualMachine", "jli::WorldLuaVirtualMachine *", 0, 0, (void*)&_wrap_class_WorldLuaVirtualMachine, 0};
static swig_type_info _swigt__p_jli__WorldMySQL = {"_p_jli__WorldMySQL", "jli::WorldMySQL *", 0, 0, (void*)&_wrap_class_WorldMySQL, 0};
static swig_type_info _swigt__p_jli__WorldSound = {"_p_jli__WorldSound", "jli::WorldSound *", 0, 0, (void*)&_wrap_class_WorldSound, 0};
static swig_type_info _swigt__p_jli__WorldState = {"_p_jli__WorldState", "jli::WorldState *", 0, 0, (void*)&_wrap_class_WorldState, 0};
static swig_type_info _swigt__p_jli__WorldStateBuilder = {"_p_jli__WorldStateBuilder", "jli::WorldStateBuilder *", 0, 0, (void*)&_wrap_class_WorldStateBuilder, 0};
static swig_type_info _swigt__p_jli__WorldStateMachine = {"_p_jli__WorldStateMachine", "jli::WorldStateMachine *", 0, 0, (void*)&_wrap_class_WorldStateMachine, 0};
static swig_type_info _swigt__p_jli__WorldStateMachineBuilder = {"_p_jli__WorldStateMachineBuilder", "jli::WorldStateMachineBuilder *", 0, 0, (void*)&_wrap_class_WorldStateMachineBuilder, 0};
static swig_type_info _swigt__p_long = {"_p_long", "GLsizeiptr *|GLintptr *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|s64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|s16 *|GLshort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|GLbyte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *|GLuint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|GLubyte *|GLboolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "FMOD_MEMORY_TYPE *|unsigned int *|GLuint *|FMOD_DEBUGLEVEL *|FMOD_TIMEUNIT *|FMOD_CAPS *|GLenum *|u32 *|FMOD_INITFLAGS *|GLbitfield *|FMOD_MODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|GLushort *|u16 *|GLhalf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *|GLvoid *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FMOD_ADVANCEDSETTINGS,
  &_swigt__p_FMOD_ASYNCREADINFO,
  &_swigt__p_FMOD_CDTOC,
  &_swigt__p_FMOD_CHANNEL,
  &_swigt__p_FMOD_CHANNELGROUP,
  &_swigt__p_FMOD_CHANNELINDEX,
  &_swigt__p_FMOD_CHANNEL_CALLBACKTYPE,
  &_swigt__p_FMOD_CREATESOUNDEXINFO,
  &_swigt__p_FMOD_DELAYTYPE,
  &_swigt__p_FMOD_DSP,
  &_swigt__p_FMOD_DSPCONNECTION,
  &_swigt__p_FMOD_DSP_FFT_WINDOW,
  &_swigt__p_FMOD_DSP_RESAMPLER,
  &_swigt__p_FMOD_GEOMETRY,
  &_swigt__p_FMOD_GUID,
  &_swigt__p_FMOD_OPENSTATE,
  &_swigt__p_FMOD_OUTPUTTYPE,
  &_swigt__p_FMOD_PLUGINTYPE,
  &_swigt__p_FMOD_POLYGON,
  &_swigt__p_FMOD_RESULT,
  &_swigt__p_FMOD_REVERB,
  &_swigt__p_FMOD_REVERB_CHANNELPROPERTIES,
  &_swigt__p_FMOD_REVERB_PROPERTIES,
  &_swigt__p_FMOD_SOUND,
  &_swigt__p_FMOD_SOUNDGROUP,
  &_swigt__p_FMOD_SOUNDGROUP_BEHAVIOR,
  &_swigt__p_FMOD_SOUND_FORMAT,
  &_swigt__p_FMOD_SOUND_TYPE,
  &_swigt__p_FMOD_SPEAKER,
  &_swigt__p_FMOD_SPEAKERMAPTYPE,
  &_swigt__p_FMOD_SPEAKERMODE,
  &_swigt__p_FMOD_SYNCPOINT,
  &_swigt__p_FMOD_SYSTEM,
  &_swigt__p_FMOD_SYSTEM_CALLBACKTYPE,
  &_swigt__p_FMOD_TAG,
  &_swigt__p_FMOD_TAGDATATYPE,
  &_swigt__p_FMOD_TAGTYPE,
  &_swigt__p_FMOD_VECTOR,
  &_swigt__p_ObjectDuplicateMap,
  &_swigt__p_ObjectList,
  &_swigt__p_PHY_ScalarType,
  &_swigt__p_bool,
  &_swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t,
  &_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t,
  &_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  &_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  &_swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t,
  &_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t,
  &_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  &_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t,
  &_swigt__p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t,
  &_swigt__p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,
  &_swigt__p_btConstraintRow,
  &_swigt__p_btDbvtAabbMm,
  &_swigt__p_btDefaultSerializer,
  &_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t,
  &_swigt__p_btHashMapT_btHashPtr_int_t,
  &_swigt__p_btSerializer,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_f_size_t_int__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int64_t,
  &_swigt__p_jli__AbstractBuilder,
  &_swigt__p_jli__AbstractDecorator,
  &_swigt__p_jli__AbstractFactoryObject,
  &_swigt__p_jli__AbstractObject,
  &_swigt__p_jli__AbstractPhysicsBody,
  &_swigt__p_jli__Action,
  &_swigt__p_jli__ActionBuilder,
  &_swigt__p_jli__Camera,
  &_swigt__p_jli__CameraBuilder,
  &_swigt__p_jli__Clock,
  &_swigt__p_jli__ClockBuilder,
  &_swigt__p_jli__CollisionResponse,
  &_swigt__p_jli__CollisionResponseBuilder,
  &_swigt__p_jli__CubicTexture,
  &_swigt__p_jli__CubicTextureBuilder,
  &_swigt__p_jli__DynamicPhysicsBody,
  &_swigt__p_jli__DynamicPhysicsBodyBuilder,
  &_swigt__p_jli__Geometry,
  &_swigt__p_jli__GeometryBuilder,
  &_swigt__p_jli__GhostPhysicsBody,
  &_swigt__p_jli__GhostPhysicsBodyBuilder,
  &_swigt__p_jli__KinematicPhysicsBody,
  &_swigt__p_jli__KinematicPhysicsBodyBuilder,
  &_swigt__p_jli__Light,
  &_swigt__p_jli__LightBuilder,
  &_swigt__p_jli__Material,
  &_swigt__p_jli__MaterialBuilder,
  &_swigt__p_jli__MaterialProperty,
  &_swigt__p_jli__MaterialPropertyBuilder,
  &_swigt__p_jli__Node,
  &_swigt__p_jli__NodeBuilder,
  &_swigt__p_jli__NodeState,
  &_swigt__p_jli__NodeStateBuilder,
  &_swigt__p_jli__NodeStateMachine,
  &_swigt__p_jli__NodeStateMachineBuilder,
  &_swigt__p_jli__ParticleEmitter,
  &_swigt__p_jli__ParticleEmitterBuilder,
  &_swigt__p_jli__PhysicsContact,
  &_swigt__p_jli__PhysicsContactBuilder,
  &_swigt__p_jli__PhysicsField,
  &_swigt__p_jli__PhysicsFieldBuilder,
  &_swigt__p_jli__PhysicsShape,
  &_swigt__p_jli__PhysicsShapeBuilder,
  &_swigt__p_jli__PhysicsWorld,
  &_swigt__p_jli__PhysicsWorldBuilder,
  &_swigt__p_jli__Resource,
  &_swigt__p_jli__ResourceBuilder,
  &_swigt__p_jli__RigidPhysicsBody,
  &_swigt__p_jli__RigidPhysicsBodyBuilder,
  &_swigt__p_jli__Scene,
  &_swigt__p_jli__SceneBuilder,
  &_swigt__p_jli__SceneState,
  &_swigt__p_jli__SceneStateBuilder,
  &_swigt__p_jli__SceneStateMachine,
  &_swigt__p_jli__SceneStateMachineBuilder,
  &_swigt__p_jli__SoftPhysicsBody,
  &_swigt__p_jli__SoftPhysicsBodyBuilder,
  &_swigt__p_jli__Sound,
  &_swigt__p_jli__SoundBuilder,
  &_swigt__p_jli__Telegram,
  &_swigt__p_jli__Texture,
  &_swigt__p_jli__TextureBuilder,
  &_swigt__p_jli__World,
  &_swigt__p_jli__WorldFactory,
  &_swigt__p_jli__WorldLuaVirtualMachine,
  &_swigt__p_jli__WorldMySQL,
  &_swigt__p_jli__WorldSound,
  &_swigt__p_jli__WorldState,
  &_swigt__p_jli__WorldStateBuilder,
  &_swigt__p_jli__WorldStateMachine,
  &_swigt__p_jli__WorldStateMachineBuilder,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FMOD_ADVANCEDSETTINGS[] = {  {&_swigt__p_FMOD_ADVANCEDSETTINGS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_ASYNCREADINFO[] = {  {&_swigt__p_FMOD_ASYNCREADINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CDTOC[] = {  {&_swigt__p_FMOD_CDTOC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CHANNEL[] = {  {&_swigt__p_FMOD_CHANNEL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CHANNELGROUP[] = {  {&_swigt__p_FMOD_CHANNELGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CHANNELINDEX[] = {  {&_swigt__p_FMOD_CHANNELINDEX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CHANNEL_CALLBACKTYPE[] = {  {&_swigt__p_FMOD_CHANNEL_CALLBACKTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_CREATESOUNDEXINFO[] = {  {&_swigt__p_FMOD_CREATESOUNDEXINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_DELAYTYPE[] = {  {&_swigt__p_FMOD_DELAYTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_DSP[] = {  {&_swigt__p_FMOD_DSP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_DSPCONNECTION[] = {  {&_swigt__p_FMOD_DSPCONNECTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_DSP_FFT_WINDOW[] = {  {&_swigt__p_FMOD_DSP_FFT_WINDOW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_DSP_RESAMPLER[] = {  {&_swigt__p_FMOD_DSP_RESAMPLER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_GEOMETRY[] = {  {&_swigt__p_FMOD_GEOMETRY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_GUID[] = {  {&_swigt__p_FMOD_GUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_OPENSTATE[] = {  {&_swigt__p_FMOD_OPENSTATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_OUTPUTTYPE[] = {  {&_swigt__p_FMOD_OUTPUTTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_PLUGINTYPE[] = {  {&_swigt__p_FMOD_PLUGINTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_POLYGON[] = {  {&_swigt__p_FMOD_POLYGON, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_RESULT[] = {  {&_swigt__p_FMOD_RESULT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_REVERB[] = {  {&_swigt__p_FMOD_REVERB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_REVERB_CHANNELPROPERTIES[] = {  {&_swigt__p_FMOD_REVERB_CHANNELPROPERTIES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_REVERB_PROPERTIES[] = {  {&_swigt__p_FMOD_REVERB_PROPERTIES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SOUND[] = {  {&_swigt__p_FMOD_SOUND, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SOUNDGROUP[] = {  {&_swigt__p_FMOD_SOUNDGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SOUNDGROUP_BEHAVIOR[] = {  {&_swigt__p_FMOD_SOUNDGROUP_BEHAVIOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SOUND_FORMAT[] = {  {&_swigt__p_FMOD_SOUND_FORMAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SOUND_TYPE[] = {  {&_swigt__p_FMOD_SOUND_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SPEAKER[] = {  {&_swigt__p_FMOD_SPEAKER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SPEAKERMAPTYPE[] = {  {&_swigt__p_FMOD_SPEAKERMAPTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SPEAKERMODE[] = {  {&_swigt__p_FMOD_SPEAKERMODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SYNCPOINT[] = {  {&_swigt__p_FMOD_SYNCPOINT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SYSTEM[] = {  {&_swigt__p_FMOD_SYSTEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_SYSTEM_CALLBACKTYPE[] = {  {&_swigt__p_FMOD_SYSTEM_CALLBACKTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_TAG[] = {  {&_swigt__p_FMOD_TAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_TAGDATATYPE[] = {  {&_swigt__p_FMOD_TAGDATATYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_TAGTYPE[] = {  {&_swigt__p_FMOD_TAGTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FMOD_VECTOR[] = {  {&_swigt__p_FMOD_VECTOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectDuplicateMap[] = {  {&_swigt__p_ObjectDuplicateMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectList[] = {  {&_swigt__p_ObjectList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PHY_ScalarType[] = {  {&_swigt__p_PHY_ScalarType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btDbvtProxy_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_jli__DeviceTouch_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_jli__DeviceTouch_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintRow[] = {  {&_swigt__p_btConstraintRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtAabbMm[] = {  {&_swigt__p_btDbvtAabbMm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t[] = {  {&_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashMapT_btHashPtr_int_t[] = {  {&_swigt__p_btHashMapT_btHashPtr_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultSerializer[] = {{&_swigt__p_btDefaultSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSerializer[] = {  {&_swigt__p_btSerializer, 0, 0, 0},  {&_swigt__p_btDefaultSerializer, _p_btDefaultSerializerTo_p_btSerializer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t_int__p_void[] = {  {&_swigt__p_f_size_t_int__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__AbstractBuilder[] = {  {&_swigt__p_jli__NodeStateBuilder, _p_jli__NodeStateBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__NodeBuilder, _p_jli__NodeBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__MaterialPropertyBuilder, _p_jli__MaterialPropertyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__MaterialBuilder, _p_jli__MaterialBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__LightBuilder, _p_jli__LightBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__KinematicPhysicsBodyBuilder, _p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__GhostPhysicsBodyBuilder, _p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__GeometryBuilder, _p_jli__GeometryBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__DynamicPhysicsBodyBuilder, _p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__CubicTextureBuilder, _p_jli__CubicTextureBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__CollisionResponseBuilder, _p_jli__CollisionResponseBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__ClockBuilder, _p_jli__ClockBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__CameraBuilder, _p_jli__CameraBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__AbstractBuilder, 0, 0, 0},  {&_swigt__p_jli__ActionBuilder, _p_jli__ActionBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__NodeStateMachineBuilder, _p_jli__NodeStateMachineBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__ParticleEmitterBuilder, _p_jli__ParticleEmitterBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__PhysicsContactBuilder, _p_jli__PhysicsContactBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__PhysicsFieldBuilder, _p_jli__PhysicsFieldBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__PhysicsShapeBuilder, _p_jli__PhysicsShapeBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__PhysicsWorldBuilder, _p_jli__PhysicsWorldBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__ResourceBuilder, _p_jli__ResourceBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__RigidPhysicsBodyBuilder, _p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__SceneBuilder, _p_jli__SceneBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__SceneStateBuilder, _p_jli__SceneStateBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__SceneStateMachineBuilder, _p_jli__SceneStateMachineBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__SoftPhysicsBodyBuilder, _p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__SoundBuilder, _p_jli__SoundBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__TextureBuilder, _p_jli__TextureBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__WorldStateBuilder, _p_jli__WorldStateBuilderTo_p_jli__AbstractBuilder, 0, 0},  {&_swigt__p_jli__WorldStateMachineBuilder, _p_jli__WorldStateMachineBuilderTo_p_jli__AbstractBuilder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__AbstractDecorator[] = {  {&_swigt__p_jli__AbstractDecorator, 0, 0, 0},  {&_swigt__p_jli__Node, _p_jli__NodeTo_p_jli__AbstractDecorator, 0, 0},  {&_swigt__p_jli__Scene, _p_jli__SceneTo_p_jli__AbstractDecorator, 0, 0},  {&_swigt__p_jli__Geometry, _p_jli__GeometryTo_p_jli__AbstractDecorator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__AbstractFactoryObject[] = {  {&_swigt__p_jli__PhysicsWorld, _p_jli__PhysicsWorldTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsShape, _p_jli__PhysicsShapeTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Scene, _p_jli__SceneTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Action, _p_jli__ActionTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Light, _p_jli__LightTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsField, _p_jli__PhysicsFieldTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Geometry, _p_jli__GeometryTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Resource, _p_jli__ResourceTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Sound, _p_jli__SoundTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__ParticleEmitterBuilder, _p_jli__ParticleEmitterBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__NodeStateMachineBuilder, _p_jli__NodeStateMachineBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__NodeStateBuilder, _p_jli__NodeStateBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__NodeBuilder, _p_jli__NodeBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__MaterialPropertyBuilder, _p_jli__MaterialPropertyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__MaterialBuilder, _p_jli__MaterialBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__LightBuilder, _p_jli__LightBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__KinematicPhysicsBodyBuilder, _p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__GhostPhysicsBodyBuilder, _p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__GeometryBuilder, _p_jli__GeometryBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__DynamicPhysicsBodyBuilder, _p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__AbstractBuilder, _p_jli__AbstractBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__ActionBuilder, _p_jli__ActionBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__CameraBuilder, _p_jli__CameraBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__ClockBuilder, _p_jli__ClockBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__CollisionResponseBuilder, _p_jli__CollisionResponseBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__CubicTextureBuilder, _p_jli__CubicTextureBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsContactBuilder, _p_jli__PhysicsContactBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsFieldBuilder, _p_jli__PhysicsFieldBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsShapeBuilder, _p_jli__PhysicsShapeBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SceneBuilder, _p_jli__SceneBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__RigidPhysicsBodyBuilder, _p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__ResourceBuilder, _p_jli__ResourceBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsWorldBuilder, _p_jli__PhysicsWorldBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SceneStateBuilder, _p_jli__SceneStateBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SceneStateMachineBuilder, _p_jli__SceneStateMachineBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SoftPhysicsBodyBuilder, _p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SoundBuilder, _p_jli__SoundBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__TextureBuilder, _p_jli__TextureBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__WorldStateBuilder, _p_jli__WorldStateBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__WorldStateMachineBuilder, _p_jli__WorldStateMachineBuilderTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Texture, _p_jli__TextureTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__CubicTexture, _p_jli__CubicTextureTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Material, _p_jli__MaterialTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__ParticleEmitter, _p_jli__ParticleEmitterTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__PhysicsContact, _p_jli__PhysicsContactTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Camera, _p_jli__CameraTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__CollisionResponse, _p_jli__CollisionResponseTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__AbstractFactoryObject, 0, 0, 0},  {&_swigt__p_jli__MaterialProperty, _p_jli__MaterialPropertyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Clock, _p_jli__ClockTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__Node, _p_jli__NodeTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__KinematicPhysicsBody, _p_jli__KinematicPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__GhostPhysicsBody, _p_jli__GhostPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__AbstractPhysicsBody, _p_jli__AbstractPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__RigidPhysicsBody, _p_jli__RigidPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__DynamicPhysicsBody, _p_jli__DynamicPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},  {&_swigt__p_jli__SoftPhysicsBody, _p_jli__SoftPhysicsBodyTo_p_jli__AbstractFactoryObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__AbstractObject[] = {  {&_swigt__p_jli__PhysicsWorld, _p_jli__PhysicsWorldTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsShape, _p_jli__PhysicsShapeTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Scene, _p_jli__SceneTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Action, _p_jli__ActionTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Light, _p_jli__LightTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsField, _p_jli__PhysicsFieldTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Geometry, _p_jli__GeometryTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Resource, _p_jli__ResourceTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Sound, _p_jli__SoundTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__AbstractObject, 0, 0, 0},  {&_swigt__p_jli__NodeStateMachineBuilder, _p_jli__NodeStateMachineBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__NodeStateBuilder, _p_jli__NodeStateBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__NodeBuilder, _p_jli__NodeBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__MaterialPropertyBuilder, _p_jli__MaterialPropertyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__MaterialBuilder, _p_jli__MaterialBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__LightBuilder, _p_jli__LightBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__KinematicPhysicsBodyBuilder, _p_jli__KinematicPhysicsBodyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__GhostPhysicsBodyBuilder, _p_jli__GhostPhysicsBodyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__GeometryBuilder, _p_jli__GeometryBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__DynamicPhysicsBodyBuilder, _p_jli__DynamicPhysicsBodyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__CubicTextureBuilder, _p_jli__CubicTextureBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__AbstractBuilder, _p_jli__AbstractBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__ActionBuilder, _p_jli__ActionBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__CameraBuilder, _p_jli__CameraBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__ClockBuilder, _p_jli__ClockBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__CollisionResponseBuilder, _p_jli__CollisionResponseBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__ParticleEmitterBuilder, _p_jli__ParticleEmitterBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsContactBuilder, _p_jli__PhysicsContactBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsFieldBuilder, _p_jli__PhysicsFieldBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsShapeBuilder, _p_jli__PhysicsShapeBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SceneBuilder, _p_jli__SceneBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__RigidPhysicsBodyBuilder, _p_jli__RigidPhysicsBodyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__ResourceBuilder, _p_jli__ResourceBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsWorldBuilder, _p_jli__PhysicsWorldBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SceneStateBuilder, _p_jli__SceneStateBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SceneStateMachineBuilder, _p_jli__SceneStateMachineBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SoftPhysicsBodyBuilder, _p_jli__SoftPhysicsBodyBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SoundBuilder, _p_jli__SoundBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__TextureBuilder, _p_jli__TextureBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__WorldStateBuilder, _p_jli__WorldStateBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__WorldStateMachineBuilder, _p_jli__WorldStateMachineBuilderTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Texture, _p_jli__TextureTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__CubicTexture, _p_jli__CubicTextureTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Material, _p_jli__MaterialTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__AbstractDecorator, _p_jli__AbstractDecoratorTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__ParticleEmitter, _p_jli__ParticleEmitterTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__PhysicsContact, _p_jli__PhysicsContactTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Camera, _p_jli__CameraTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__CollisionResponse, _p_jli__CollisionResponseTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__AbstractFactoryObject, _p_jli__AbstractFactoryObjectTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__MaterialProperty, _p_jli__MaterialPropertyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Clock, _p_jli__ClockTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__Node, _p_jli__NodeTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__KinematicPhysicsBody, _p_jli__KinematicPhysicsBodyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__GhostPhysicsBody, _p_jli__GhostPhysicsBodyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__AbstractPhysicsBody, _p_jli__AbstractPhysicsBodyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__RigidPhysicsBody, _p_jli__RigidPhysicsBodyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__DynamicPhysicsBody, _p_jli__DynamicPhysicsBodyTo_p_jli__AbstractObject, 0, 0},  {&_swigt__p_jli__SoftPhysicsBody, _p_jli__SoftPhysicsBodyTo_p_jli__AbstractObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__AbstractPhysicsBody[] = {  {&_swigt__p_jli__AbstractPhysicsBody, 0, 0, 0},  {&_swigt__p_jli__RigidPhysicsBody, _p_jli__RigidPhysicsBodyTo_p_jli__AbstractPhysicsBody, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Action[] = {  {&_swigt__p_jli__Action, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__ActionBuilder[] = {  {&_swigt__p_jli__ActionBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Camera[] = {  {&_swigt__p_jli__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__CameraBuilder[] = {  {&_swigt__p_jli__CameraBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Clock[] = {  {&_swigt__p_jli__Clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__ClockBuilder[] = {  {&_swigt__p_jli__ClockBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__CollisionResponse[] = {  {&_swigt__p_jli__CollisionResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__CollisionResponseBuilder[] = {  {&_swigt__p_jli__CollisionResponseBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__CubicTexture[] = {  {&_swigt__p_jli__CubicTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__CubicTextureBuilder[] = {  {&_swigt__p_jli__CubicTextureBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__DynamicPhysicsBody[] = {  {&_swigt__p_jli__DynamicPhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__DynamicPhysicsBodyBuilder[] = {  {&_swigt__p_jli__DynamicPhysicsBodyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Geometry[] = {  {&_swigt__p_jli__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__GeometryBuilder[] = {  {&_swigt__p_jli__GeometryBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__GhostPhysicsBody[] = {  {&_swigt__p_jli__GhostPhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__GhostPhysicsBodyBuilder[] = {  {&_swigt__p_jli__GhostPhysicsBodyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__KinematicPhysicsBody[] = {  {&_swigt__p_jli__KinematicPhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__KinematicPhysicsBodyBuilder[] = {  {&_swigt__p_jli__KinematicPhysicsBodyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Light[] = {  {&_swigt__p_jli__Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__LightBuilder[] = {  {&_swigt__p_jli__LightBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Material[] = {  {&_swigt__p_jli__Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__MaterialBuilder[] = {  {&_swigt__p_jli__MaterialBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__MaterialProperty[] = {  {&_swigt__p_jli__MaterialProperty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__MaterialPropertyBuilder[] = {  {&_swigt__p_jli__MaterialPropertyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Node[] = {  {&_swigt__p_jli__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__NodeBuilder[] = {  {&_swigt__p_jli__NodeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__NodeState[] = {  {&_swigt__p_jli__NodeState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__NodeStateBuilder[] = {  {&_swigt__p_jli__NodeStateBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__NodeStateMachine[] = {  {&_swigt__p_jli__NodeStateMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__NodeStateMachineBuilder[] = {  {&_swigt__p_jli__NodeStateMachineBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__ParticleEmitter[] = {  {&_swigt__p_jli__ParticleEmitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__ParticleEmitterBuilder[] = {  {&_swigt__p_jli__ParticleEmitterBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsContact[] = {  {&_swigt__p_jli__PhysicsContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsContactBuilder[] = {  {&_swigt__p_jli__PhysicsContactBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsField[] = {  {&_swigt__p_jli__PhysicsField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsFieldBuilder[] = {  {&_swigt__p_jli__PhysicsFieldBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsShape[] = {  {&_swigt__p_jli__PhysicsShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsShapeBuilder[] = {  {&_swigt__p_jli__PhysicsShapeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsWorld[] = {  {&_swigt__p_jli__PhysicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__PhysicsWorldBuilder[] = {  {&_swigt__p_jli__PhysicsWorldBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Resource[] = {  {&_swigt__p_jli__Resource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__ResourceBuilder[] = {  {&_swigt__p_jli__ResourceBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__RigidPhysicsBody[] = {  {&_swigt__p_jli__RigidPhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__RigidPhysicsBodyBuilder[] = {  {&_swigt__p_jli__RigidPhysicsBodyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Scene[] = {  {&_swigt__p_jli__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SceneBuilder[] = {  {&_swigt__p_jli__SceneBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SceneState[] = {  {&_swigt__p_jli__SceneState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SceneStateBuilder[] = {  {&_swigt__p_jli__SceneStateBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SceneStateMachine[] = {  {&_swigt__p_jli__SceneStateMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SceneStateMachineBuilder[] = {  {&_swigt__p_jli__SceneStateMachineBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SoftPhysicsBody[] = {  {&_swigt__p_jli__SoftPhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SoftPhysicsBodyBuilder[] = {  {&_swigt__p_jli__SoftPhysicsBodyBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Sound[] = {  {&_swigt__p_jli__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__SoundBuilder[] = {  {&_swigt__p_jli__SoundBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Telegram[] = {  {&_swigt__p_jli__Telegram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__Texture[] = {  {&_swigt__p_jli__Texture, 0, 0, 0},  {&_swigt__p_jli__CubicTexture, _p_jli__CubicTextureTo_p_jli__Texture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__TextureBuilder[] = {  {&_swigt__p_jli__TextureBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__World[] = {  {&_swigt__p_jli__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldFactory[] = {  {&_swigt__p_jli__WorldFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldLuaVirtualMachine[] = {  {&_swigt__p_jli__WorldLuaVirtualMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldMySQL[] = {  {&_swigt__p_jli__WorldMySQL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldSound[] = {  {&_swigt__p_jli__WorldSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldState[] = {  {&_swigt__p_jli__WorldState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldStateBuilder[] = {  {&_swigt__p_jli__WorldStateBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldStateMachine[] = {  {&_swigt__p_jli__WorldStateMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jli__WorldStateMachineBuilder[] = {  {&_swigt__p_jli__WorldStateMachineBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FMOD_ADVANCEDSETTINGS,
  _swigc__p_FMOD_ASYNCREADINFO,
  _swigc__p_FMOD_CDTOC,
  _swigc__p_FMOD_CHANNEL,
  _swigc__p_FMOD_CHANNELGROUP,
  _swigc__p_FMOD_CHANNELINDEX,
  _swigc__p_FMOD_CHANNEL_CALLBACKTYPE,
  _swigc__p_FMOD_CREATESOUNDEXINFO,
  _swigc__p_FMOD_DELAYTYPE,
  _swigc__p_FMOD_DSP,
  _swigc__p_FMOD_DSPCONNECTION,
  _swigc__p_FMOD_DSP_FFT_WINDOW,
  _swigc__p_FMOD_DSP_RESAMPLER,
  _swigc__p_FMOD_GEOMETRY,
  _swigc__p_FMOD_GUID,
  _swigc__p_FMOD_OPENSTATE,
  _swigc__p_FMOD_OUTPUTTYPE,
  _swigc__p_FMOD_PLUGINTYPE,
  _swigc__p_FMOD_POLYGON,
  _swigc__p_FMOD_RESULT,
  _swigc__p_FMOD_REVERB,
  _swigc__p_FMOD_REVERB_CHANNELPROPERTIES,
  _swigc__p_FMOD_REVERB_PROPERTIES,
  _swigc__p_FMOD_SOUND,
  _swigc__p_FMOD_SOUNDGROUP,
  _swigc__p_FMOD_SOUNDGROUP_BEHAVIOR,
  _swigc__p_FMOD_SOUND_FORMAT,
  _swigc__p_FMOD_SOUND_TYPE,
  _swigc__p_FMOD_SPEAKER,
  _swigc__p_FMOD_SPEAKERMAPTYPE,
  _swigc__p_FMOD_SPEAKERMODE,
  _swigc__p_FMOD_SYNCPOINT,
  _swigc__p_FMOD_SYSTEM,
  _swigc__p_FMOD_SYSTEM_CALLBACKTYPE,
  _swigc__p_FMOD_TAG,
  _swigc__p_FMOD_TAGDATATYPE,
  _swigc__p_FMOD_TAGTYPE,
  _swigc__p_FMOD_VECTOR,
  _swigc__p_ObjectDuplicateMap,
  _swigc__p_ObjectList,
  _swigc__p_PHY_ScalarType,
  _swigc__p_bool,
  _swigc__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t,
  _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t,
  _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  _swigc__p_btAlignedObjectArrayT_btDbvtProxy_p_t,
  _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t,
  _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t,
  _swigc__p_btAlignedObjectArrayT_jli__AbstractFactoryObject_p_t,
  _swigc__p_btAlignedObjectArrayT_jli__DeviceTouch_p_t,
  _swigc__p_btConstraintRow,
  _swigc__p_btDbvtAabbMm,
  _swigc__p_btDefaultSerializer,
  _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t,
  _swigc__p_btHashMapT_btHashPtr_int_t,
  _swigc__p_btSerializer,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_f_size_t__p_void,
  _swigc__p_f_size_t_int__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int64_t,
  _swigc__p_jli__AbstractBuilder,
  _swigc__p_jli__AbstractDecorator,
  _swigc__p_jli__AbstractFactoryObject,
  _swigc__p_jli__AbstractObject,
  _swigc__p_jli__AbstractPhysicsBody,
  _swigc__p_jli__Action,
  _swigc__p_jli__ActionBuilder,
  _swigc__p_jli__Camera,
  _swigc__p_jli__CameraBuilder,
  _swigc__p_jli__Clock,
  _swigc__p_jli__ClockBuilder,
  _swigc__p_jli__CollisionResponse,
  _swigc__p_jli__CollisionResponseBuilder,
  _swigc__p_jli__CubicTexture,
  _swigc__p_jli__CubicTextureBuilder,
  _swigc__p_jli__DynamicPhysicsBody,
  _swigc__p_jli__DynamicPhysicsBodyBuilder,
  _swigc__p_jli__Geometry,
  _swigc__p_jli__GeometryBuilder,
  _swigc__p_jli__GhostPhysicsBody,
  _swigc__p_jli__GhostPhysicsBodyBuilder,
  _swigc__p_jli__KinematicPhysicsBody,
  _swigc__p_jli__KinematicPhysicsBodyBuilder,
  _swigc__p_jli__Light,
  _swigc__p_jli__LightBuilder,
  _swigc__p_jli__Material,
  _swigc__p_jli__MaterialBuilder,
  _swigc__p_jli__MaterialProperty,
  _swigc__p_jli__MaterialPropertyBuilder,
  _swigc__p_jli__Node,
  _swigc__p_jli__NodeBuilder,
  _swigc__p_jli__NodeState,
  _swigc__p_jli__NodeStateBuilder,
  _swigc__p_jli__NodeStateMachine,
  _swigc__p_jli__NodeStateMachineBuilder,
  _swigc__p_jli__ParticleEmitter,
  _swigc__p_jli__ParticleEmitterBuilder,
  _swigc__p_jli__PhysicsContact,
  _swigc__p_jli__PhysicsContactBuilder,
  _swigc__p_jli__PhysicsField,
  _swigc__p_jli__PhysicsFieldBuilder,
  _swigc__p_jli__PhysicsShape,
  _swigc__p_jli__PhysicsShapeBuilder,
  _swigc__p_jli__PhysicsWorld,
  _swigc__p_jli__PhysicsWorldBuilder,
  _swigc__p_jli__Resource,
  _swigc__p_jli__ResourceBuilder,
  _swigc__p_jli__RigidPhysicsBody,
  _swigc__p_jli__RigidPhysicsBodyBuilder,
  _swigc__p_jli__Scene,
  _swigc__p_jli__SceneBuilder,
  _swigc__p_jli__SceneState,
  _swigc__p_jli__SceneStateBuilder,
  _swigc__p_jli__SceneStateMachine,
  _swigc__p_jli__SceneStateMachineBuilder,
  _swigc__p_jli__SoftPhysicsBody,
  _swigc__p_jli__SoftPhysicsBodyBuilder,
  _swigc__p_jli__Sound,
  _swigc__p_jli__SoundBuilder,
  _swigc__p_jli__Telegram,
  _swigc__p_jli__Texture,
  _swigc__p_jli__TextureBuilder,
  _swigc__p_jli__World,
  _swigc__p_jli__WorldFactory,
  _swigc__p_jli__WorldLuaVirtualMachine,
  _swigc__p_jli__WorldMySQL,
  _swigc__p_jli__WorldSound,
  _swigc__p_jli__WorldState,
  _swigc__p_jli__WorldStateBuilder,
  _swigc__p_jli__WorldStateMachine,
  _swigc__p_jli__WorldStateMachineBuilder,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

