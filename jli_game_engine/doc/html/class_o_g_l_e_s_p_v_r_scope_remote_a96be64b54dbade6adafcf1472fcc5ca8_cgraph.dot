digraph "OGLESPVRScopeRemote::InitApplication"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="OGLESPVRScopeRemote\l::InitApplication",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="pplInitialise",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___scope_comms.html#gac78024eaa66a39bc546e9a1b15529e3d",tooltip="Initialise PVRScopeComms. "];
  Node1 -> Node3 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="pplSendMark",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___scope_comms.html#ga855d70bb07956fd9ddc1feced46c5015",tooltip="Send a time-stamped string marker to be displayed in PVRTune. "];
  Node1 -> Node4 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="pplWaitForConnection",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___scope_comms.html#ga498873ebc2d0513afe3c141dd43a75c6",tooltip="Optional function. Sleeps until there is a connection to PVRPerfServer, or time-out. Normally, each thread will wait for its own connection, and each time-out will naturally happen in parallel. But if a thread happens to have multiple connections, N, then waiting for them all [in serial] with time-out M would take N*M ms if they were all to time-out (e.g. PVRPerfServer is not running); therefore this function, is designed to allow an entire array of connections to be waited upon simultaneously. "];
  Node1 -> Node5 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="CPVRTResourceFile::\lSetReadPath",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_resource_file.html#a0e289bb7f281f32af4497d26753f577c",tooltip="Sets the read path. "];
  Node1 -> Node6 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="PVRShell::PVRShellGet",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_p_v_r_shell.html#ad58b00376cdae7a8aeea41fc17367bfd",tooltip="This function is used to get parameters from the PVRShell. It can be called from anywhere in the prog..."];
  Node1 -> Node7 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="CPVRTResourceFile::\lSetLoadReleaseFunctions",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_resource_file.html#a798c5394174550e8c18e3113c9485fce",tooltip="This function is used to override the CPVRTResource file loading functions. If you pass NULL in as th..."];
  Node1 -> Node8 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="CPVRTModelPOD::ReadFromFile",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#abe43b961eabe1c9db94545b97c84c71f",tooltip="Loads the specified \".POD\" file; returns the scene in pScene. This structure must later be destroyed ..."];
  Node8 -> Node9 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="CSourceStream::Init",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_source_stream.html#ab0ebb0e543b50e391d1e73a8cf40162e"];
  Node9 -> Node10 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="CPVRTResourceFile::\lIsOpen",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_resource_file.html#a484df820e9829438c0601bbc0aef7797",tooltip="Is the file open. "];
  Node1 -> Node11 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="PVRShell::PVRShellSet",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_p_v_r_shell.html#afe4052dde87d659948defdd63529eee6",tooltip="This function is used to pass preferences to the PVRShell. If used, this function must be called from..."];
  Node1 -> Node12 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="CPVRTString::c_str",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_string.html#aabd1f2848c4b1d65e7418b264502687d",tooltip="Returns a const char* pointer of the string. "];
  Node1 -> Node13 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="pplLibraryCreate",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___scope_comms.html#ga7d0601be52b7dc4079aa48f91df78070",tooltip="Create a library of remotely editable items. "];
  Node1 -> Node14 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="PVRShell::PVRShellOutput\lDebug",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_p_v_r_shell.html#a143d693b1c6e373b29485c1be51d1010",tooltip="Writes the resultant string to the debug output (e.g. using printf(), OutputDebugString(), ...). Check the SDK release notes for details on how the string is output. "];
  Node1 -> Node15 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="pplCountersCreate",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___scope_comms.html#gaa885071a93f7e490ecc35f9e127eef99",tooltip="Specify the number of custom counters and their definitions. "];
}
