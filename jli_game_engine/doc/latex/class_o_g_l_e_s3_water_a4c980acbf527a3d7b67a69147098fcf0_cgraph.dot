digraph "OGLES3Water::RenderWaterTexture"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="OGLES3Water::RenderWater\lTexture",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [color="midnightblue",fontsize="10",style="solid"];
  Node2 [label="OGLES3Water::SetView",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_o_g_l_e_s3_water.html#a3ef2b92aa2c942fca58dd5195ba2a48c"];
  Node2 -> Node3 [color="midnightblue",fontsize="10",style="solid"];
  Node3 [label="PVRTMat4::LookAtRH",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a2c91f861b78d38e0f9ea3c6728a0b03a",tooltip="Create a look-at view matrix for a right hand coordinate system. "];
  Node3 -> Node4 [color="midnightblue",fontsize="10",style="solid"];
  Node4 [label="PVRTMat4::LookAt",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a499e05ac090b56a6c9478b254d68cab5",tooltip="Create a look-at view matrix. "];
  Node4 -> Node5 [color="midnightblue",fontsize="10",style="solid"];
  Node5 [label="PVRTVec3::normalize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_vec3.html#a18fbcf5025ed7c64bb00ba27f94302a4",tooltip="normalizes the vector "];
  Node5 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node6 [label="PVRTVec3::dot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_vec3.html#af9156c21175c3f3b04fb11295f336623",tooltip="calculate the scalar product of two PVRTVec3s "];
  Node5 -> Node7 [color="midnightblue",fontsize="10",style="solid"];
  Node7 [label="PVRTVec3::length",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_vec3.html#aa2c1f573d504ea9ebe52d112cfd91222",tooltip="calculates the magnitude of the vector "];
  Node4 -> Node8 [color="midnightblue",fontsize="10",style="solid"];
  Node8 [label="PVRTVec3::cross",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_vec3.html#ae5c0781b20ea9945ba92567e77782b92",tooltip="calculate the cross product of two PVRTVec3s "];
  Node4 -> Node9 [color="midnightblue",fontsize="10",style="solid"];
  Node9 [label="PVRTVec3::normalized",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_vec3.html#ac5c54e180c246587037d2f7fa2c4d12d",tooltip="returns a normalized vector of the same direction as this vector "];
  Node9 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node9 -> Node7 [color="midnightblue",fontsize="10",style="solid"];
  Node4 -> Node10 [color="midnightblue",fontsize="10",style="solid"];
  Node10 [label="PVRTMat4::postTranslate",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a53a4cffcb0692d8c7d8bc180d8235a8d",tooltip="Alters the translation component of the transformation matrix. "];
  Node2 -> Node11 [color="midnightblue",fontsize="10",style="solid"];
  Node11 [label="CPVRTModelPOD::GetCameraPos",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#a169b7cd0640846ee50a1ec7f1ba72550",tooltip="Calculate the position of the camera and its target. Uses animation data. If the queried camera does ..."];
  Node11 -> Node12 [color="midnightblue",fontsize="10",style="solid"];
  Node12 [label="CPVRTModelPOD::GetWorldMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#a275eceb98a361d91d77e15b54238a8de",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node12 -> Node13 [color="midnightblue",fontsize="10",style="solid"];
  Node13 [label="CPVRTModelPOD::GetWorldMatrix\lNoCache",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#a5d8930577009f9c922665522ca9bb1c3",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node13 -> Node14 [color="midnightblue",fontsize="10",style="solid"];
  Node14 [label="CPVRTModelPOD::GetTransformation\lMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#ab614a904956547c6cd7c623046f888b2",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node13 -> Node15 [color="midnightblue",fontsize="10",style="solid"];
  Node15 [label="CPVRTModelPOD::GetScaling\lMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#aaf982331192d8590949796dd61777c8a",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node13 -> Node16 [color="midnightblue",fontsize="10",style="solid"];
  Node16 [label="CPVRTModelPOD::GetRotation\lMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#a021fd16d1c7d7f3e09ba1e133289d0e7",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node13 -> Node17 [color="midnightblue",fontsize="10",style="solid"];
  Node17 [label="CPVRTModelPOD::GetTranslation\lMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#a5b9cdd65e3f36c6fe3c0a6937892d506",tooltip="Generates the world matrix for the given Mesh Instance; applies the parent&#39;s transform too..."];
  Node2 -> Node18 [color="midnightblue",fontsize="10",style="solid"];
  Node18 [label="CPVRTModelPOD::GetCamera",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_p_v_r_t_model_p_o_d.html#aa96ff6f192ed302b0f0b5461c2b266d9",tooltip="Calculate the From, To and Up vectors for the given camera. Uses animation data. Note that even if th..."];
  Node18 -> Node12 [color="midnightblue",fontsize="10",style="solid"];
  Node1 -> Node19 [color="midnightblue",fontsize="10",style="solid"];
  Node19 [label="OGLES3Water::SetProjection",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_o_g_l_e_s3_water.html#a68c0c0f26e937fad98a108fe16ef3989"];
  Node19 -> Node20 [color="midnightblue",fontsize="10",style="solid"];
  Node20 [label="PVRShell::PVRShellGet",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_p_v_r_shell.html#ad58b00376cdae7a8aeea41fc17367bfd",tooltip="This function is used to get parameters from the PVRShell. It can be called from anywhere in the prog..."];
  Node19 -> Node21 [color="midnightblue",fontsize="10",style="solid"];
  Node21 [label="PVRTMat4::PerspectiveFovRH",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a614e5b42b69d123e1969e33ad8ae0e81",tooltip="Create a perspective matrix for a right hand coordinate system. "];
  Node21 -> Node22 [color="midnightblue",fontsize="10",style="solid"];
  Node22 [label="PVRTMat4::PerspectiveFov",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a9e6ccece8c34673154a72f993d10529b",tooltip="Perspective calculation where field of view is used instead of near plane dimensions. "];
  Node22 -> Node23 [color="midnightblue",fontsize="10",style="solid"];
  Node23 [label="PVRTMat4::Perspective",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#af03e5074ed794e142237cd9452f0e054",tooltip="Create a perspective matrix. "];
  Node1 -> Node24 [color="midnightblue",fontsize="10",style="solid"];
  Node24 [label="OGLES3Water::DrawMesh",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_o_g_l_e_s3_water.html#a13f91a190b3395df1cbf7131aaa86753"];
  Node24 -> Node12 [color="midnightblue",fontsize="10",style="solid"];
  Node24 -> Node25 [color="midnightblue",fontsize="10",style="solid"];
  Node25 [label="PVRTMat4::ptr",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a1bcd0a1b62fa95a853b32ce18429c366",tooltip="Calculates transpose of this matrix. "];
  Node1 -> Node26 [color="midnightblue",fontsize="10",style="solid"];
  Node26 [label="OGLES3Water::DrawWater",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_o_g_l_e_s3_water.html#a02ee6786ce99e7d574579142119335bf"];
  Node26 -> Node25 [color="midnightblue",fontsize="10",style="solid"];
  Node26 -> Node27 [color="midnightblue",fontsize="10",style="solid"];
  Node27 [label="OGLES3Water::DrawInfinite\lPlane",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_o_g_l_e_s3_water.html#a8adccbbd77d86015388d4f631b608056"];
  Node27 -> Node28 [color="midnightblue",fontsize="10",style="solid"];
  Node28 [label="PVRTMat4::inverseEx",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#a05c97718d88268d15151bd092dbc1cc1",tooltip="Calculates multiplicative inverse of this matrix Uses a linear equation solver and the knowledge that..."];
  Node28 -> Node29 [color="midnightblue",fontsize="10",style="solid"];
  Node29 [label="PVRTMat4::Identity",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_p_v_r_t_mat4.html#aec7e6d87fc29ef245978cbeaeedf15d7",tooltip="Generates an identity matrix. "];
  Node28 -> Node30 [color="midnightblue",fontsize="10",style="solid"];
  Node30 [label="PVRTLinearEqSolve",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_p_v_r_t_vector_8h.html#a07390b9e1020a498d8ceb1ba7131ce98"];
  Node27 -> Node31 [color="midnightblue",fontsize="10",style="solid"];
  Node31 [label="PVRTMiscCalculateInfinite\lPlane",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_p_v_r_t_misc_8h.html#aacc2e1347108b455cf51f5db65ca0313",tooltip="Calculates world-space coords of a screen-filling representation of an infinite plane The resulting v..."];
  Node31 -> Node32 [color="midnightblue",fontsize="10",style="solid"];
  Node32 [label="PVRTMiscCalculateIntersection\lLinePlane",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_p_v_r_t_misc_8h.html#a5f75257897167e433996ef152ab42599",tooltip="Calculates coords of the intersection of a line and an infinite plane. "];
}
